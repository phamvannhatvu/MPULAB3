
Lab3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f60  08002f60  00012f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f84  08002f84  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f84  08002f84  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f84  08002f84  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f84  08002f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f88  08002f88  00012f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08002f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000004c  08002fd8  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002fd8  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009442  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b83  00000000  00000000  000294b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002b040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002bae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b10  00000000  00000000  0002c4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7fa  00000000  00000000  00042fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082847  00000000  00000000  0004e7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0ff9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad0  00000000  00000000  000d104c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f48 	.word	0x08002f48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	08002f48 	.word	0x08002f48

0800014c <get_button_state>:
#include "input_processing.h"

enum ButtonState buttonState[NO_OF_BUTTONS];

enum ButtonState get_button_state(uint8_t index)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	return buttonState[index];
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	4a03      	ldr	r2, [pc, #12]	; (8000168 <get_button_state+0x1c>)
 800015a:	5cd3      	ldrb	r3, [r2, r3]
}
 800015c:	4618      	mov	r0, r3
 800015e:	370c      	adds	r7, #12
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr
 8000166:	bf00      	nop
 8000168:	20000068 	.word	0x20000068

0800016c <init_button_state>:

void init_button_state()
{
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NO_OF_BUTTONS; ++i)
 8000172:	2300      	movs	r3, #0
 8000174:	71fb      	strb	r3, [r7, #7]
 8000176:	e006      	b.n	8000186 <init_button_state+0x1a>
	{
		buttonState[i] = BUTTON_RELEASED;
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4a07      	ldr	r2, [pc, #28]	; (8000198 <init_button_state+0x2c>)
 800017c:	2100      	movs	r1, #0
 800017e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NO_OF_BUTTONS; ++i)
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	3301      	adds	r3, #1
 8000184:	71fb      	strb	r3, [r7, #7]
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b02      	cmp	r3, #2
 800018a:	d9f5      	bls.n	8000178 <init_button_state+0xc>
	}
}
 800018c:	bf00      	nop
 800018e:	bf00      	nop
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000068 	.word	0x20000068

0800019c <not_auto_increase_btn_fsm>:

//FSM for buttons that do not support auto-increment while holding.
void not_auto_increase_btn_fsm(uint8_t index)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	71fb      	strb	r3, [r7, #7]
	switch (buttonState[index])
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	4a12      	ldr	r2, [pc, #72]	; (80001f4 <not_auto_increase_btn_fsm+0x58>)
 80001aa:	5cd3      	ldrb	r3, [r2, r3]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d002      	beq.n	80001b6 <not_auto_increase_btn_fsm+0x1a>
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d00c      	beq.n	80001ce <not_auto_increase_btn_fsm+0x32>
		{
			buttonState[index] = BUTTON_RELEASED;
		}
		break;
	default:
		break;
 80001b4:	e01a      	b.n	80001ec <not_auto_increase_btn_fsm+0x50>
		if (is_button_pressed(index))
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	4618      	mov	r0, r3
 80001ba:	f000 f8d3 	bl	8000364 <is_button_pressed>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d010      	beq.n	80001e6 <not_auto_increase_btn_fsm+0x4a>
			buttonState[index] = BUTTON_PRESSED;
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4a0b      	ldr	r2, [pc, #44]	; (80001f4 <not_auto_increase_btn_fsm+0x58>)
 80001c8:	2101      	movs	r1, #1
 80001ca:	54d1      	strb	r1, [r2, r3]
		break;
 80001cc:	e00b      	b.n	80001e6 <not_auto_increase_btn_fsm+0x4a>
		if (!is_button_pressed(index))
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 f8c7 	bl	8000364 <is_button_pressed>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d106      	bne.n	80001ea <not_auto_increase_btn_fsm+0x4e>
			buttonState[index] = BUTTON_RELEASED;
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <not_auto_increase_btn_fsm+0x58>)
 80001e0:	2100      	movs	r1, #0
 80001e2:	54d1      	strb	r1, [r2, r3]
		break;
 80001e4:	e001      	b.n	80001ea <not_auto_increase_btn_fsm+0x4e>
		break;
 80001e6:	bf00      	nop
 80001e8:	e000      	b.n	80001ec <not_auto_increase_btn_fsm+0x50>
		break;
 80001ea:	bf00      	nop
	}
}
 80001ec:	bf00      	nop
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	20000068 	.word	0x20000068

080001f8 <auto_increase_btn_fsm>:

//FSM for buttons that support auto-increment while holding.
void auto_increase_btn_fsm(uint8_t index)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	71fb      	strb	r3, [r7, #7]
	switch (buttonState[index])
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	4a22      	ldr	r2, [pc, #136]	; (8000290 <auto_increase_btn_fsm+0x98>)
 8000206:	5cd3      	ldrb	r3, [r2, r3]
 8000208:	2b02      	cmp	r3, #2
 800020a:	d029      	beq.n	8000260 <auto_increase_btn_fsm+0x68>
 800020c:	2b02      	cmp	r3, #2
 800020e:	dc33      	bgt.n	8000278 <auto_increase_btn_fsm+0x80>
 8000210:	2b00      	cmp	r3, #0
 8000212:	d002      	beq.n	800021a <auto_increase_btn_fsm+0x22>
 8000214:	2b01      	cmp	r3, #1
 8000216:	d00c      	beq.n	8000232 <auto_increase_btn_fsm+0x3a>
		{
			buttonState[index] = BUTTON_RELEASED;
		}
		break;
	default:
		break;
 8000218:	e02e      	b.n	8000278 <auto_increase_btn_fsm+0x80>
		if (is_button_pressed(index))
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f8a1 	bl	8000364 <is_button_pressed>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d029      	beq.n	800027c <auto_increase_btn_fsm+0x84>
			buttonState[index] = BUTTON_PRESSED;
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	4a19      	ldr	r2, [pc, #100]	; (8000290 <auto_increase_btn_fsm+0x98>)
 800022c:	2101      	movs	r1, #1
 800022e:	54d1      	strb	r1, [r2, r3]
		break;
 8000230:	e024      	b.n	800027c <auto_increase_btn_fsm+0x84>
		if (!is_button_pressed(index))
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f895 	bl	8000364 <is_button_pressed>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d103      	bne.n	8000248 <auto_increase_btn_fsm+0x50>
			buttonState[index] = BUTTON_RELEASED;
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4a13      	ldr	r2, [pc, #76]	; (8000290 <auto_increase_btn_fsm+0x98>)
 8000244:	2100      	movs	r1, #0
 8000246:	54d1      	strb	r1, [r2, r3]
		if (is_button_pressed_1s(index))
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f8a4 	bl	8000398 <is_button_pressed_1s>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d014      	beq.n	8000280 <auto_increase_btn_fsm+0x88>
			buttonState[index] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	4a0d      	ldr	r2, [pc, #52]	; (8000290 <auto_increase_btn_fsm+0x98>)
 800025a:	2102      	movs	r1, #2
 800025c:	54d1      	strb	r1, [r2, r3]
		break;
 800025e:	e00f      	b.n	8000280 <auto_increase_btn_fsm+0x88>
		if (!is_button_pressed(index))
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	4618      	mov	r0, r3
 8000264:	f000 f87e 	bl	8000364 <is_button_pressed>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d10a      	bne.n	8000284 <auto_increase_btn_fsm+0x8c>
			buttonState[index] = BUTTON_RELEASED;
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	4a07      	ldr	r2, [pc, #28]	; (8000290 <auto_increase_btn_fsm+0x98>)
 8000272:	2100      	movs	r1, #0
 8000274:	54d1      	strb	r1, [r2, r3]
		break;
 8000276:	e005      	b.n	8000284 <auto_increase_btn_fsm+0x8c>
		break;
 8000278:	bf00      	nop
 800027a:	e004      	b.n	8000286 <auto_increase_btn_fsm+0x8e>
		break;
 800027c:	bf00      	nop
 800027e:	e002      	b.n	8000286 <auto_increase_btn_fsm+0x8e>
		break;
 8000280:	bf00      	nop
 8000282:	e000      	b.n	8000286 <auto_increase_btn_fsm+0x8e>
		break;
 8000284:	bf00      	nop
	}
}
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000068 	.word	0x20000068

08000294 <button_reading>:

static GPIO_TypeDef * buttonPort[NO_OF_BUTTONS] = {SELECT_MODE_BTN_GPIO_Port, MODIFY_CYCLE_BTN_GPIO_Port, SET_VALUE_BTN_GPIO_Port};
static uint16_t buttonPin[NO_OF_BUTTONS] = {SELECT_MODE_BTN_Pin, MODIFY_CYCLE_BTN_Pin, SET_VALUE_BTN_Pin};

void button_reading(void)
{
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NO_OF_BUTTONS; ++i)
 800029a:	2300      	movs	r3, #0
 800029c:	71fb      	strb	r3, [r7, #7]
 800029e:	e04a      	b.n	8000336 <button_reading+0xa2>
	{
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80002a0:	79fa      	ldrb	r2, [r7, #7]
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	4928      	ldr	r1, [pc, #160]	; (8000348 <button_reading+0xb4>)
 80002a6:	5c89      	ldrb	r1, [r1, r2]
 80002a8:	4a28      	ldr	r2, [pc, #160]	; (800034c <button_reading+0xb8>)
 80002aa:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	4a28      	ldr	r2, [pc, #160]	; (8000350 <button_reading+0xbc>)
 80002b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	4927      	ldr	r1, [pc, #156]	; (8000354 <button_reading+0xc0>)
 80002b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80002bc:	79fc      	ldrb	r4, [r7, #7]
 80002be:	4619      	mov	r1, r3
 80002c0:	4610      	mov	r0, r2
 80002c2:	f001 fe07 	bl	8001ed4 <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <button_reading+0xb4>)
 80002cc:	551a      	strb	r2, [r3, r4]
		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <button_reading+0xb4>)
 80002d2:	5cd2      	ldrb	r2, [r2, r3]
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	491d      	ldr	r1, [pc, #116]	; (800034c <button_reading+0xb8>)
 80002d8:	5ccb      	ldrb	r3, [r1, r3]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d128      	bne.n	8000330 <button_reading+0x9c>
		{
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80002de:	79fa      	ldrb	r2, [r7, #7]
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	4919      	ldr	r1, [pc, #100]	; (8000348 <button_reading+0xb4>)
 80002e4:	5c89      	ldrb	r1, [r1, r2]
 80002e6:	4a1c      	ldr	r2, [pc, #112]	; (8000358 <button_reading+0xc4>)
 80002e8:	54d1      	strb	r1, [r2, r3]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED)
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	4a1a      	ldr	r2, [pc, #104]	; (8000358 <button_reading+0xc4>)
 80002ee:	5cd3      	ldrb	r3, [r2, r3]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d114      	bne.n	800031e <button_reading+0x8a>
			{
				if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING)
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	4a19      	ldr	r2, [pc, #100]	; (800035c <button_reading+0xc8>)
 80002f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002fc:	2b63      	cmp	r3, #99	; 0x63
 80002fe:	d809      	bhi.n	8000314 <button_reading+0x80>
				{
					++counterForButtonPress1s[i];
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	4a16      	ldr	r2, [pc, #88]	; (800035c <button_reading+0xc8>)
 8000304:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000308:	3201      	adds	r2, #1
 800030a:	b291      	uxth	r1, r2
 800030c:	4a13      	ldr	r2, [pc, #76]	; (800035c <button_reading+0xc8>)
 800030e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000312:	e00d      	b.n	8000330 <button_reading+0x9c>
				}else
				{
					flagForButtonPress1s[i] = 1;
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	4a12      	ldr	r2, [pc, #72]	; (8000360 <button_reading+0xcc>)
 8000318:	2101      	movs	r1, #1
 800031a:	54d1      	strb	r1, [r2, r3]
 800031c:	e008      	b.n	8000330 <button_reading+0x9c>
				}
			}else
			{
				counterForButtonPress1s[i] = 0;
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	4a0e      	ldr	r2, [pc, #56]	; (800035c <button_reading+0xc8>)
 8000322:	2100      	movs	r1, #0
 8000324:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <button_reading+0xcc>)
 800032c:	2100      	movs	r1, #0
 800032e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NO_OF_BUTTONS; ++i)
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	3301      	adds	r3, #1
 8000334:	71fb      	strb	r3, [r7, #7]
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	2b02      	cmp	r3, #2
 800033a:	d9b1      	bls.n	80002a0 <button_reading+0xc>
			}
		}
	}
}
 800033c:	bf00      	nop
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	bd90      	pop	{r4, r7, pc}
 8000346:	bf00      	nop
 8000348:	20000070 	.word	0x20000070
 800034c:	20000074 	.word	0x20000074
 8000350:	20000000 	.word	0x20000000
 8000354:	2000000c 	.word	0x2000000c
 8000358:	2000006c 	.word	0x2000006c
 800035c:	2000007c 	.word	0x2000007c
 8000360:	20000078 	.word	0x20000078

08000364 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	2b02      	cmp	r3, #2
 8000372:	d901      	bls.n	8000378 <is_button_pressed+0x14>
 8000374:	2300      	movs	r3, #0
 8000376:	e007      	b.n	8000388 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	4a06      	ldr	r2, [pc, #24]	; (8000394 <is_button_pressed+0x30>)
 800037c:	5cd3      	ldrb	r3, [r2, r3]
 800037e:	2b00      	cmp	r3, #0
 8000380:	bf0c      	ite	eq
 8000382:	2301      	moveq	r3, #1
 8000384:	2300      	movne	r3, #0
 8000386:	b2db      	uxtb	r3, r3
}
 8000388:	4618      	mov	r0, r3
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	2000006c 	.word	0x2000006c

08000398 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(uint8_t index)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d901      	bls.n	80003ac <is_button_pressed_1s+0x14>
 80003a8:	2300      	movs	r3, #0
 80003aa:	e00b      	b.n	80003c4 <is_button_pressed_1s+0x2c>
	if (flagForButtonPress1s[index] == 1)
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <is_button_pressed_1s+0x38>)
 80003b0:	5cd3      	ldrb	r3, [r2, r3]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d105      	bne.n	80003c2 <is_button_pressed_1s+0x2a>
	{
		flagForButtonPress1s[index] = 0;
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	4a05      	ldr	r2, [pc, #20]	; (80003d0 <is_button_pressed_1s+0x38>)
 80003ba:	2100      	movs	r1, #0
 80003bc:	54d1      	strb	r1, [r2, r3]
		return 1;
 80003be:	2301      	movs	r3, #1
 80003c0:	e000      	b.n	80003c4 <is_button_pressed_1s+0x2c>
	}
	return 0;
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	20000078 	.word	0x20000078

080003d4 <init_button>:

void init_button()
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NO_OF_BUTTONS; ++i)
 80003da:	2300      	movs	r3, #0
 80003dc:	71fb      	strb	r3, [r7, #7]
 80003de:	e017      	b.n	8000410 <init_button+0x3c>
	{
		buttonBuffer[i] = BUTTON_IS_RELEASED;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	4a10      	ldr	r2, [pc, #64]	; (8000424 <init_button+0x50>)
 80003e4:	2101      	movs	r1, #1
 80003e6:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = BUTTON_IS_RELEASED;
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	4a0f      	ldr	r2, [pc, #60]	; (8000428 <init_button+0x54>)
 80003ec:	2101      	movs	r1, #1
 80003ee:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	; (800042c <init_button+0x58>)
 80003f4:	2101      	movs	r1, #1
 80003f6:	54d1      	strb	r1, [r2, r3]

		flagForButtonPress1s[i] = 0;
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <init_button+0x5c>)
 80003fc:	2100      	movs	r1, #0
 80003fe:	54d1      	strb	r1, [r2, r3]
		counterForButtonPress1s[i] = 0;
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	4a0c      	ldr	r2, [pc, #48]	; (8000434 <init_button+0x60>)
 8000404:	2100      	movs	r1, #0
 8000406:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < NO_OF_BUTTONS; ++i)
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	3301      	adds	r3, #1
 800040e:	71fb      	strb	r3, [r7, #7]
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	2b02      	cmp	r3, #2
 8000414:	d9e4      	bls.n	80003e0 <init_button+0xc>
	}
}
 8000416:	bf00      	nop
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	2000006c 	.word	0x2000006c
 8000428:	20000070 	.word	0x20000070
 800042c:	20000074 	.word	0x20000074
 8000430:	20000078 	.word	0x20000078
 8000434:	2000007c 	.word	0x2000007c

08000438 <traffic_light_reset>:
 */
uint8_t led_7seg_values[NUM_OF_7SEG_LEDS];
uint8_t led7_status = 0;

void traffic_light_reset()
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	roadCounter[0] = red_duration;
 800043c:	4b23      	ldr	r3, [pc, #140]	; (80004cc <traffic_light_reset+0x94>)
 800043e:	781a      	ldrb	r2, [r3, #0]
 8000440:	4b23      	ldr	r3, [pc, #140]	; (80004d0 <traffic_light_reset+0x98>)
 8000442:	701a      	strb	r2, [r3, #0]
	roadState[0] = RED;
 8000444:	4b23      	ldr	r3, [pc, #140]	; (80004d4 <traffic_light_reset+0x9c>)
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
	roadCounter[1] = green_duration;
 800044a:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <traffic_light_reset+0xa0>)
 800044c:	781a      	ldrb	r2, [r3, #0]
 800044e:	4b20      	ldr	r3, [pc, #128]	; (80004d0 <traffic_light_reset+0x98>)
 8000450:	705a      	strb	r2, [r3, #1]
	roadState[1] = GREEN;
 8000452:	4b20      	ldr	r3, [pc, #128]	; (80004d4 <traffic_light_reset+0x9c>)
 8000454:	2201      	movs	r2, #1
 8000456:	705a      	strb	r2, [r3, #1]
	set_timer_traffic1(TRAFFIC_DURATION);
 8000458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800045c:	f001 f954 	bl	8001708 <set_timer_traffic1>
	set_timer_traffic2(TRAFFIC_DURATION);
 8000460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000464:	f001 f98e 	bl	8001784 <set_timer_traffic2>

	HAL_GPIO_WritePin(redPort[0], redPin[0], GPIO_PIN_RESET);
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <traffic_light_reset+0xa4>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a1c      	ldr	r2, [pc, #112]	; (80004e0 <traffic_light_reset+0xa8>)
 800046e:	8811      	ldrh	r1, [r2, #0]
 8000470:	2200      	movs	r2, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f001 fd45 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(greenPort[0], greenPin[0], GPIO_PIN_SET);
 8000478:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <traffic_light_reset+0xac>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a1a      	ldr	r2, [pc, #104]	; (80004e8 <traffic_light_reset+0xb0>)
 800047e:	8811      	ldrh	r1, [r2, #0]
 8000480:	2201      	movs	r2, #1
 8000482:	4618      	mov	r0, r3
 8000484:	f001 fd3d 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellowPort[0], yellowPin[0], GPIO_PIN_SET);
 8000488:	4b18      	ldr	r3, [pc, #96]	; (80004ec <traffic_light_reset+0xb4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a18      	ldr	r2, [pc, #96]	; (80004f0 <traffic_light_reset+0xb8>)
 800048e:	8811      	ldrh	r1, [r2, #0]
 8000490:	2201      	movs	r2, #1
 8000492:	4618      	mov	r0, r3
 8000494:	f001 fd35 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(redPort[1], redPin[1], GPIO_PIN_SET);
 8000498:	4b10      	ldr	r3, [pc, #64]	; (80004dc <traffic_light_reset+0xa4>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <traffic_light_reset+0xa8>)
 800049e:	8851      	ldrh	r1, [r2, #2]
 80004a0:	2201      	movs	r2, #1
 80004a2:	4618      	mov	r0, r3
 80004a4:	f001 fd2d 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(greenPort[1], greenPin[1], GPIO_PIN_RESET);
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <traffic_light_reset+0xac>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <traffic_light_reset+0xb0>)
 80004ae:	8851      	ldrh	r1, [r2, #2]
 80004b0:	2200      	movs	r2, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 fd25 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellowPort[1], yellowPin[1], GPIO_PIN_SET);
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <traffic_light_reset+0xb4>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	4a0c      	ldr	r2, [pc, #48]	; (80004f0 <traffic_light_reset+0xb8>)
 80004be:	8851      	ldrh	r1, [r2, #2]
 80004c0:	2201      	movs	r2, #1
 80004c2:	4618      	mov	r0, r3
 80004c4:	f001 fd1d 	bl	8001f02 <HAL_GPIO_WritePin>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000003c 	.word	0x2000003c
 80004d0:	20000084 	.word	0x20000084
 80004d4:	20000014 	.word	0x20000014
 80004d8:	2000003d 	.word	0x2000003d
 80004dc:	20000018 	.word	0x20000018
 80004e0:	20000030 	.word	0x20000030
 80004e4:	20000020 	.word	0x20000020
 80004e8:	20000034 	.word	0x20000034
 80004ec:	20000028 	.word	0x20000028
 80004f0:	20000038 	.word	0x20000038

080004f4 <traffic_light_fsm>:

void traffic_light_fsm()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	led_7seg_values[0] = roadCounter[0] / 10;
 80004f8:	4ba6      	ldr	r3, [pc, #664]	; (8000794 <traffic_light_fsm+0x2a0>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	4aa6      	ldr	r2, [pc, #664]	; (8000798 <traffic_light_fsm+0x2a4>)
 80004fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000502:	08db      	lsrs	r3, r3, #3
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4ba5      	ldr	r3, [pc, #660]	; (800079c <traffic_light_fsm+0x2a8>)
 8000508:	701a      	strb	r2, [r3, #0]
	led_7seg_values[1] = roadCounter[0] % 10;
 800050a:	4ba2      	ldr	r3, [pc, #648]	; (8000794 <traffic_light_fsm+0x2a0>)
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	4ba2      	ldr	r3, [pc, #648]	; (8000798 <traffic_light_fsm+0x2a4>)
 8000510:	fba3 1302 	umull	r1, r3, r3, r2
 8000514:	08d9      	lsrs	r1, r3, #3
 8000516:	460b      	mov	r3, r1
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	440b      	add	r3, r1
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	1ad3      	subs	r3, r2, r3
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b9e      	ldr	r3, [pc, #632]	; (800079c <traffic_light_fsm+0x2a8>)
 8000524:	705a      	strb	r2, [r3, #1]
	led_7seg_values[2] = roadCounter[1] / 10;
 8000526:	4b9b      	ldr	r3, [pc, #620]	; (8000794 <traffic_light_fsm+0x2a0>)
 8000528:	785b      	ldrb	r3, [r3, #1]
 800052a:	4a9b      	ldr	r2, [pc, #620]	; (8000798 <traffic_light_fsm+0x2a4>)
 800052c:	fba2 2303 	umull	r2, r3, r2, r3
 8000530:	08db      	lsrs	r3, r3, #3
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b99      	ldr	r3, [pc, #612]	; (800079c <traffic_light_fsm+0x2a8>)
 8000536:	709a      	strb	r2, [r3, #2]
	led_7seg_values[3] = roadCounter[1] % 10;
 8000538:	4b96      	ldr	r3, [pc, #600]	; (8000794 <traffic_light_fsm+0x2a0>)
 800053a:	785a      	ldrb	r2, [r3, #1]
 800053c:	4b96      	ldr	r3, [pc, #600]	; (8000798 <traffic_light_fsm+0x2a4>)
 800053e:	fba3 1302 	umull	r1, r3, r3, r2
 8000542:	08d9      	lsrs	r1, r3, #3
 8000544:	460b      	mov	r3, r1
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	440b      	add	r3, r1
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b92      	ldr	r3, [pc, #584]	; (800079c <traffic_light_fsm+0x2a8>)
 8000552:	70da      	strb	r2, [r3, #3]

	switch (roadState[0])
 8000554:	4b92      	ldr	r3, [pc, #584]	; (80007a0 <traffic_light_fsm+0x2ac>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b02      	cmp	r3, #2
 800055a:	d06e      	beq.n	800063a <traffic_light_fsm+0x146>
 800055c:	2b02      	cmp	r3, #2
 800055e:	f300 80a4 	bgt.w	80006aa <traffic_light_fsm+0x1b6>
 8000562:	2b00      	cmp	r3, #0
 8000564:	d002      	beq.n	800056c <traffic_light_fsm+0x78>
 8000566:	2b01      	cmp	r3, #1
 8000568:	d034      	beq.n	80005d4 <traffic_light_fsm+0xe0>
 800056a:	e09e      	b.n	80006aa <traffic_light_fsm+0x1b6>
	{
	case RED:
		HAL_GPIO_WritePin(redPort[0], redPin[0], GPIO_PIN_RESET);
 800056c:	4b8d      	ldr	r3, [pc, #564]	; (80007a4 <traffic_light_fsm+0x2b0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a8d      	ldr	r2, [pc, #564]	; (80007a8 <traffic_light_fsm+0x2b4>)
 8000572:	8811      	ldrh	r1, [r2, #0]
 8000574:	2200      	movs	r2, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fcc3 	bl	8001f02 <HAL_GPIO_WritePin>
		if (is_timer_traffic1_flagged())
 800057c:	f001 f8e0 	bl	8001740 <is_timer_traffic1_flagged>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	f000 808c 	beq.w	80006a0 <traffic_light_fsm+0x1ac>
		{
			--roadCounter[0];
 8000588:	4b82      	ldr	r3, [pc, #520]	; (8000794 <traffic_light_fsm+0x2a0>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b80      	ldr	r3, [pc, #512]	; (8000794 <traffic_light_fsm+0x2a0>)
 8000592:	701a      	strb	r2, [r3, #0]
			if (roadCounter[0] <= 0)
 8000594:	4b7f      	ldr	r3, [pc, #508]	; (8000794 <traffic_light_fsm+0x2a0>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d116      	bne.n	80005ca <traffic_light_fsm+0xd6>
			{
				roadState[0] = GREEN;
 800059c:	4b80      	ldr	r3, [pc, #512]	; (80007a0 <traffic_light_fsm+0x2ac>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(redPort[0], redPin[0], GPIO_PIN_SET);
 80005a2:	4b80      	ldr	r3, [pc, #512]	; (80007a4 <traffic_light_fsm+0x2b0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a80      	ldr	r2, [pc, #512]	; (80007a8 <traffic_light_fsm+0x2b4>)
 80005a8:	8811      	ldrh	r1, [r2, #0]
 80005aa:	2201      	movs	r2, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fca8 	bl	8001f02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(greenPort[0], greenPin[0], GPIO_PIN_RESET);
 80005b2:	4b7e      	ldr	r3, [pc, #504]	; (80007ac <traffic_light_fsm+0x2b8>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a7e      	ldr	r2, [pc, #504]	; (80007b0 <traffic_light_fsm+0x2bc>)
 80005b8:	8811      	ldrh	r1, [r2, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fca0 	bl	8001f02 <HAL_GPIO_WritePin>
				roadCounter[0] = green_duration;
 80005c2:	4b7c      	ldr	r3, [pc, #496]	; (80007b4 <traffic_light_fsm+0x2c0>)
 80005c4:	781a      	ldrb	r2, [r3, #0]
 80005c6:	4b73      	ldr	r3, [pc, #460]	; (8000794 <traffic_light_fsm+0x2a0>)
 80005c8:	701a      	strb	r2, [r3, #0]
			}
			set_timer_traffic1(TRAFFIC_DURATION);
 80005ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ce:	f001 f89b 	bl	8001708 <set_timer_traffic1>
		}
		break;
 80005d2:	e065      	b.n	80006a0 <traffic_light_fsm+0x1ac>
	case GREEN:
		HAL_GPIO_WritePin(greenPort[0], greenPin[0], GPIO_PIN_RESET);
 80005d4:	4b75      	ldr	r3, [pc, #468]	; (80007ac <traffic_light_fsm+0x2b8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a75      	ldr	r2, [pc, #468]	; (80007b0 <traffic_light_fsm+0x2bc>)
 80005da:	8811      	ldrh	r1, [r2, #0]
 80005dc:	2200      	movs	r2, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fc8f 	bl	8001f02 <HAL_GPIO_WritePin>
		if (is_timer_traffic1_flagged())
 80005e4:	f001 f8ac 	bl	8001740 <is_timer_traffic1_flagged>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d05a      	beq.n	80006a4 <traffic_light_fsm+0x1b0>
		{
			--roadCounter[0];
 80005ee:	4b69      	ldr	r3, [pc, #420]	; (8000794 <traffic_light_fsm+0x2a0>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b67      	ldr	r3, [pc, #412]	; (8000794 <traffic_light_fsm+0x2a0>)
 80005f8:	701a      	strb	r2, [r3, #0]
			if (roadCounter[0] <= 0)
 80005fa:	4b66      	ldr	r3, [pc, #408]	; (8000794 <traffic_light_fsm+0x2a0>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d116      	bne.n	8000630 <traffic_light_fsm+0x13c>
			{
				roadState[0] = YELLOW;
 8000602:	4b67      	ldr	r3, [pc, #412]	; (80007a0 <traffic_light_fsm+0x2ac>)
 8000604:	2202      	movs	r2, #2
 8000606:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(greenPort[0], greenPin[0], GPIO_PIN_SET);
 8000608:	4b68      	ldr	r3, [pc, #416]	; (80007ac <traffic_light_fsm+0x2b8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a68      	ldr	r2, [pc, #416]	; (80007b0 <traffic_light_fsm+0x2bc>)
 800060e:	8811      	ldrh	r1, [r2, #0]
 8000610:	2201      	movs	r2, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fc75 	bl	8001f02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellowPort[0], yellowPin[0], GPIO_PIN_RESET);
 8000618:	4b67      	ldr	r3, [pc, #412]	; (80007b8 <traffic_light_fsm+0x2c4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a67      	ldr	r2, [pc, #412]	; (80007bc <traffic_light_fsm+0x2c8>)
 800061e:	8811      	ldrh	r1, [r2, #0]
 8000620:	2200      	movs	r2, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fc6d 	bl	8001f02 <HAL_GPIO_WritePin>
				roadCounter[0] = yellow_duration;
 8000628:	4b65      	ldr	r3, [pc, #404]	; (80007c0 <traffic_light_fsm+0x2cc>)
 800062a:	781a      	ldrb	r2, [r3, #0]
 800062c:	4b59      	ldr	r3, [pc, #356]	; (8000794 <traffic_light_fsm+0x2a0>)
 800062e:	701a      	strb	r2, [r3, #0]
			}
			set_timer_traffic1(TRAFFIC_DURATION);
 8000630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000634:	f001 f868 	bl	8001708 <set_timer_traffic1>
		}
		break;
 8000638:	e034      	b.n	80006a4 <traffic_light_fsm+0x1b0>
	case YELLOW:
		HAL_GPIO_WritePin(yellowPort[0], yellowPin[0], GPIO_PIN_RESET);
 800063a:	4b5f      	ldr	r3, [pc, #380]	; (80007b8 <traffic_light_fsm+0x2c4>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a5f      	ldr	r2, [pc, #380]	; (80007bc <traffic_light_fsm+0x2c8>)
 8000640:	8811      	ldrh	r1, [r2, #0]
 8000642:	2200      	movs	r2, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fc5c 	bl	8001f02 <HAL_GPIO_WritePin>
		if (is_timer_traffic1_flagged())
 800064a:	f001 f879 	bl	8001740 <is_timer_traffic1_flagged>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d029      	beq.n	80006a8 <traffic_light_fsm+0x1b4>
		{
			--roadCounter[0];
 8000654:	4b4f      	ldr	r3, [pc, #316]	; (8000794 <traffic_light_fsm+0x2a0>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	3b01      	subs	r3, #1
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b4d      	ldr	r3, [pc, #308]	; (8000794 <traffic_light_fsm+0x2a0>)
 800065e:	701a      	strb	r2, [r3, #0]
			if (roadCounter[0] <= 0)
 8000660:	4b4c      	ldr	r3, [pc, #304]	; (8000794 <traffic_light_fsm+0x2a0>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d116      	bne.n	8000696 <traffic_light_fsm+0x1a2>
			{
				roadState[0] = RED;
 8000668:	4b4d      	ldr	r3, [pc, #308]	; (80007a0 <traffic_light_fsm+0x2ac>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(yellowPort[0], yellowPin[0], GPIO_PIN_SET);
 800066e:	4b52      	ldr	r3, [pc, #328]	; (80007b8 <traffic_light_fsm+0x2c4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a52      	ldr	r2, [pc, #328]	; (80007bc <traffic_light_fsm+0x2c8>)
 8000674:	8811      	ldrh	r1, [r2, #0]
 8000676:	2201      	movs	r2, #1
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fc42 	bl	8001f02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(redPort[0], redPin[0], GPIO_PIN_RESET);
 800067e:	4b49      	ldr	r3, [pc, #292]	; (80007a4 <traffic_light_fsm+0x2b0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a49      	ldr	r2, [pc, #292]	; (80007a8 <traffic_light_fsm+0x2b4>)
 8000684:	8811      	ldrh	r1, [r2, #0]
 8000686:	2200      	movs	r2, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fc3a 	bl	8001f02 <HAL_GPIO_WritePin>
				roadCounter[0] = red_duration;
 800068e:	4b4d      	ldr	r3, [pc, #308]	; (80007c4 <traffic_light_fsm+0x2d0>)
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	4b40      	ldr	r3, [pc, #256]	; (8000794 <traffic_light_fsm+0x2a0>)
 8000694:	701a      	strb	r2, [r3, #0]
			}
			set_timer_traffic1(TRAFFIC_DURATION);
 8000696:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069a:	f001 f835 	bl	8001708 <set_timer_traffic1>
		}
		break;
 800069e:	e003      	b.n	80006a8 <traffic_light_fsm+0x1b4>
		break;
 80006a0:	bf00      	nop
 80006a2:	e002      	b.n	80006aa <traffic_light_fsm+0x1b6>
		break;
 80006a4:	bf00      	nop
 80006a6:	e000      	b.n	80006aa <traffic_light_fsm+0x1b6>
		break;
 80006a8:	bf00      	nop
	}

	switch (roadState[1])
 80006aa:	4b3d      	ldr	r3, [pc, #244]	; (80007a0 <traffic_light_fsm+0x2ac>)
 80006ac:	785b      	ldrb	r3, [r3, #1]
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	f000 808a 	beq.w	80007c8 <traffic_light_fsm+0x2d4>
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	f300 80bf 	bgt.w	8000838 <traffic_light_fsm+0x344>
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d002      	beq.n	80006c4 <traffic_light_fsm+0x1d0>
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d034      	beq.n	800072c <traffic_light_fsm+0x238>
			}
			set_timer_traffic2(TRAFFIC_DURATION);
		}
		break;
	}
}
 80006c2:	e0b9      	b.n	8000838 <traffic_light_fsm+0x344>
		HAL_GPIO_WritePin(redPort[1], redPin[1], GPIO_PIN_RESET);
 80006c4:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <traffic_light_fsm+0x2b0>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	4a37      	ldr	r2, [pc, #220]	; (80007a8 <traffic_light_fsm+0x2b4>)
 80006ca:	8851      	ldrh	r1, [r2, #2]
 80006cc:	2200      	movs	r2, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fc17 	bl	8001f02 <HAL_GPIO_WritePin>
		if (is_timer_traffic2_flagged())
 80006d4:	f001 f872 	bl	80017bc <is_timer_traffic2_flagged>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f000 80a7 	beq.w	800082e <traffic_light_fsm+0x33a>
			--roadCounter[1];
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <traffic_light_fsm+0x2a0>)
 80006e2:	785b      	ldrb	r3, [r3, #1]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <traffic_light_fsm+0x2a0>)
 80006ea:	705a      	strb	r2, [r3, #1]
			if (roadCounter[1] <= 0)
 80006ec:	4b29      	ldr	r3, [pc, #164]	; (8000794 <traffic_light_fsm+0x2a0>)
 80006ee:	785b      	ldrb	r3, [r3, #1]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d116      	bne.n	8000722 <traffic_light_fsm+0x22e>
				roadState[1] = GREEN;
 80006f4:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <traffic_light_fsm+0x2ac>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(redPort[1], redPin[1], GPIO_PIN_SET);
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <traffic_light_fsm+0x2b0>)
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <traffic_light_fsm+0x2b4>)
 8000700:	8851      	ldrh	r1, [r2, #2]
 8000702:	2201      	movs	r2, #1
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fbfc 	bl	8001f02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(greenPort[1], greenPin[1], GPIO_PIN_RESET);
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <traffic_light_fsm+0x2b8>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	4a28      	ldr	r2, [pc, #160]	; (80007b0 <traffic_light_fsm+0x2bc>)
 8000710:	8851      	ldrh	r1, [r2, #2]
 8000712:	2200      	movs	r2, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fbf4 	bl	8001f02 <HAL_GPIO_WritePin>
				roadCounter[1] = green_duration;
 800071a:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <traffic_light_fsm+0x2c0>)
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <traffic_light_fsm+0x2a0>)
 8000720:	705a      	strb	r2, [r3, #1]
			set_timer_traffic2(TRAFFIC_DURATION);
 8000722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000726:	f001 f82d 	bl	8001784 <set_timer_traffic2>
		break;
 800072a:	e080      	b.n	800082e <traffic_light_fsm+0x33a>
		HAL_GPIO_WritePin(greenPort[1], greenPin[1], GPIO_PIN_RESET);
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <traffic_light_fsm+0x2b8>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	4a1f      	ldr	r2, [pc, #124]	; (80007b0 <traffic_light_fsm+0x2bc>)
 8000732:	8851      	ldrh	r1, [r2, #2]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fbe3 	bl	8001f02 <HAL_GPIO_WritePin>
		if (is_timer_traffic2_flagged())
 800073c:	f001 f83e 	bl	80017bc <is_timer_traffic2_flagged>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d075      	beq.n	8000832 <traffic_light_fsm+0x33e>
			--roadCounter[1];
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <traffic_light_fsm+0x2a0>)
 8000748:	785b      	ldrb	r3, [r3, #1]
 800074a:	3b01      	subs	r3, #1
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <traffic_light_fsm+0x2a0>)
 8000750:	705a      	strb	r2, [r3, #1]
			if (roadCounter[1] <= 0)
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <traffic_light_fsm+0x2a0>)
 8000754:	785b      	ldrb	r3, [r3, #1]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d116      	bne.n	8000788 <traffic_light_fsm+0x294>
				roadState[1] = YELLOW;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <traffic_light_fsm+0x2ac>)
 800075c:	2202      	movs	r2, #2
 800075e:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(greenPort[1], greenPin[1], GPIO_PIN_SET);
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <traffic_light_fsm+0x2b8>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <traffic_light_fsm+0x2bc>)
 8000766:	8851      	ldrh	r1, [r2, #2]
 8000768:	2201      	movs	r2, #1
 800076a:	4618      	mov	r0, r3
 800076c:	f001 fbc9 	bl	8001f02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellowPort[1], yellowPin[1], GPIO_PIN_RESET);
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <traffic_light_fsm+0x2c4>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4a11      	ldr	r2, [pc, #68]	; (80007bc <traffic_light_fsm+0x2c8>)
 8000776:	8851      	ldrh	r1, [r2, #2]
 8000778:	2200      	movs	r2, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fbc1 	bl	8001f02 <HAL_GPIO_WritePin>
				roadCounter[1] = yellow_duration;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <traffic_light_fsm+0x2cc>)
 8000782:	781a      	ldrb	r2, [r3, #0]
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <traffic_light_fsm+0x2a0>)
 8000786:	705a      	strb	r2, [r3, #1]
			set_timer_traffic2(TRAFFIC_DURATION);
 8000788:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800078c:	f000 fffa 	bl	8001784 <set_timer_traffic2>
		break;
 8000790:	e04f      	b.n	8000832 <traffic_light_fsm+0x33e>
 8000792:	bf00      	nop
 8000794:	20000084 	.word	0x20000084
 8000798:	cccccccd 	.word	0xcccccccd
 800079c:	20000088 	.word	0x20000088
 80007a0:	20000014 	.word	0x20000014
 80007a4:	20000018 	.word	0x20000018
 80007a8:	20000030 	.word	0x20000030
 80007ac:	20000020 	.word	0x20000020
 80007b0:	20000034 	.word	0x20000034
 80007b4:	2000003d 	.word	0x2000003d
 80007b8:	20000028 	.word	0x20000028
 80007bc:	20000038 	.word	0x20000038
 80007c0:	2000003e 	.word	0x2000003e
 80007c4:	2000003c 	.word	0x2000003c
		HAL_GPIO_WritePin(yellowPort[1], yellowPin[1], GPIO_PIN_RESET);
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <traffic_light_fsm+0x348>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <traffic_light_fsm+0x34c>)
 80007ce:	8851      	ldrh	r1, [r2, #2]
 80007d0:	2200      	movs	r2, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fb95 	bl	8001f02 <HAL_GPIO_WritePin>
		if (is_timer_traffic2_flagged())
 80007d8:	f000 fff0 	bl	80017bc <is_timer_traffic2_flagged>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d029      	beq.n	8000836 <traffic_light_fsm+0x342>
			--roadCounter[1];
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <traffic_light_fsm+0x350>)
 80007e4:	785b      	ldrb	r3, [r3, #1]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <traffic_light_fsm+0x350>)
 80007ec:	705a      	strb	r2, [r3, #1]
			if (roadCounter[1] <= 0)
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <traffic_light_fsm+0x350>)
 80007f0:	785b      	ldrb	r3, [r3, #1]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d116      	bne.n	8000824 <traffic_light_fsm+0x330>
				roadState[1] = RED;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <traffic_light_fsm+0x354>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(yellowPort[1], yellowPin[1], GPIO_PIN_SET);
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <traffic_light_fsm+0x348>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <traffic_light_fsm+0x34c>)
 8000802:	8851      	ldrh	r1, [r2, #2]
 8000804:	2201      	movs	r2, #1
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fb7b 	bl	8001f02 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(redPort[0], redPin[1], GPIO_PIN_RESET);
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <traffic_light_fsm+0x358>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <traffic_light_fsm+0x35c>)
 8000812:	8851      	ldrh	r1, [r2, #2]
 8000814:	2200      	movs	r2, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fb73 	bl	8001f02 <HAL_GPIO_WritePin>
				roadCounter[1] = red_duration;
 800081c:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <traffic_light_fsm+0x360>)
 800081e:	781a      	ldrb	r2, [r3, #0]
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <traffic_light_fsm+0x350>)
 8000822:	705a      	strb	r2, [r3, #1]
			set_timer_traffic2(TRAFFIC_DURATION);
 8000824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000828:	f000 ffac 	bl	8001784 <set_timer_traffic2>
		break;
 800082c:	e003      	b.n	8000836 <traffic_light_fsm+0x342>
		break;
 800082e:	bf00      	nop
 8000830:	e002      	b.n	8000838 <traffic_light_fsm+0x344>
		break;
 8000832:	bf00      	nop
 8000834:	e000      	b.n	8000838 <traffic_light_fsm+0x344>
		break;
 8000836:	bf00      	nop
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000028 	.word	0x20000028
 8000840:	20000038 	.word	0x20000038
 8000844:	20000084 	.word	0x20000084
 8000848:	20000014 	.word	0x20000014
 800084c:	20000018 	.word	0x20000018
 8000850:	20000030 	.word	0x20000030
 8000854:	2000003c 	.word	0x2000003c

08000858 <blink_led>:

void blink_led(enum TrafficLightState mode_color)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
	led_7seg_values[0] = 0;
 8000862:	4b40      	ldr	r3, [pc, #256]	; (8000964 <blink_led+0x10c>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
	led_7seg_values[2] = duration_temp / 10;
 8000868:	4b3f      	ldr	r3, [pc, #252]	; (8000968 <blink_led+0x110>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4a3f      	ldr	r2, [pc, #252]	; (800096c <blink_led+0x114>)
 800086e:	fba2 2303 	umull	r2, r3, r2, r3
 8000872:	08db      	lsrs	r3, r3, #3
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <blink_led+0x10c>)
 8000878:	709a      	strb	r2, [r3, #2]
	led_7seg_values[3] = duration_temp % 10;
 800087a:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <blink_led+0x110>)
 800087c:	781a      	ldrb	r2, [r3, #0]
 800087e:	4b3b      	ldr	r3, [pc, #236]	; (800096c <blink_led+0x114>)
 8000880:	fba3 1302 	umull	r1, r3, r3, r2
 8000884:	08d9      	lsrs	r1, r3, #3
 8000886:	460b      	mov	r3, r1
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	440b      	add	r3, r1
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b34      	ldr	r3, [pc, #208]	; (8000964 <blink_led+0x10c>)
 8000894:	70da      	strb	r2, [r3, #3]
	switch (mode_color)
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d03e      	beq.n	800091a <blink_led+0xc2>
 800089c:	2b02      	cmp	r3, #2
 800089e:	dc5d      	bgt.n	800095c <blink_led+0x104>
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d002      	beq.n	80008aa <blink_led+0x52>
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d01c      	beq.n	80008e2 <blink_led+0x8a>
			HAL_GPIO_TogglePin(yellowPort[1], yellowPin[1]);
			set_timer_blink(BLINK_DURATION);
		}
		break;
	}
}
 80008a8:	e058      	b.n	800095c <blink_led+0x104>
		led_7seg_values[1] = 2;
 80008aa:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <blink_led+0x10c>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	705a      	strb	r2, [r3, #1]
		if (is_timer_blink_flagged())
 80008b0:	f000 fe8c 	bl	80015cc <is_timer_blink_flagged>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d04b      	beq.n	8000952 <blink_led+0xfa>
			HAL_GPIO_TogglePin(redPort[0], redPin[0]);
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <blink_led+0x118>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <blink_led+0x11c>)
 80008c0:	8812      	ldrh	r2, [r2, #0]
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 fb34 	bl	8001f32 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(redPort[1], redPin[1]);
 80008ca:	4b29      	ldr	r3, [pc, #164]	; (8000970 <blink_led+0x118>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	4a29      	ldr	r2, [pc, #164]	; (8000974 <blink_led+0x11c>)
 80008d0:	8852      	ldrh	r2, [r2, #2]
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fb2c 	bl	8001f32 <HAL_GPIO_TogglePin>
			set_timer_blink(BLINK_DURATION);
 80008da:	20fa      	movs	r0, #250	; 0xfa
 80008dc:	f000 fe5a 	bl	8001594 <set_timer_blink>
		break;
 80008e0:	e037      	b.n	8000952 <blink_led+0xfa>
		led_7seg_values[1] = 3;
 80008e2:	4b20      	ldr	r3, [pc, #128]	; (8000964 <blink_led+0x10c>)
 80008e4:	2203      	movs	r2, #3
 80008e6:	705a      	strb	r2, [r3, #1]
		if (is_timer_blink_flagged())
 80008e8:	f000 fe70 	bl	80015cc <is_timer_blink_flagged>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d031      	beq.n	8000956 <blink_led+0xfe>
			HAL_GPIO_TogglePin(greenPort[0], greenPin[0]);
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <blink_led+0x120>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a21      	ldr	r2, [pc, #132]	; (800097c <blink_led+0x124>)
 80008f8:	8812      	ldrh	r2, [r2, #0]
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 fb18 	bl	8001f32 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(greenPort[1], greenPin[1]);
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <blink_led+0x120>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	4a1d      	ldr	r2, [pc, #116]	; (800097c <blink_led+0x124>)
 8000908:	8852      	ldrh	r2, [r2, #2]
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f001 fb10 	bl	8001f32 <HAL_GPIO_TogglePin>
			set_timer_blink(BLINK_DURATION);
 8000912:	20fa      	movs	r0, #250	; 0xfa
 8000914:	f000 fe3e 	bl	8001594 <set_timer_blink>
		break;
 8000918:	e01d      	b.n	8000956 <blink_led+0xfe>
		led_7seg_values[1] = 4;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <blink_led+0x10c>)
 800091c:	2204      	movs	r2, #4
 800091e:	705a      	strb	r2, [r3, #1]
		if (is_timer_blink_flagged())
 8000920:	f000 fe54 	bl	80015cc <is_timer_blink_flagged>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d017      	beq.n	800095a <blink_led+0x102>
			HAL_GPIO_TogglePin(yellowPort[0], yellowPin[0]);
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <blink_led+0x128>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <blink_led+0x12c>)
 8000930:	8812      	ldrh	r2, [r2, #0]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f001 fafc 	bl	8001f32 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(yellowPort[1], yellowPin[1]);
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <blink_led+0x128>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <blink_led+0x12c>)
 8000940:	8852      	ldrh	r2, [r2, #2]
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f001 faf4 	bl	8001f32 <HAL_GPIO_TogglePin>
			set_timer_blink(BLINK_DURATION);
 800094a:	20fa      	movs	r0, #250	; 0xfa
 800094c:	f000 fe22 	bl	8001594 <set_timer_blink>
		break;
 8000950:	e003      	b.n	800095a <blink_led+0x102>
		break;
 8000952:	bf00      	nop
 8000954:	e002      	b.n	800095c <blink_led+0x104>
		break;
 8000956:	bf00      	nop
 8000958:	e000      	b.n	800095c <blink_led+0x104>
		break;
 800095a:	bf00      	nop
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000088 	.word	0x20000088
 8000968:	200000d8 	.word	0x200000d8
 800096c:	cccccccd 	.word	0xcccccccd
 8000970:	20000018 	.word	0x20000018
 8000974:	20000030 	.word	0x20000030
 8000978:	20000020 	.word	0x20000020
 800097c:	20000034 	.word	0x20000034
 8000980:	20000028 	.word	0x20000028
 8000984:	20000038 	.word	0x20000038

08000988 <led7_scanning>:

void led7_scanning()
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	display7SEG(led_7seg_values[led7_status]);
 800098c:	4b41      	ldr	r3, [pc, #260]	; (8000a94 <led7_scanning+0x10c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4b41      	ldr	r3, [pc, #260]	; (8000a98 <led7_scanning+0x110>)
 8000994:	5c9b      	ldrb	r3, [r3, r2]
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f8c6 	bl	8000b28 <display7SEG>
	switch (led7_status)
 800099c:	4b3d      	ldr	r3, [pc, #244]	; (8000a94 <led7_scanning+0x10c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	d86b      	bhi.n	8000a7c <led7_scanning+0xf4>
 80009a4:	a201      	add	r2, pc, #4	; (adr r2, 80009ac <led7_scanning+0x24>)
 80009a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009aa:	bf00      	nop
 80009ac:	080009bd 	.word	0x080009bd
 80009b0:	080009ed 	.word	0x080009ed
 80009b4:	08000a1d 	.word	0x08000a1d
 80009b8:	08000a4d 	.word	0x08000a4d
	{
	case 0:
		if (is_timer_7seg_scan_flagged())
 80009bc:	f000 fe82 	bl	80016c4 <is_timer_7seg_scan_flagged>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d05c      	beq.n	8000a80 <led7_scanning+0xf8>
		{
			HAL_GPIO_WritePin(EN_7SEG1_TEN_GPIO_Port, EN_7SEG1_TEN_Pin, GPIO_PIN_SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009cc:	4833      	ldr	r0, [pc, #204]	; (8000a9c <led7_scanning+0x114>)
 80009ce:	f001 fa98 	bl	8001f02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_7SEG1_UNIT_GPIO_Port, EN_7SEG1_UNIT_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d8:	4830      	ldr	r0, [pc, #192]	; (8000a9c <led7_scanning+0x114>)
 80009da:	f001 fa92 	bl	8001f02 <HAL_GPIO_WritePin>
			led7_status = 1;
 80009de:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <led7_scanning+0x10c>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
			set_timer_7seg_scan(SCANNING_DURATION);
 80009e4:	20fa      	movs	r0, #250	; 0xfa
 80009e6:	f000 fe51 	bl	800168c <set_timer_7seg_scan>
		}
		break;
 80009ea:	e049      	b.n	8000a80 <led7_scanning+0xf8>
	case 1:
		if (is_timer_7seg_scan_flagged())
 80009ec:	f000 fe6a 	bl	80016c4 <is_timer_7seg_scan_flagged>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d046      	beq.n	8000a84 <led7_scanning+0xfc>
		{
			HAL_GPIO_WritePin(EN_7SEG1_UNIT_GPIO_Port, EN_7SEG1_UNIT_Pin, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fc:	4827      	ldr	r0, [pc, #156]	; (8000a9c <led7_scanning+0x114>)
 80009fe:	f001 fa80 	bl	8001f02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_7SEG2_TEN_GPIO_Port, EN_7SEG2_TEN_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a08:	4824      	ldr	r0, [pc, #144]	; (8000a9c <led7_scanning+0x114>)
 8000a0a:	f001 fa7a 	bl	8001f02 <HAL_GPIO_WritePin>
			led7_status = 2;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <led7_scanning+0x10c>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	701a      	strb	r2, [r3, #0]
			set_timer_7seg_scan(SCANNING_DURATION);
 8000a14:	20fa      	movs	r0, #250	; 0xfa
 8000a16:	f000 fe39 	bl	800168c <set_timer_7seg_scan>
		}
		break;
 8000a1a:	e033      	b.n	8000a84 <led7_scanning+0xfc>
	case 2:
		if (is_timer_7seg_scan_flagged())
 8000a1c:	f000 fe52 	bl	80016c4 <is_timer_7seg_scan_flagged>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d030      	beq.n	8000a88 <led7_scanning+0x100>
		{
			HAL_GPIO_WritePin(EN_7SEG2_TEN_GPIO_Port, EN_7SEG2_TEN_Pin, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2c:	481b      	ldr	r0, [pc, #108]	; (8000a9c <led7_scanning+0x114>)
 8000a2e:	f001 fa68 	bl	8001f02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_7SEG2_UNIT_GPIO_Port, EN_7SEG2_UNIT_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a38:	4818      	ldr	r0, [pc, #96]	; (8000a9c <led7_scanning+0x114>)
 8000a3a:	f001 fa62 	bl	8001f02 <HAL_GPIO_WritePin>
			led7_status = 3;
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <led7_scanning+0x10c>)
 8000a40:	2203      	movs	r2, #3
 8000a42:	701a      	strb	r2, [r3, #0]
			set_timer_7seg_scan(SCANNING_DURATION);
 8000a44:	20fa      	movs	r0, #250	; 0xfa
 8000a46:	f000 fe21 	bl	800168c <set_timer_7seg_scan>
		}
		break;
 8000a4a:	e01d      	b.n	8000a88 <led7_scanning+0x100>
	case 3:
		if (is_timer_7seg_scan_flagged())
 8000a4c:	f000 fe3a 	bl	80016c4 <is_timer_7seg_scan_flagged>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d01a      	beq.n	8000a8c <led7_scanning+0x104>
		{
			HAL_GPIO_WritePin(EN_7SEG2_UNIT_GPIO_Port, EN_7SEG2_UNIT_Pin, GPIO_PIN_SET);
 8000a56:	2201      	movs	r2, #1
 8000a58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a5c:	480f      	ldr	r0, [pc, #60]	; (8000a9c <led7_scanning+0x114>)
 8000a5e:	f001 fa50 	bl	8001f02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_7SEG1_TEN_GPIO_Port, EN_7SEG1_TEN_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <led7_scanning+0x114>)
 8000a6a:	f001 fa4a 	bl	8001f02 <HAL_GPIO_WritePin>
			led7_status = 0;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <led7_scanning+0x10c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
			set_timer_7seg_scan(SCANNING_DURATION);
 8000a74:	20fa      	movs	r0, #250	; 0xfa
 8000a76:	f000 fe09 	bl	800168c <set_timer_7seg_scan>
		}
		break;
 8000a7a:	e007      	b.n	8000a8c <led7_scanning+0x104>
	default:
		break;
 8000a7c:	bf00      	nop
 8000a7e:	e006      	b.n	8000a8e <led7_scanning+0x106>
		break;
 8000a80:	bf00      	nop
 8000a82:	e004      	b.n	8000a8e <led7_scanning+0x106>
		break;
 8000a84:	bf00      	nop
 8000a86:	e002      	b.n	8000a8e <led7_scanning+0x106>
		break;
 8000a88:	bf00      	nop
 8000a8a:	e000      	b.n	8000a8e <led7_scanning+0x106>
		break;
 8000a8c:	bf00      	nop
	}
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000008c 	.word	0x2000008c
 8000a98:	20000088 	.word	0x20000088
 8000a9c:	40010800 	.word	0x40010800

08000aa0 <blink_led_clear>:

void blink_led_clear()
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(yellowPort[0], yellowPin[0], GPIO_PIN_SET);
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <blink_led_clear+0x70>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a1a      	ldr	r2, [pc, #104]	; (8000b14 <blink_led_clear+0x74>)
 8000aaa:	8811      	ldrh	r1, [r2, #0]
 8000aac:	2201      	movs	r2, #1
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 fa27 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(greenPort[0], greenPin[0], GPIO_PIN_SET);
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <blink_led_clear+0x78>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <blink_led_clear+0x7c>)
 8000aba:	8811      	ldrh	r1, [r2, #0]
 8000abc:	2201      	movs	r2, #1
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fa1f 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(redPort[0], redPin[0], GPIO_PIN_SET);
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <blink_led_clear+0x80>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <blink_led_clear+0x84>)
 8000aca:	8811      	ldrh	r1, [r2, #0]
 8000acc:	2201      	movs	r2, #1
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fa17 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellowPort[1], yellowPin[1], GPIO_PIN_SET);
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <blink_led_clear+0x70>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <blink_led_clear+0x74>)
 8000ada:	8851      	ldrh	r1, [r2, #2]
 8000adc:	2201      	movs	r2, #1
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fa0f 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(greenPort[1], greenPin[1], GPIO_PIN_SET);
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <blink_led_clear+0x78>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	4a0c      	ldr	r2, [pc, #48]	; (8000b1c <blink_led_clear+0x7c>)
 8000aea:	8851      	ldrh	r1, [r2, #2]
 8000aec:	2201      	movs	r2, #1
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fa07 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(redPort[1], redPin[1], GPIO_PIN_SET);
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <blink_led_clear+0x80>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <blink_led_clear+0x84>)
 8000afa:	8851      	ldrh	r1, [r2, #2]
 8000afc:	2201      	movs	r2, #1
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 f9ff 	bl	8001f02 <HAL_GPIO_WritePin>
	set_timer_blink(BLINK_DURATION);
 8000b04:	20fa      	movs	r0, #250	; 0xfa
 8000b06:	f000 fd45 	bl	8001594 <set_timer_blink>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000028 	.word	0x20000028
 8000b14:	20000038 	.word	0x20000038
 8000b18:	20000020 	.word	0x20000020
 8000b1c:	20000034 	.word	0x20000034
 8000b20:	20000018 	.word	0x20000018
 8000b24:	20000030 	.word	0x20000030

08000b28 <display7SEG>:

void display7SEG(uint8_t led_number)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	switch (led_number)
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2b09      	cmp	r3, #9
 8000b36:	f200 817f 	bhi.w	8000e38 <display7SEG+0x310>
 8000b3a:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <display7SEG+0x18>)
 8000b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b40:	08000b69 	.word	0x08000b69
 8000b44:	08000bb1 	.word	0x08000bb1
 8000b48:	08000bf9 	.word	0x08000bf9
 8000b4c:	08000c41 	.word	0x08000c41
 8000b50:	08000c89 	.word	0x08000c89
 8000b54:	08000cd1 	.word	0x08000cd1
 8000b58:	08000d19 	.word	0x08000d19
 8000b5c:	08000d61 	.word	0x08000d61
 8000b60:	08000da9 	.word	0x08000da9
 8000b64:	08000df1 	.word	0x08000df1
	{
	case 0:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	48b4      	ldr	r0, [pc, #720]	; (8000e40 <display7SEG+0x318>)
 8000b6e:	f001 f9c8 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2104      	movs	r1, #4
 8000b76:	48b2      	ldr	r0, [pc, #712]	; (8000e40 <display7SEG+0x318>)
 8000b78:	f001 f9c3 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2108      	movs	r1, #8
 8000b80:	48af      	ldr	r0, [pc, #700]	; (8000e40 <display7SEG+0x318>)
 8000b82:	f001 f9be 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2110      	movs	r1, #16
 8000b8a:	48ad      	ldr	r0, [pc, #692]	; (8000e40 <display7SEG+0x318>)
 8000b8c:	f001 f9b9 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2120      	movs	r1, #32
 8000b94:	48aa      	ldr	r0, [pc, #680]	; (8000e40 <display7SEG+0x318>)
 8000b96:	f001 f9b4 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2140      	movs	r1, #64	; 0x40
 8000b9e:	48a8      	ldr	r0, [pc, #672]	; (8000e40 <display7SEG+0x318>)
 8000ba0:	f001 f9af 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2180      	movs	r1, #128	; 0x80
 8000ba8:	48a5      	ldr	r0, [pc, #660]	; (8000e40 <display7SEG+0x318>)
 8000baa:	f001 f9aa 	bl	8001f02 <HAL_GPIO_WritePin>
		break;
 8000bae:	e143      	b.n	8000e38 <display7SEG+0x310>
	case 1:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2102      	movs	r1, #2
 8000bb4:	48a2      	ldr	r0, [pc, #648]	; (8000e40 <display7SEG+0x318>)
 8000bb6:	f001 f9a4 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	48a0      	ldr	r0, [pc, #640]	; (8000e40 <display7SEG+0x318>)
 8000bc0:	f001 f99f 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2108      	movs	r1, #8
 8000bc8:	489d      	ldr	r0, [pc, #628]	; (8000e40 <display7SEG+0x318>)
 8000bca:	f001 f99a 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2110      	movs	r1, #16
 8000bd2:	489b      	ldr	r0, [pc, #620]	; (8000e40 <display7SEG+0x318>)
 8000bd4:	f001 f995 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2120      	movs	r1, #32
 8000bdc:	4898      	ldr	r0, [pc, #608]	; (8000e40 <display7SEG+0x318>)
 8000bde:	f001 f990 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2140      	movs	r1, #64	; 0x40
 8000be6:	4896      	ldr	r0, [pc, #600]	; (8000e40 <display7SEG+0x318>)
 8000be8:	f001 f98b 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	4893      	ldr	r0, [pc, #588]	; (8000e40 <display7SEG+0x318>)
 8000bf2:	f001 f986 	bl	8001f02 <HAL_GPIO_WritePin>
		break;
 8000bf6:	e11f      	b.n	8000e38 <display7SEG+0x310>
	case 2:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4890      	ldr	r0, [pc, #576]	; (8000e40 <display7SEG+0x318>)
 8000bfe:	f001 f980 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2104      	movs	r1, #4
 8000c06:	488e      	ldr	r0, [pc, #568]	; (8000e40 <display7SEG+0x318>)
 8000c08:	f001 f97b 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2108      	movs	r1, #8
 8000c10:	488b      	ldr	r0, [pc, #556]	; (8000e40 <display7SEG+0x318>)
 8000c12:	f001 f976 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2110      	movs	r1, #16
 8000c1a:	4889      	ldr	r0, [pc, #548]	; (8000e40 <display7SEG+0x318>)
 8000c1c:	f001 f971 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2120      	movs	r1, #32
 8000c24:	4886      	ldr	r0, [pc, #536]	; (8000e40 <display7SEG+0x318>)
 8000c26:	f001 f96c 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2140      	movs	r1, #64	; 0x40
 8000c2e:	4884      	ldr	r0, [pc, #528]	; (8000e40 <display7SEG+0x318>)
 8000c30:	f001 f967 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	4881      	ldr	r0, [pc, #516]	; (8000e40 <display7SEG+0x318>)
 8000c3a:	f001 f962 	bl	8001f02 <HAL_GPIO_WritePin>
		break;
 8000c3e:	e0fb      	b.n	8000e38 <display7SEG+0x310>
	case 3:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2102      	movs	r1, #2
 8000c44:	487e      	ldr	r0, [pc, #504]	; (8000e40 <display7SEG+0x318>)
 8000c46:	f001 f95c 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	487c      	ldr	r0, [pc, #496]	; (8000e40 <display7SEG+0x318>)
 8000c50:	f001 f957 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2108      	movs	r1, #8
 8000c58:	4879      	ldr	r0, [pc, #484]	; (8000e40 <display7SEG+0x318>)
 8000c5a:	f001 f952 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2110      	movs	r1, #16
 8000c62:	4877      	ldr	r0, [pc, #476]	; (8000e40 <display7SEG+0x318>)
 8000c64:	f001 f94d 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	4874      	ldr	r0, [pc, #464]	; (8000e40 <display7SEG+0x318>)
 8000c6e:	f001 f948 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	4872      	ldr	r0, [pc, #456]	; (8000e40 <display7SEG+0x318>)
 8000c78:	f001 f943 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	486f      	ldr	r0, [pc, #444]	; (8000e40 <display7SEG+0x318>)
 8000c82:	f001 f93e 	bl	8001f02 <HAL_GPIO_WritePin>
		break;
 8000c86:	e0d7      	b.n	8000e38 <display7SEG+0x310>
	case 4:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	486c      	ldr	r0, [pc, #432]	; (8000e40 <display7SEG+0x318>)
 8000c8e:	f001 f938 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2104      	movs	r1, #4
 8000c96:	486a      	ldr	r0, [pc, #424]	; (8000e40 <display7SEG+0x318>)
 8000c98:	f001 f933 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	4867      	ldr	r0, [pc, #412]	; (8000e40 <display7SEG+0x318>)
 8000ca2:	f001 f92e 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2110      	movs	r1, #16
 8000caa:	4865      	ldr	r0, [pc, #404]	; (8000e40 <display7SEG+0x318>)
 8000cac:	f001 f929 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4862      	ldr	r0, [pc, #392]	; (8000e40 <display7SEG+0x318>)
 8000cb6:	f001 f924 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2140      	movs	r1, #64	; 0x40
 8000cbe:	4860      	ldr	r0, [pc, #384]	; (8000e40 <display7SEG+0x318>)
 8000cc0:	f001 f91f 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	485d      	ldr	r0, [pc, #372]	; (8000e40 <display7SEG+0x318>)
 8000cca:	f001 f91a 	bl	8001f02 <HAL_GPIO_WritePin>
		break;
 8000cce:	e0b3      	b.n	8000e38 <display7SEG+0x310>
	case 5:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	485a      	ldr	r0, [pc, #360]	; (8000e40 <display7SEG+0x318>)
 8000cd6:	f001 f914 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2104      	movs	r1, #4
 8000cde:	4858      	ldr	r0, [pc, #352]	; (8000e40 <display7SEG+0x318>)
 8000ce0:	f001 f90f 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	4855      	ldr	r0, [pc, #340]	; (8000e40 <display7SEG+0x318>)
 8000cea:	f001 f90a 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	4853      	ldr	r0, [pc, #332]	; (8000e40 <display7SEG+0x318>)
 8000cf4:	f001 f905 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2120      	movs	r1, #32
 8000cfc:	4850      	ldr	r0, [pc, #320]	; (8000e40 <display7SEG+0x318>)
 8000cfe:	f001 f900 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2140      	movs	r1, #64	; 0x40
 8000d06:	484e      	ldr	r0, [pc, #312]	; (8000e40 <display7SEG+0x318>)
 8000d08:	f001 f8fb 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	484b      	ldr	r0, [pc, #300]	; (8000e40 <display7SEG+0x318>)
 8000d12:	f001 f8f6 	bl	8001f02 <HAL_GPIO_WritePin>
		break;
 8000d16:	e08f      	b.n	8000e38 <display7SEG+0x310>
	case 6:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	4848      	ldr	r0, [pc, #288]	; (8000e40 <display7SEG+0x318>)
 8000d1e:	f001 f8f0 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2104      	movs	r1, #4
 8000d26:	4846      	ldr	r0, [pc, #280]	; (8000e40 <display7SEG+0x318>)
 8000d28:	f001 f8eb 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2108      	movs	r1, #8
 8000d30:	4843      	ldr	r0, [pc, #268]	; (8000e40 <display7SEG+0x318>)
 8000d32:	f001 f8e6 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2110      	movs	r1, #16
 8000d3a:	4841      	ldr	r0, [pc, #260]	; (8000e40 <display7SEG+0x318>)
 8000d3c:	f001 f8e1 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2120      	movs	r1, #32
 8000d44:	483e      	ldr	r0, [pc, #248]	; (8000e40 <display7SEG+0x318>)
 8000d46:	f001 f8dc 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2140      	movs	r1, #64	; 0x40
 8000d4e:	483c      	ldr	r0, [pc, #240]	; (8000e40 <display7SEG+0x318>)
 8000d50:	f001 f8d7 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2180      	movs	r1, #128	; 0x80
 8000d58:	4839      	ldr	r0, [pc, #228]	; (8000e40 <display7SEG+0x318>)
 8000d5a:	f001 f8d2 	bl	8001f02 <HAL_GPIO_WritePin>
		break;
 8000d5e:	e06b      	b.n	8000e38 <display7SEG+0x310>
	case 7:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2102      	movs	r1, #2
 8000d64:	4836      	ldr	r0, [pc, #216]	; (8000e40 <display7SEG+0x318>)
 8000d66:	f001 f8cc 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2104      	movs	r1, #4
 8000d6e:	4834      	ldr	r0, [pc, #208]	; (8000e40 <display7SEG+0x318>)
 8000d70:	f001 f8c7 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2108      	movs	r1, #8
 8000d78:	4831      	ldr	r0, [pc, #196]	; (8000e40 <display7SEG+0x318>)
 8000d7a:	f001 f8c2 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2110      	movs	r1, #16
 8000d82:	482f      	ldr	r0, [pc, #188]	; (8000e40 <display7SEG+0x318>)
 8000d84:	f001 f8bd 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	482c      	ldr	r0, [pc, #176]	; (8000e40 <display7SEG+0x318>)
 8000d8e:	f001 f8b8 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	482a      	ldr	r0, [pc, #168]	; (8000e40 <display7SEG+0x318>)
 8000d98:	f001 f8b3 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2180      	movs	r1, #128	; 0x80
 8000da0:	4827      	ldr	r0, [pc, #156]	; (8000e40 <display7SEG+0x318>)
 8000da2:	f001 f8ae 	bl	8001f02 <HAL_GPIO_WritePin>
		break;
 8000da6:	e047      	b.n	8000e38 <display7SEG+0x310>
	case 8:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2102      	movs	r1, #2
 8000dac:	4824      	ldr	r0, [pc, #144]	; (8000e40 <display7SEG+0x318>)
 8000dae:	f001 f8a8 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2104      	movs	r1, #4
 8000db6:	4822      	ldr	r0, [pc, #136]	; (8000e40 <display7SEG+0x318>)
 8000db8:	f001 f8a3 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	481f      	ldr	r0, [pc, #124]	; (8000e40 <display7SEG+0x318>)
 8000dc2:	f001 f89e 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2110      	movs	r1, #16
 8000dca:	481d      	ldr	r0, [pc, #116]	; (8000e40 <display7SEG+0x318>)
 8000dcc:	f001 f899 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2120      	movs	r1, #32
 8000dd4:	481a      	ldr	r0, [pc, #104]	; (8000e40 <display7SEG+0x318>)
 8000dd6:	f001 f894 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2140      	movs	r1, #64	; 0x40
 8000dde:	4818      	ldr	r0, [pc, #96]	; (8000e40 <display7SEG+0x318>)
 8000de0:	f001 f88f 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2180      	movs	r1, #128	; 0x80
 8000de8:	4815      	ldr	r0, [pc, #84]	; (8000e40 <display7SEG+0x318>)
 8000dea:	f001 f88a 	bl	8001f02 <HAL_GPIO_WritePin>
		break;
 8000dee:	e023      	b.n	8000e38 <display7SEG+0x310>
	case 9:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2102      	movs	r1, #2
 8000df4:	4812      	ldr	r0, [pc, #72]	; (8000e40 <display7SEG+0x318>)
 8000df6:	f001 f884 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	4810      	ldr	r0, [pc, #64]	; (8000e40 <display7SEG+0x318>)
 8000e00:	f001 f87f 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2108      	movs	r1, #8
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <display7SEG+0x318>)
 8000e0a:	f001 f87a 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2110      	movs	r1, #16
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <display7SEG+0x318>)
 8000e14:	f001 f875 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2120      	movs	r1, #32
 8000e1c:	4808      	ldr	r0, [pc, #32]	; (8000e40 <display7SEG+0x318>)
 8000e1e:	f001 f870 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2140      	movs	r1, #64	; 0x40
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <display7SEG+0x318>)
 8000e28:	f001 f86b 	bl	8001f02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	4803      	ldr	r0, [pc, #12]	; (8000e40 <display7SEG+0x318>)
 8000e32:	f001 f866 	bl	8001f02 <HAL_GPIO_WritePin>
		break;
 8000e36:	bf00      	nop
	}
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40010800 	.word	0x40010800

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4a:	f000 fd57 	bl	80018fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4e:	f000 f9eb 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e52:	f000 fa71 	bl	8001338 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e56:	f000 fa23 	bl	80012a0 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e5a:	48ba      	ldr	r0, [pc, #744]	; (8001144 <main+0x300>)
 8000e5c:	f001 fcb0 	bl	80027c0 <HAL_TIM_Base_Start_IT>
  init_leds();
 8000e60:	f000 facc 	bl	80013fc <init_leds>
  init_button_state();
 8000e64:	f7ff f982 	bl	800016c <init_button_state>
  init_button();
 8000e68:	f7ff fab4 	bl	80003d4 <init_button>
  init_timers();
 8000e6c:	f000 fb04 	bl	8001478 <init_timers>
  traffic_light_reset();
 8000e70:	f7ff fae2 	bl	8000438 <traffic_light_reset>

  enum SystemState systemState = NORMAL_MODE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Read button every 10ms
	  if (is_timer_btn_reading_flagged())
 8000e78:	f000 fbe6 	bl	8001648 <is_timer_btn_reading_flagged>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d004      	beq.n	8000e8c <main+0x48>
	  {
		  button_reading();
 8000e82:	f7ff fa07 	bl	8000294 <button_reading>
		  set_timer_btn_reading(10);
 8000e86:	200a      	movs	r0, #10
 8000e88:	f000 fbc2 	bl	8001610 <set_timer_btn_reading>
	  }

	  //Update the state of "select mode" button (index 0)
	  //This button does not support auto-increment while holding
	  not_auto_increase_btn_fsm(0);
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff f985 	bl	800019c <not_auto_increase_btn_fsm>
	  enum ButtonState selectModeButton = get_button_state(0);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff f95a 	bl	800014c <get_button_state>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	71bb      	strb	r3, [r7, #6]

	  //Update the state of "modify cycle" button (index 1)
	  auto_increase_btn_fsm(1);
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f7ff f9ab 	bl	80001f8 <auto_increase_btn_fsm>
	  enum ButtonState modifyCycleButton = get_button_state(1);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff f952 	bl	800014c <get_button_state>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	717b      	strb	r3, [r7, #5]

	  //Update the state of "normal mode return" button (index 2)
	  //This button does not support auto-increment while holding
	  not_auto_increase_btn_fsm(2);
 8000eac:	2002      	movs	r0, #2
 8000eae:	f7ff f975 	bl	800019c <not_auto_increase_btn_fsm>
	  enum ButtonState normalModeReturnButton = get_button_state(2);
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f7ff f94a 	bl	800014c <get_button_state>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	713b      	strb	r3, [r7, #4]

	  //FSM for the entire system
	  switch (systemState)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	2b0e      	cmp	r3, #14
 8000ec0:	f200 81a4 	bhi.w	800120c <main+0x3c8>
 8000ec4:	a201      	add	r2, pc, #4	; (adr r2, 8000ecc <main+0x88>)
 8000ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eca:	bf00      	nop
 8000ecc:	08000f09 	.word	0x08000f09
 8000ed0:	08000f1b 	.word	0x08000f1b
 8000ed4:	08000f39 	.word	0x08000f39
 8000ed8:	08000f67 	.word	0x08000f67
 8000edc:	08000f99 	.word	0x08000f99
 8000ee0:	08000fcb 	.word	0x08000fcb
 8000ee4:	08000feb 	.word	0x08000feb
 8000ee8:	08001019 	.word	0x08001019
 8000eec:	0800104b 	.word	0x0800104b
 8000ef0:	0800107d 	.word	0x0800107d
 8000ef4:	0800109d 	.word	0x0800109d
 8000ef8:	080010cb 	.word	0x080010cb
 8000efc:	080010fd 	.word	0x080010fd
 8000f00:	0800112d 	.word	0x0800112d
 8000f04:	0800115d 	.word	0x0800115d
	  {
	  case NORMAL_MODE:
		  traffic_light_fsm();
 8000f08:	f7ff faf4 	bl	80004f4 <traffic_light_fsm>
		  if (selectModeButton == BUTTON_PRESSED)
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	f040 815f 	bne.w	80011d2 <main+0x38e>
		  {
			  systemState = NORMAL_MODE_PRESSED;
 8000f14:	2301      	movs	r3, #1
 8000f16:	71fb      	strb	r3, [r7, #7]
		  }
		  break;
 8000f18:	e15b      	b.n	80011d2 <main+0x38e>
	  case NORMAL_MODE_PRESSED:
		  traffic_light_fsm();
 8000f1a:	f7ff faeb 	bl	80004f4 <traffic_light_fsm>
		  if (selectModeButton == BUTTON_RELEASED)
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f040 8158 	bne.w	80011d6 <main+0x392>
		  {
			  systemState = MODIFY_RED;
 8000f26:	2302      	movs	r3, #2
 8000f28:	71fb      	strb	r3, [r7, #7]
			  blink_led_clear();
 8000f2a:	f7ff fdb9 	bl	8000aa0 <blink_led_clear>
			  duration_temp = red_duration;
 8000f2e:	4b86      	ldr	r3, [pc, #536]	; (8001148 <main+0x304>)
 8000f30:	781a      	ldrb	r2, [r3, #0]
 8000f32:	4b86      	ldr	r3, [pc, #536]	; (800114c <main+0x308>)
 8000f34:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8000f36:	e14e      	b.n	80011d6 <main+0x392>
	  case MODIFY_RED:
		  blink_led(RED);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f7ff fc8d 	bl	8000858 <blink_led>
		  if (selectModeButton == BUTTON_PRESSED)
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d101      	bne.n	8000f48 <main+0x104>
		  {
			  systemState = MODIFY_RED_PRESSED;
 8000f44:	2305      	movs	r3, #5
 8000f46:	71fb      	strb	r3, [r7, #7]
		  }
		  if (modifyCycleButton == BUTTON_PRESSED)
 8000f48:	797b      	ldrb	r3, [r7, #5]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d101      	bne.n	8000f52 <main+0x10e>
		  {
			  systemState = UPDATE_RED_COUNTER;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	71fb      	strb	r3, [r7, #7]
		  }
		  if (normalModeReturnButton == BUTTON_PRESSED)
 8000f52:	793b      	ldrb	r3, [r7, #4]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	f040 8140 	bne.w	80011da <main+0x396>
		  {
			  preState = systemState;
 8000f5a:	4a7d      	ldr	r2, [pc, #500]	; (8001150 <main+0x30c>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	7013      	strb	r3, [r2, #0]
			  systemState = NORMAL_MODE_RETURN_PRESSED;
 8000f60:	230e      	movs	r3, #14
 8000f62:	71fb      	strb	r3, [r7, #7]
		  }
		  break;
 8000f64:	e139      	b.n	80011da <main+0x396>
	  case UPDATE_RED_COUNTER:
		  blink_led(RED);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fc76 	bl	8000858 <blink_led>
		  if (modifyCycleButton == BUTTON_RELEASED)
 8000f6c:	797b      	ldrb	r3, [r7, #5]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d107      	bne.n	8000f82 <main+0x13e>
		  {
			  ++duration_temp;
 8000f72:	4b76      	ldr	r3, [pc, #472]	; (800114c <main+0x308>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	3301      	adds	r3, #1
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b74      	ldr	r3, [pc, #464]	; (800114c <main+0x308>)
 8000f7c:	701a      	strb	r2, [r3, #0]
			  systemState = MODIFY_RED;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	71fb      	strb	r3, [r7, #7]
		  }
		  if (modifyCycleButton == BUTTON_PRESSED_MORE_THAN_1_SECOND)
 8000f82:	797b      	ldrb	r3, [r7, #5]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	f040 812a 	bne.w	80011de <main+0x39a>
		  {
			  set_timer_auto_increase(AUTO_INCREASE_DURATION);
 8000f8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f8e:	f000 fc37 	bl	8001800 <set_timer_auto_increase>
			  systemState = AUTO_UPDATE_RED_COUTER;
 8000f92:	2304      	movs	r3, #4
 8000f94:	71fb      	strb	r3, [r7, #7]
		  }
		  break;
 8000f96:	e122      	b.n	80011de <main+0x39a>
	  case AUTO_UPDATE_RED_COUTER:
		  blink_led(RED);
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff fc5d 	bl	8000858 <blink_led>
		  if (modifyCycleButton == BUTTON_RELEASED)
 8000f9e:	797b      	ldrb	r3, [r7, #5]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <main+0x164>
		  {
			  systemState = MODIFY_RED;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	71fb      	strb	r3, [r7, #7]
		  }
		  if (is_timer_auto_increase_flagged())
 8000fa8:	f000 fc5e 	bl	8001868 <is_timer_auto_increase_flagged>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 8117 	beq.w	80011e2 <main+0x39e>
		  {
			  ++duration_temp;
 8000fb4:	4b65      	ldr	r3, [pc, #404]	; (800114c <main+0x308>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b63      	ldr	r3, [pc, #396]	; (800114c <main+0x308>)
 8000fbe:	701a      	strb	r2, [r3, #0]
			  set_timer_auto_increase(AUTO_INCREASE_DURATION);
 8000fc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc4:	f000 fc1c 	bl	8001800 <set_timer_auto_increase>
		  }
		  break;
 8000fc8:	e10b      	b.n	80011e2 <main+0x39e>
	  case MODIFY_RED_PRESSED:
		  blink_led(RED);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fc44 	bl	8000858 <blink_led>
		  if (selectModeButton == BUTTON_RELEASED)
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f040 8107 	bne.w	80011e6 <main+0x3a2>
		  {
			  systemState = MODIFY_GREEN;
 8000fd8:	2306      	movs	r3, #6
 8000fda:	71fb      	strb	r3, [r7, #7]
			  blink_led_clear();
 8000fdc:	f7ff fd60 	bl	8000aa0 <blink_led_clear>
			  duration_temp = green_duration;
 8000fe0:	4b5c      	ldr	r3, [pc, #368]	; (8001154 <main+0x310>)
 8000fe2:	781a      	ldrb	r2, [r3, #0]
 8000fe4:	4b59      	ldr	r3, [pc, #356]	; (800114c <main+0x308>)
 8000fe6:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8000fe8:	e0fd      	b.n	80011e6 <main+0x3a2>
	  case MODIFY_GREEN:
		  blink_led(GREEN);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff fc34 	bl	8000858 <blink_led>
		  if (selectModeButton == BUTTON_PRESSED)
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d101      	bne.n	8000ffa <main+0x1b6>
		  {
			  systemState = MODIFY_GREEN_PRESSED;
 8000ff6:	2309      	movs	r3, #9
 8000ff8:	71fb      	strb	r3, [r7, #7]
		  }
		  if (modifyCycleButton == BUTTON_PRESSED)
 8000ffa:	797b      	ldrb	r3, [r7, #5]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d101      	bne.n	8001004 <main+0x1c0>
		  {
			  systemState = UPDATE_GREEN_COUNTER;
 8001000:	2307      	movs	r3, #7
 8001002:	71fb      	strb	r3, [r7, #7]
		  }
		  if (normalModeReturnButton == BUTTON_PRESSED)
 8001004:	793b      	ldrb	r3, [r7, #4]
 8001006:	2b01      	cmp	r3, #1
 8001008:	f040 80ef 	bne.w	80011ea <main+0x3a6>
		  {
			  preState = systemState;
 800100c:	4a50      	ldr	r2, [pc, #320]	; (8001150 <main+0x30c>)
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	7013      	strb	r3, [r2, #0]
			  systemState = NORMAL_MODE_RETURN_PRESSED;
 8001012:	230e      	movs	r3, #14
 8001014:	71fb      	strb	r3, [r7, #7]
		  }
		  break;
 8001016:	e0e8      	b.n	80011ea <main+0x3a6>
	  case UPDATE_GREEN_COUNTER:
		  blink_led(GREEN);
 8001018:	2001      	movs	r0, #1
 800101a:	f7ff fc1d 	bl	8000858 <blink_led>
		  if (modifyCycleButton == BUTTON_RELEASED)
 800101e:	797b      	ldrb	r3, [r7, #5]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d107      	bne.n	8001034 <main+0x1f0>
		  {
			  ++duration_temp;
 8001024:	4b49      	ldr	r3, [pc, #292]	; (800114c <main+0x308>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b47      	ldr	r3, [pc, #284]	; (800114c <main+0x308>)
 800102e:	701a      	strb	r2, [r3, #0]
			  systemState = MODIFY_GREEN;
 8001030:	2306      	movs	r3, #6
 8001032:	71fb      	strb	r3, [r7, #7]
		  }
		  if (modifyCycleButton == BUTTON_PRESSED_MORE_THAN_1_SECOND)
 8001034:	797b      	ldrb	r3, [r7, #5]
 8001036:	2b02      	cmp	r3, #2
 8001038:	f040 80d9 	bne.w	80011ee <main+0x3aa>
		  {
			  set_timer_auto_increase(AUTO_INCREASE_DURATION);
 800103c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001040:	f000 fbde 	bl	8001800 <set_timer_auto_increase>
			  systemState = AUTO_UPDATE_GREEN_COUTER;
 8001044:	2308      	movs	r3, #8
 8001046:	71fb      	strb	r3, [r7, #7]
		  }
		  break;
 8001048:	e0d1      	b.n	80011ee <main+0x3aa>
	  case AUTO_UPDATE_GREEN_COUTER:
		  blink_led(GREEN);
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff fc04 	bl	8000858 <blink_led>
		  if (modifyCycleButton == BUTTON_RELEASED)
 8001050:	797b      	ldrb	r3, [r7, #5]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <main+0x216>
		  {
			  systemState = MODIFY_GREEN;
 8001056:	2306      	movs	r3, #6
 8001058:	71fb      	strb	r3, [r7, #7]
		  }
		  if (is_timer_auto_increase_flagged())
 800105a:	f000 fc05 	bl	8001868 <is_timer_auto_increase_flagged>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 80c6 	beq.w	80011f2 <main+0x3ae>
		  {
			  ++duration_temp;
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <main+0x308>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b37      	ldr	r3, [pc, #220]	; (800114c <main+0x308>)
 8001070:	701a      	strb	r2, [r3, #0]
			  set_timer_auto_increase(AUTO_INCREASE_DURATION);
 8001072:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001076:	f000 fbc3 	bl	8001800 <set_timer_auto_increase>
		  }
		  break;
 800107a:	e0ba      	b.n	80011f2 <main+0x3ae>
	  case MODIFY_GREEN_PRESSED:
		  blink_led(GREEN);
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff fbeb 	bl	8000858 <blink_led>
		  if (selectModeButton == BUTTON_RELEASED)
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	2b00      	cmp	r3, #0
 8001086:	f040 80b6 	bne.w	80011f6 <main+0x3b2>
		  {
			  systemState = MODIFY_YELLOW;
 800108a:	230a      	movs	r3, #10
 800108c:	71fb      	strb	r3, [r7, #7]
			  blink_led_clear();
 800108e:	f7ff fd07 	bl	8000aa0 <blink_led_clear>
			  duration_temp = yellow_duration;
 8001092:	4b31      	ldr	r3, [pc, #196]	; (8001158 <main+0x314>)
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	4b2d      	ldr	r3, [pc, #180]	; (800114c <main+0x308>)
 8001098:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800109a:	e0ac      	b.n	80011f6 <main+0x3b2>
	  case MODIFY_YELLOW:
		  blink_led(YELLOW);
 800109c:	2002      	movs	r0, #2
 800109e:	f7ff fbdb 	bl	8000858 <blink_led>
		  if (selectModeButton == BUTTON_PRESSED)
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d101      	bne.n	80010ac <main+0x268>
		  {
			  systemState = MODIFY_YELLOW_PRESSED;
 80010a8:	230d      	movs	r3, #13
 80010aa:	71fb      	strb	r3, [r7, #7]
		  }
		  if (modifyCycleButton == BUTTON_PRESSED)
 80010ac:	797b      	ldrb	r3, [r7, #5]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d101      	bne.n	80010b6 <main+0x272>
		  {
			  systemState = UPDATE_YELLOW_COUNTER;
 80010b2:	230b      	movs	r3, #11
 80010b4:	71fb      	strb	r3, [r7, #7]
		  }
		  if (normalModeReturnButton == BUTTON_PRESSED)
 80010b6:	793b      	ldrb	r3, [r7, #4]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	f040 809e 	bne.w	80011fa <main+0x3b6>
		  {
			  preState = systemState;
 80010be:	4a24      	ldr	r2, [pc, #144]	; (8001150 <main+0x30c>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	7013      	strb	r3, [r2, #0]
			  systemState = NORMAL_MODE_RETURN_PRESSED;
 80010c4:	230e      	movs	r3, #14
 80010c6:	71fb      	strb	r3, [r7, #7]
		  }
		  break;
 80010c8:	e097      	b.n	80011fa <main+0x3b6>
	  case UPDATE_YELLOW_COUNTER:
		  blink_led(YELLOW);
 80010ca:	2002      	movs	r0, #2
 80010cc:	f7ff fbc4 	bl	8000858 <blink_led>
		  if (modifyCycleButton == BUTTON_RELEASED)
 80010d0:	797b      	ldrb	r3, [r7, #5]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d107      	bne.n	80010e6 <main+0x2a2>
		  {
			  ++duration_temp;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <main+0x308>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <main+0x308>)
 80010e0:	701a      	strb	r2, [r3, #0]
			  systemState = MODIFY_YELLOW;
 80010e2:	230a      	movs	r3, #10
 80010e4:	71fb      	strb	r3, [r7, #7]
		  }
		  if (modifyCycleButton == BUTTON_PRESSED_MORE_THAN_1_SECOND)
 80010e6:	797b      	ldrb	r3, [r7, #5]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	f040 8088 	bne.w	80011fe <main+0x3ba>
		  {
			  set_timer_auto_increase(AUTO_INCREASE_DURATION);
 80010ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010f2:	f000 fb85 	bl	8001800 <set_timer_auto_increase>
			  systemState = AUTO_UPDATE_YELLOW_COUTER;
 80010f6:	230c      	movs	r3, #12
 80010f8:	71fb      	strb	r3, [r7, #7]
		  }
		  break;
 80010fa:	e080      	b.n	80011fe <main+0x3ba>
	  case AUTO_UPDATE_YELLOW_COUTER:
		  blink_led(YELLOW);
 80010fc:	2002      	movs	r0, #2
 80010fe:	f7ff fbab 	bl	8000858 <blink_led>
		  if (modifyCycleButton == BUTTON_RELEASED)
 8001102:	797b      	ldrb	r3, [r7, #5]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <main+0x2c8>
		  {
			  systemState = MODIFY_YELLOW;
 8001108:	230a      	movs	r3, #10
 800110a:	71fb      	strb	r3, [r7, #7]
		  }
		  if (is_timer_auto_increase_flagged())
 800110c:	f000 fbac 	bl	8001868 <is_timer_auto_increase_flagged>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d075      	beq.n	8001202 <main+0x3be>
		  {
			  ++duration_temp;
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <main+0x308>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <main+0x308>)
 8001120:	701a      	strb	r2, [r3, #0]
			  set_timer_auto_increase(AUTO_INCREASE_DURATION);
 8001122:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001126:	f000 fb6b 	bl	8001800 <set_timer_auto_increase>
		  }
		  break;
 800112a:	e06a      	b.n	8001202 <main+0x3be>
	  case MODIFY_YELLOW_PRESSED:
		  blink_led(YELLOW);
 800112c:	2002      	movs	r0, #2
 800112e:	f7ff fb93 	bl	8000858 <blink_led>
		  if (selectModeButton == BUTTON_RELEASED)
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d166      	bne.n	8001206 <main+0x3c2>
		  {
			  systemState = NORMAL_MODE;
 8001138:	2300      	movs	r3, #0
 800113a:	71fb      	strb	r3, [r7, #7]
			  traffic_light_reset();
 800113c:	f7ff f97c 	bl	8000438 <traffic_light_reset>
		  }
		  break;
 8001140:	e061      	b.n	8001206 <main+0x3c2>
 8001142:	bf00      	nop
 8001144:	20000090 	.word	0x20000090
 8001148:	2000003c 	.word	0x2000003c
 800114c:	200000d8 	.word	0x200000d8
 8001150:	200000d9 	.word	0x200000d9
 8001154:	2000003d 	.word	0x2000003d
 8001158:	2000003e 	.word	0x2000003e
	  case NORMAL_MODE_RETURN_PRESSED:
		  switch (preState)
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <main+0x3d0>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b0a      	cmp	r3, #10
 8001162:	d00e      	beq.n	8001182 <main+0x33e>
 8001164:	2b0a      	cmp	r3, #10
 8001166:	dc10      	bgt.n	800118a <main+0x346>
 8001168:	2b02      	cmp	r3, #2
 800116a:	d002      	beq.n	8001172 <main+0x32e>
 800116c:	2b06      	cmp	r3, #6
 800116e:	d004      	beq.n	800117a <main+0x336>
			  break;
		  case MODIFY_YELLOW:
			  blink_led(YELLOW);
			  break;
		  default:
			  break;
 8001170:	e00b      	b.n	800118a <main+0x346>
			  blink_led(RED);
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff fb70 	bl	8000858 <blink_led>
			  break;
 8001178:	e008      	b.n	800118c <main+0x348>
			  blink_led(GREEN);
 800117a:	2001      	movs	r0, #1
 800117c:	f7ff fb6c 	bl	8000858 <blink_led>
			  break;
 8001180:	e004      	b.n	800118c <main+0x348>
			  blink_led(YELLOW);
 8001182:	2002      	movs	r0, #2
 8001184:	f7ff fb68 	bl	8000858 <blink_led>
			  break;
 8001188:	e000      	b.n	800118c <main+0x348>
			  break;
 800118a:	bf00      	nop
		  }
		  if (normalModeReturnButton == BUTTON_RELEASED)
 800118c:	793b      	ldrb	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d13b      	bne.n	800120a <main+0x3c6>
		  {
			  systemState = NORMAL_MODE;
 8001192:	2300      	movs	r3, #0
 8001194:	71fb      	strb	r3, [r7, #7]
			  switch (preState)
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <main+0x3d0>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b0a      	cmp	r3, #10
 800119c:	d010      	beq.n	80011c0 <main+0x37c>
 800119e:	2b0a      	cmp	r3, #10
 80011a0:	dc13      	bgt.n	80011ca <main+0x386>
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d002      	beq.n	80011ac <main+0x368>
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d005      	beq.n	80011b6 <main+0x372>
				  break;
			  case MODIFY_YELLOW:
				  yellow_duration = duration_temp;
				  break;
			  default:
				  break;
 80011aa:	e00e      	b.n	80011ca <main+0x386>
				  red_duration = duration_temp;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <main+0x3d4>)
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	4b1a      	ldr	r3, [pc, #104]	; (800121c <main+0x3d8>)
 80011b2:	701a      	strb	r2, [r3, #0]
				  break;
 80011b4:	e00a      	b.n	80011cc <main+0x388>
				  green_duration = duration_temp;
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <main+0x3d4>)
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <main+0x3dc>)
 80011bc:	701a      	strb	r2, [r3, #0]
				  break;
 80011be:	e005      	b.n	80011cc <main+0x388>
				  yellow_duration = duration_temp;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <main+0x3d4>)
 80011c2:	781a      	ldrb	r2, [r3, #0]
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <main+0x3e0>)
 80011c6:	701a      	strb	r2, [r3, #0]
				  break;
 80011c8:	e000      	b.n	80011cc <main+0x388>
				  break;
 80011ca:	bf00      	nop
			  }
			  traffic_light_reset();
 80011cc:	f7ff f934 	bl	8000438 <traffic_light_reset>
		  }
		  break;
 80011d0:	e01b      	b.n	800120a <main+0x3c6>
		  break;
 80011d2:	bf00      	nop
 80011d4:	e01a      	b.n	800120c <main+0x3c8>
		  break;
 80011d6:	bf00      	nop
 80011d8:	e018      	b.n	800120c <main+0x3c8>
		  break;
 80011da:	bf00      	nop
 80011dc:	e016      	b.n	800120c <main+0x3c8>
		  break;
 80011de:	bf00      	nop
 80011e0:	e014      	b.n	800120c <main+0x3c8>
		  break;
 80011e2:	bf00      	nop
 80011e4:	e012      	b.n	800120c <main+0x3c8>
		  break;
 80011e6:	bf00      	nop
 80011e8:	e010      	b.n	800120c <main+0x3c8>
		  break;
 80011ea:	bf00      	nop
 80011ec:	e00e      	b.n	800120c <main+0x3c8>
		  break;
 80011ee:	bf00      	nop
 80011f0:	e00c      	b.n	800120c <main+0x3c8>
		  break;
 80011f2:	bf00      	nop
 80011f4:	e00a      	b.n	800120c <main+0x3c8>
		  break;
 80011f6:	bf00      	nop
 80011f8:	e008      	b.n	800120c <main+0x3c8>
		  break;
 80011fa:	bf00      	nop
 80011fc:	e006      	b.n	800120c <main+0x3c8>
		  break;
 80011fe:	bf00      	nop
 8001200:	e004      	b.n	800120c <main+0x3c8>
		  break;
 8001202:	bf00      	nop
 8001204:	e002      	b.n	800120c <main+0x3c8>
		  break;
 8001206:	bf00      	nop
 8001208:	e000      	b.n	800120c <main+0x3c8>
		  break;
 800120a:	bf00      	nop
	  }

	  led7_scanning();
 800120c:	f7ff fbbc 	bl	8000988 <led7_scanning>
  {
 8001210:	e632      	b.n	8000e78 <main+0x34>
 8001212:	bf00      	nop
 8001214:	200000d9 	.word	0x200000d9
 8001218:	200000d8 	.word	0x200000d8
 800121c:	2000003c 	.word	0x2000003c
 8001220:	2000003d 	.word	0x2000003d
 8001224:	2000003e 	.word	0x2000003e

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b090      	sub	sp, #64	; 0x40
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0318 	add.w	r3, r7, #24
 8001232:	2228      	movs	r2, #40	; 0x28
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fe7e 	bl	8002f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800124e:	2301      	movs	r3, #1
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001252:	2310      	movs	r3, #16
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001256:	2300      	movs	r3, #0
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0318 	add.w	r3, r7, #24
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fe80 	bl	8001f64 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800126a:	f000 f90f 	bl	800148c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f001 f8ee 	bl	8002468 <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001292:	f000 f8fb 	bl	800148c <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3740      	adds	r7, #64	; 0x40
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	463b      	mov	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_TIM2_Init+0x94>)
 80012be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_TIM2_Init+0x94>)
 80012c6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <MX_TIM2_Init+0x94>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_TIM2_Init+0x94>)
 80012d4:	2209      	movs	r2, #9
 80012d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MX_TIM2_Init+0x94>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_TIM2_Init+0x94>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012e4:	4813      	ldr	r0, [pc, #76]	; (8001334 <MX_TIM2_Init+0x94>)
 80012e6:	f001 fa1b 	bl	8002720 <HAL_TIM_Base_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012f0:	f000 f8cc 	bl	800148c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	4619      	mov	r1, r3
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <MX_TIM2_Init+0x94>)
 8001302:	f001 fbb1 	bl	8002a68 <HAL_TIM_ConfigClockSource>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800130c:	f000 f8be 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_TIM2_Init+0x94>)
 800131e:	f001 fd7d 	bl	8002e1c <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001328:	f000 f8b0 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000090 	.word	0x20000090

08001338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <MX_GPIO_Init+0xb8>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <MX_GPIO_Init+0xb8>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <MX_GPIO_Init+0xb8>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <MX_GPIO_Init+0xb8>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <MX_GPIO_Init+0xb8>)
 800136a:	f043 0308 	orr.w	r3, r3, #8
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <MX_GPIO_Init+0xb8>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7SEG_1_Pin|LED7SEG_2_Pin|LED7SEG_3_Pin|LED7SEG_4_Pin
 800137c:	2200      	movs	r2, #0
 800137e:	f640 71fe 	movw	r1, #4094	; 0xffe
 8001382:	481c      	ldr	r0, [pc, #112]	; (80013f4 <MX_GPIO_Init+0xbc>)
 8001384:	f000 fdbd 	bl	8001f02 <HAL_GPIO_WritePin>
                          |LED7SEG_5_Pin|LED7SEG_6_Pin|LED7SEG_7_Pin|EN_7SEG1_TEN_Pin
                          |EN_7SEG1_UNIT_Pin|EN_7SEG2_TEN_Pin|EN_7SEG2_UNIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_RED_Pin|LED1_GREEN_Pin|LED1_YELLOW_Pin|LED2_RED_Pin
 8001388:	2200      	movs	r2, #0
 800138a:	213f      	movs	r1, #63	; 0x3f
 800138c:	481a      	ldr	r0, [pc, #104]	; (80013f8 <MX_GPIO_Init+0xc0>)
 800138e:	f000 fdb8 	bl	8001f02 <HAL_GPIO_WritePin>
                          |LED2_GREEN_Pin|LED2_YELLOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED7SEG_1_Pin LED7SEG_2_Pin LED7SEG_3_Pin LED7SEG_4_Pin
                           LED7SEG_5_Pin LED7SEG_6_Pin LED7SEG_7_Pin EN_7SEG1_TEN_Pin
                           EN_7SEG1_UNIT_Pin EN_7SEG2_TEN_Pin EN_7SEG2_UNIT_Pin */
  GPIO_InitStruct.Pin = LED7SEG_1_Pin|LED7SEG_2_Pin|LED7SEG_3_Pin|LED7SEG_4_Pin
 8001392:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001396:	60bb      	str	r3, [r7, #8]
                          |LED7SEG_5_Pin|LED7SEG_6_Pin|LED7SEG_7_Pin|EN_7SEG1_TEN_Pin
                          |EN_7SEG1_UNIT_Pin|EN_7SEG2_TEN_Pin|EN_7SEG2_UNIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2302      	movs	r3, #2
 80013a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4619      	mov	r1, r3
 80013aa:	4812      	ldr	r0, [pc, #72]	; (80013f4 <MX_GPIO_Init+0xbc>)
 80013ac:	f000 fc16 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_RED_Pin LED1_GREEN_Pin LED1_YELLOW_Pin LED2_RED_Pin
                           LED2_GREEN_Pin LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|LED1_GREEN_Pin|LED1_YELLOW_Pin|LED2_RED_Pin
 80013b0:	233f      	movs	r3, #63	; 0x3f
 80013b2:	60bb      	str	r3, [r7, #8]
                          |LED2_GREEN_Pin|LED2_YELLOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2302      	movs	r3, #2
 80013be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	4619      	mov	r1, r3
 80013c6:	480c      	ldr	r0, [pc, #48]	; (80013f8 <MX_GPIO_Init+0xc0>)
 80013c8:	f000 fc08 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : SELECT_MODE_BTN_Pin MODIFY_CYCLE_BTN_Pin SET_VALUE_BTN_Pin */
  GPIO_InitStruct.Pin = SELECT_MODE_BTN_Pin|MODIFY_CYCLE_BTN_Pin|SET_VALUE_BTN_Pin;
 80013cc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80013d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4619      	mov	r1, r3
 80013e0:	4804      	ldr	r0, [pc, #16]	; (80013f4 <MX_GPIO_Init+0xbc>)
 80013e2:	f000 fbfb 	bl	8001bdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010800 	.word	0x40010800
 80013f8:	40010c00 	.word	0x40010c00

080013fc <init_leds>:

	return 5;//invalid mode
}

void init_leds()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_7SEG1_TEN_GPIO_Port, EN_7SEG1_TEN_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001406:	481a      	ldr	r0, [pc, #104]	; (8001470 <init_leds+0x74>)
 8001408:	f000 fd7b 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_7SEG1_UNIT_GPIO_Port, EN_7SEG1_UNIT_Pin, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001412:	4817      	ldr	r0, [pc, #92]	; (8001470 <init_leds+0x74>)
 8001414:	f000 fd75 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_7SEG2_TEN_GPIO_Port, EN_7SEG2_TEN_Pin, GPIO_PIN_SET);
 8001418:	2201      	movs	r2, #1
 800141a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800141e:	4814      	ldr	r0, [pc, #80]	; (8001470 <init_leds+0x74>)
 8001420:	f000 fd6f 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_7SEG2_UNIT_GPIO_Port, EN_7SEG2_UNIT_Pin, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800142a:	4811      	ldr	r0, [pc, #68]	; (8001470 <init_leds+0x74>)
 800142c:	f000 fd69 	bl	8001f02 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_SET);
 8001430:	2201      	movs	r2, #1
 8001432:	2101      	movs	r1, #1
 8001434:	480f      	ldr	r0, [pc, #60]	; (8001474 <init_leds+0x78>)
 8001436:	f000 fd64 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2102      	movs	r1, #2
 800143e:	480d      	ldr	r0, [pc, #52]	; (8001474 <init_leds+0x78>)
 8001440:	f000 fd5f 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, GPIO_PIN_SET);
 8001444:	2201      	movs	r2, #1
 8001446:	2104      	movs	r1, #4
 8001448:	480a      	ldr	r0, [pc, #40]	; (8001474 <init_leds+0x78>)
 800144a:	f000 fd5a 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, GPIO_PIN_SET);
 800144e:	2201      	movs	r2, #1
 8001450:	2108      	movs	r1, #8
 8001452:	4808      	ldr	r0, [pc, #32]	; (8001474 <init_leds+0x78>)
 8001454:	f000 fd55 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	2110      	movs	r1, #16
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <init_leds+0x78>)
 800145e:	f000 fd50 	bl	8001f02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	2120      	movs	r1, #32
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <init_leds+0x78>)
 8001468:	f000 fd4b 	bl	8001f02 <HAL_GPIO_WritePin>
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40010800 	.word	0x40010800
 8001474:	40010c00 	.word	0x40010c00

08001478 <init_timers>:

void init_timers()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	set_timer_btn_reading(10);
 800147c:	200a      	movs	r0, #10
 800147e:	f000 f8c7 	bl	8001610 <set_timer_btn_reading>
	set_timer_7seg_scan(SCANNING_DURATION);
 8001482:	20fa      	movs	r0, #250	; 0xfa
 8001484:	f000 f902 	bl	800168c <set_timer_7seg_scan>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001490:	b672      	cpsid	i
}
 8001492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001494:	e7fe      	b.n	8001494 <Error_Handler+0x8>
	...

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_MspInit+0x40>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <HAL_MspInit+0x40>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6193      	str	r3, [r2, #24]
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_MspInit+0x40>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_MspInit+0x40>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_MspInit+0x40>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_MspInit+0x40>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ec:	d113      	bne.n	8001516 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_TIM_Base_MspInit+0x44>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <HAL_TIM_Base_MspInit+0x44>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	61d3      	str	r3, [r2, #28]
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_TIM_Base_MspInit+0x44>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	201c      	movs	r0, #28
 800150c:	f000 fb2f 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001510:	201c      	movs	r0, #28
 8001512:	f000 fb48 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <NMI_Handler+0x4>

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156a:	f000 fa0d 	bl	8001988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <TIM2_IRQHandler+0x10>)
 800157a:	f001 f96d 	bl	8002858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000090 	.word	0x20000090

08001588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <set_timer_blink>:

uint16_t timerAutoIncreaseCounter = 0;
uint8_t timerAutoIncreaseFlag = 0;

void set_timer_blink(uint16_t duration)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
	timerBlinkCounter = duration / TIME_UNIT;
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <set_timer_blink+0x2c>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	08db      	lsrs	r3, r3, #3
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <set_timer_blink+0x30>)
 80015ac:	801a      	strh	r2, [r3, #0]
	timerBlinkFlag = 0;
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <set_timer_blink+0x34>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	cccccccd 	.word	0xcccccccd
 80015c4:	200000de 	.word	0x200000de
 80015c8:	200000e0 	.word	0x200000e0

080015cc <is_timer_blink_flagged>:

uint8_t is_timer_blink_flagged()
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
	return timerBlinkFlag;
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <is_timer_blink_flagged+0x10>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	200000e0 	.word	0x200000e0

080015e0 <timer_blink_run>:

void timer_blink_run()
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
	--timerBlinkCounter;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <timer_blink_run+0x28>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <timer_blink_run+0x28>)
 80015ee:	801a      	strh	r2, [r3, #0]
	if (timerBlinkCounter <= 0)
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <timer_blink_run+0x28>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <timer_blink_run+0x1e>
	{
		timerBlinkFlag = 1;
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <timer_blink_run+0x2c>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
	}
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	200000de 	.word	0x200000de
 800160c:	200000e0 	.word	0x200000e0

08001610 <set_timer_btn_reading>:

void set_timer_btn_reading(uint16_t duration)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	80fb      	strh	r3, [r7, #6]
	timerBtnReadingCounter = duration / TIME_UNIT;
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <set_timer_btn_reading+0x2c>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	08db      	lsrs	r3, r3, #3
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <set_timer_btn_reading+0x30>)
 8001628:	801a      	strh	r2, [r3, #0]
	timerBtnReadingFlag = 0;
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <set_timer_btn_reading+0x34>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	cccccccd 	.word	0xcccccccd
 8001640:	200000da 	.word	0x200000da
 8001644:	200000dc 	.word	0x200000dc

08001648 <is_timer_btn_reading_flagged>:

uint8_t is_timer_btn_reading_flagged()
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
	return timerBtnReadingFlag;
 800164c:	4b02      	ldr	r3, [pc, #8]	; (8001658 <is_timer_btn_reading_flagged+0x10>)
 800164e:	781b      	ldrb	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	200000dc 	.word	0x200000dc

0800165c <timer_btn_reading_run>:

void timer_btn_reading_run()
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
	--timerBtnReadingCounter;
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <timer_btn_reading_run+0x28>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	3b01      	subs	r3, #1
 8001666:	b29a      	uxth	r2, r3
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <timer_btn_reading_run+0x28>)
 800166a:	801a      	strh	r2, [r3, #0]
	if (timerBtnReadingCounter <= 0)
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <timer_btn_reading_run+0x28>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <timer_btn_reading_run+0x1e>
	{
		timerBtnReadingFlag = 1;
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <timer_btn_reading_run+0x2c>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
	}
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	200000da 	.word	0x200000da
 8001688:	200000dc 	.word	0x200000dc

0800168c <set_timer_7seg_scan>:

void set_timer_7seg_scan(uint16_t duration)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
	timer7SegScanCounter = duration / TIME_UNIT;
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <set_timer_7seg_scan+0x2c>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	08db      	lsrs	r3, r3, #3
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <set_timer_7seg_scan+0x30>)
 80016a4:	801a      	strh	r2, [r3, #0]
	timer7SegScanFlag = 0;
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <set_timer_7seg_scan+0x34>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	cccccccd 	.word	0xcccccccd
 80016bc:	200000e2 	.word	0x200000e2
 80016c0:	200000e4 	.word	0x200000e4

080016c4 <is_timer_7seg_scan_flagged>:

uint8_t is_timer_7seg_scan_flagged()
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
	return timer7SegScanFlag;
 80016c8:	4b02      	ldr	r3, [pc, #8]	; (80016d4 <is_timer_7seg_scan_flagged+0x10>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	200000e4 	.word	0x200000e4

080016d8 <timer_7seg_scan_run>:

void timer_7seg_scan_run()
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	--timer7SegScanCounter;
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <timer_7seg_scan_run+0x28>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <timer_7seg_scan_run+0x28>)
 80016e6:	801a      	strh	r2, [r3, #0]
	if (timer7SegScanCounter <= 0)
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <timer_7seg_scan_run+0x28>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <timer_7seg_scan_run+0x1e>
	{
		timer7SegScanFlag = 1;
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <timer_7seg_scan_run+0x2c>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
	}
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200000e2 	.word	0x200000e2
 8001704:	200000e4 	.word	0x200000e4

08001708 <set_timer_traffic1>:

void set_timer_traffic1(uint16_t duration)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
	timerTraffic1Counter = duration / TIME_UNIT;
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <set_timer_traffic1+0x2c>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	08db      	lsrs	r3, r3, #3
 800171c:	b29a      	uxth	r2, r3
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <set_timer_traffic1+0x30>)
 8001720:	801a      	strh	r2, [r3, #0]
	timerTraffic1Flag = 0;
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <set_timer_traffic1+0x34>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	cccccccd 	.word	0xcccccccd
 8001738:	200000e6 	.word	0x200000e6
 800173c:	200000e8 	.word	0x200000e8

08001740 <is_timer_traffic1_flagged>:

uint8_t is_timer_traffic1_flagged()
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return timerTraffic1Flag;
 8001744:	4b02      	ldr	r3, [pc, #8]	; (8001750 <is_timer_traffic1_flagged+0x10>)
 8001746:	781b      	ldrb	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	200000e8 	.word	0x200000e8

08001754 <timer_traffic1_run>:

void timer_traffic1_run()
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
	--timerTraffic1Counter;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <timer_traffic1_run+0x28>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	3b01      	subs	r3, #1
 800175e:	b29a      	uxth	r2, r3
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <timer_traffic1_run+0x28>)
 8001762:	801a      	strh	r2, [r3, #0]
	if (timerTraffic1Counter <= 0)
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <timer_traffic1_run+0x28>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <timer_traffic1_run+0x1e>
	{
		timerTraffic1Flag = 1;
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <timer_traffic1_run+0x2c>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
	}
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200000e6 	.word	0x200000e6
 8001780:	200000e8 	.word	0x200000e8

08001784 <set_timer_traffic2>:

void set_timer_traffic2(uint16_t duration)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
	timerTraffic2Counter = duration / TIME_UNIT;
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <set_timer_traffic2+0x2c>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	08db      	lsrs	r3, r3, #3
 8001798:	b29a      	uxth	r2, r3
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <set_timer_traffic2+0x30>)
 800179c:	801a      	strh	r2, [r3, #0]
	timerTraffic2Flag = 0;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <set_timer_traffic2+0x34>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	cccccccd 	.word	0xcccccccd
 80017b4:	200000ea 	.word	0x200000ea
 80017b8:	200000ec 	.word	0x200000ec

080017bc <is_timer_traffic2_flagged>:

uint8_t is_timer_traffic2_flagged()
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	return timerTraffic2Flag;
 80017c0:	4b02      	ldr	r3, [pc, #8]	; (80017cc <is_timer_traffic2_flagged+0x10>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	200000ec 	.word	0x200000ec

080017d0 <timer_traffic2_run>:

void timer_traffic2_run()
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
	--timerTraffic2Counter;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <timer_traffic2_run+0x28>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	3b01      	subs	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <timer_traffic2_run+0x28>)
 80017de:	801a      	strh	r2, [r3, #0]
	if (timerTraffic2Counter <= 0)
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <timer_traffic2_run+0x28>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <timer_traffic2_run+0x1e>
	{
		timerTraffic2Flag = 1;
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <timer_traffic2_run+0x2c>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
	}
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	200000ea 	.word	0x200000ea
 80017fc:	200000ec 	.word	0x200000ec

08001800 <set_timer_auto_increase>:

void set_timer_auto_increase(uint16_t duration)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
	timerAutoIncreaseCounter = duration / TIME_UNIT;
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	4a07      	ldr	r2, [pc, #28]	; (800182c <set_timer_auto_increase+0x2c>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	08db      	lsrs	r3, r3, #3
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <set_timer_auto_increase+0x30>)
 8001818:	801a      	strh	r2, [r3, #0]
	timerAutoIncreaseFlag = 0;
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <set_timer_auto_increase+0x34>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	cccccccd 	.word	0xcccccccd
 8001830:	200000ee 	.word	0x200000ee
 8001834:	200000f0 	.word	0x200000f0

08001838 <timer_auto_increase_run>:

void timer_auto_increase_run()
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
	--timerAutoIncreaseCounter;
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <timer_auto_increase_run+0x28>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	3b01      	subs	r3, #1
 8001842:	b29a      	uxth	r2, r3
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <timer_auto_increase_run+0x28>)
 8001846:	801a      	strh	r2, [r3, #0]
	if (timerAutoIncreaseCounter <= 0)
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <timer_auto_increase_run+0x28>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <timer_auto_increase_run+0x1e>
	{
		timerAutoIncreaseFlag = 1;
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <timer_auto_increase_run+0x2c>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
	}
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200000ee 	.word	0x200000ee
 8001864:	200000f0 	.word	0x200000f0

08001868 <is_timer_auto_increase_flagged>:

uint8_t is_timer_auto_increase_flagged()
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
	return timerAutoIncreaseFlag;
 800186c:	4b02      	ldr	r3, [pc, #8]	; (8001878 <is_timer_auto_increase_flagged+0x10>)
 800186e:	781b      	ldrb	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	200000f0 	.word	0x200000f0

0800187c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800188c:	d10b      	bne.n	80018a6 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		timer_7seg_scan_run();
 800188e:	f7ff ff23 	bl	80016d8 <timer_7seg_scan_run>
		timer_btn_reading_run();
 8001892:	f7ff fee3 	bl	800165c <timer_btn_reading_run>
		timer_traffic1_run();;
 8001896:	f7ff ff5d 	bl	8001754 <timer_traffic1_run>
		timer_traffic2_run();
 800189a:	f7ff ff99 	bl	80017d0 <timer_traffic2_run>
		timer_blink_run();
 800189e:	f7ff fe9f 	bl	80015e0 <timer_blink_run>
		timer_auto_increase_run();
 80018a2:	f7ff ffc9 	bl	8001838 <timer_auto_increase_run>
	}
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018b0:	f7ff fe6a 	bl	8001588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b4:	480b      	ldr	r0, [pc, #44]	; (80018e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018b6:	490c      	ldr	r1, [pc, #48]	; (80018e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018b8:	4a0c      	ldr	r2, [pc, #48]	; (80018ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018cc:	4c09      	ldr	r4, [pc, #36]	; (80018f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018da:	f001 fb09 	bl	8002ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018de:	f7ff fab1 	bl	8000e44 <main>
  bx lr
 80018e2:	4770      	bx	lr
  ldr r0, =_sdata
 80018e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e8:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80018ec:	08002f8c 	.word	0x08002f8c
  ldr r2, =_sbss
 80018f0:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 80018f4:	200000f8 	.word	0x200000f8

080018f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018f8:	e7fe      	b.n	80018f8 <ADC1_2_IRQHandler>
	...

080018fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_Init+0x28>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_Init+0x28>)
 8001906:	f043 0310 	orr.w	r3, r3, #16
 800190a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190c:	2003      	movs	r0, #3
 800190e:	f000 f923 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001912:	200f      	movs	r0, #15
 8001914:	f000 f808 	bl	8001928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001918:	f7ff fdbe 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40022000 	.word	0x40022000

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_InitTick+0x54>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_InitTick+0x58>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f93b 	bl	8001bc2 <HAL_SYSTICK_Config>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e00e      	b.n	8001974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	d80a      	bhi.n	8001972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195c:	2200      	movs	r2, #0
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f000 f903 	bl	8001b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001968:	4a06      	ldr	r2, [pc, #24]	; (8001984 <HAL_InitTick+0x5c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e000      	b.n	8001974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000040 	.word	0x20000040
 8001980:	20000048 	.word	0x20000048
 8001984:	20000044 	.word	0x20000044

08001988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_IncTick+0x1c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_IncTick+0x20>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a03      	ldr	r2, [pc, #12]	; (80019a8 <HAL_IncTick+0x20>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	20000048 	.word	0x20000048
 80019a8:	200000f4 	.word	0x200000f4

080019ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return uwTick;
 80019b0:	4b02      	ldr	r3, [pc, #8]	; (80019bc <HAL_GetTick+0x10>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	200000f4 	.word	0x200000f4

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4906      	ldr	r1, [pc, #24]	; (8001a58 <__NVIC_EnableIRQ+0x34>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
         );
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b24:	d301      	bcc.n	8001b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00f      	b.n	8001b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <SysTick_Config+0x40>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b32:	210f      	movs	r1, #15
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f7ff ff90 	bl	8001a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <SysTick_Config+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <SysTick_Config+0x40>)
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010

08001b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff2d 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b80:	f7ff ff42 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	6978      	ldr	r0, [r7, #20]
 8001b8c:	f7ff ff90 	bl	8001ab0 <NVIC_EncodePriority>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff5f 	bl	8001a5c <__NVIC_SetPriority>
}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff35 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffa2 	bl	8001b14 <SysTick_Config>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b08b      	sub	sp, #44	; 0x2c
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bee:	e161      	b.n	8001eb4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	f040 8150 	bne.w	8001eae <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4a97      	ldr	r2, [pc, #604]	; (8001e70 <HAL_GPIO_Init+0x294>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d05e      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
 8001c18:	4a95      	ldr	r2, [pc, #596]	; (8001e70 <HAL_GPIO_Init+0x294>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d875      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c1e:	4a95      	ldr	r2, [pc, #596]	; (8001e74 <HAL_GPIO_Init+0x298>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d058      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
 8001c24:	4a93      	ldr	r2, [pc, #588]	; (8001e74 <HAL_GPIO_Init+0x298>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d86f      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c2a:	4a93      	ldr	r2, [pc, #588]	; (8001e78 <HAL_GPIO_Init+0x29c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d052      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
 8001c30:	4a91      	ldr	r2, [pc, #580]	; (8001e78 <HAL_GPIO_Init+0x29c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d869      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c36:	4a91      	ldr	r2, [pc, #580]	; (8001e7c <HAL_GPIO_Init+0x2a0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d04c      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
 8001c3c:	4a8f      	ldr	r2, [pc, #572]	; (8001e7c <HAL_GPIO_Init+0x2a0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d863      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c42:	4a8f      	ldr	r2, [pc, #572]	; (8001e80 <HAL_GPIO_Init+0x2a4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d046      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
 8001c48:	4a8d      	ldr	r2, [pc, #564]	; (8001e80 <HAL_GPIO_Init+0x2a4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d85d      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c4e:	2b12      	cmp	r3, #18
 8001c50:	d82a      	bhi.n	8001ca8 <HAL_GPIO_Init+0xcc>
 8001c52:	2b12      	cmp	r3, #18
 8001c54:	d859      	bhi.n	8001d0a <HAL_GPIO_Init+0x12e>
 8001c56:	a201      	add	r2, pc, #4	; (adr r2, 8001c5c <HAL_GPIO_Init+0x80>)
 8001c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5c:	08001cd7 	.word	0x08001cd7
 8001c60:	08001cb1 	.word	0x08001cb1
 8001c64:	08001cc3 	.word	0x08001cc3
 8001c68:	08001d05 	.word	0x08001d05
 8001c6c:	08001d0b 	.word	0x08001d0b
 8001c70:	08001d0b 	.word	0x08001d0b
 8001c74:	08001d0b 	.word	0x08001d0b
 8001c78:	08001d0b 	.word	0x08001d0b
 8001c7c:	08001d0b 	.word	0x08001d0b
 8001c80:	08001d0b 	.word	0x08001d0b
 8001c84:	08001d0b 	.word	0x08001d0b
 8001c88:	08001d0b 	.word	0x08001d0b
 8001c8c:	08001d0b 	.word	0x08001d0b
 8001c90:	08001d0b 	.word	0x08001d0b
 8001c94:	08001d0b 	.word	0x08001d0b
 8001c98:	08001d0b 	.word	0x08001d0b
 8001c9c:	08001d0b 	.word	0x08001d0b
 8001ca0:	08001cb9 	.word	0x08001cb9
 8001ca4:	08001ccd 	.word	0x08001ccd
 8001ca8:	4a76      	ldr	r2, [pc, #472]	; (8001e84 <HAL_GPIO_Init+0x2a8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d013      	beq.n	8001cd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cae:	e02c      	b.n	8001d0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	623b      	str	r3, [r7, #32]
          break;
 8001cb6:	e029      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	e024      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	3308      	adds	r3, #8
 8001cc8:	623b      	str	r3, [r7, #32]
          break;
 8001cca:	e01f      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	330c      	adds	r3, #12
 8001cd2:	623b      	str	r3, [r7, #32]
          break;
 8001cd4:	e01a      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d102      	bne.n	8001ce4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cde:	2304      	movs	r3, #4
 8001ce0:	623b      	str	r3, [r7, #32]
          break;
 8001ce2:	e013      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d105      	bne.n	8001cf8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cec:	2308      	movs	r3, #8
 8001cee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69fa      	ldr	r2, [r7, #28]
 8001cf4:	611a      	str	r2, [r3, #16]
          break;
 8001cf6:	e009      	b.n	8001d0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	615a      	str	r2, [r3, #20]
          break;
 8001d02:	e003      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
          break;
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x130>
          break;
 8001d0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2bff      	cmp	r3, #255	; 0xff
 8001d10:	d801      	bhi.n	8001d16 <HAL_GPIO_Init+0x13a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	e001      	b.n	8001d1a <HAL_GPIO_Init+0x13e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2bff      	cmp	r3, #255	; 0xff
 8001d20:	d802      	bhi.n	8001d28 <HAL_GPIO_Init+0x14c>
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	e002      	b.n	8001d2e <HAL_GPIO_Init+0x152>
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	3b08      	subs	r3, #8
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	210f      	movs	r1, #15
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	401a      	ands	r2, r3
 8001d40:	6a39      	ldr	r1, [r7, #32]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 80a9 	beq.w	8001eae <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d5c:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <HAL_GPIO_Init+0x2ac>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a49      	ldr	r2, [pc, #292]	; (8001e88 <HAL_GPIO_Init+0x2ac>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <HAL_GPIO_Init+0x2ac>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d74:	4a45      	ldr	r2, [pc, #276]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4013      	ands	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a3d      	ldr	r2, [pc, #244]	; (8001e90 <HAL_GPIO_Init+0x2b4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d00d      	beq.n	8001dbc <HAL_GPIO_Init+0x1e0>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a3c      	ldr	r2, [pc, #240]	; (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d007      	beq.n	8001db8 <HAL_GPIO_Init+0x1dc>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a3b      	ldr	r2, [pc, #236]	; (8001e98 <HAL_GPIO_Init+0x2bc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d101      	bne.n	8001db4 <HAL_GPIO_Init+0x1d8>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e004      	b.n	8001dbe <HAL_GPIO_Init+0x1e2>
 8001db4:	2303      	movs	r3, #3
 8001db6:	e002      	b.n	8001dbe <HAL_GPIO_Init+0x1e2>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <HAL_GPIO_Init+0x1e2>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc0:	f002 0203 	and.w	r2, r2, #3
 8001dc4:	0092      	lsls	r2, r2, #2
 8001dc6:	4093      	lsls	r3, r2
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dce:	492f      	ldr	r1, [pc, #188]	; (8001e8c <HAL_GPIO_Init+0x2b0>)
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d006      	beq.n	8001df6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001de8:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	492b      	ldr	r1, [pc, #172]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
 8001df4:	e006      	b.n	8001e04 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001df6:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	4927      	ldr	r1, [pc, #156]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4921      	ldr	r1, [pc, #132]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60cb      	str	r3, [r1, #12]
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	491d      	ldr	r1, [pc, #116]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e38:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	4917      	ldr	r1, [pc, #92]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
 8001e44:	e006      	b.n	8001e54 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	4913      	ldr	r1, [pc, #76]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01f      	beq.n	8001ea0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	490d      	ldr	r1, [pc, #52]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
 8001e6c:	e01f      	b.n	8001eae <HAL_GPIO_Init+0x2d2>
 8001e6e:	bf00      	nop
 8001e70:	10320000 	.word	0x10320000
 8001e74:	10310000 	.word	0x10310000
 8001e78:	10220000 	.word	0x10220000
 8001e7c:	10210000 	.word	0x10210000
 8001e80:	10120000 	.word	0x10120000
 8001e84:	10110000 	.word	0x10110000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40010800 	.word	0x40010800
 8001e94:	40010c00 	.word	0x40010c00
 8001e98:	40011000 	.word	0x40011000
 8001e9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_GPIO_Init+0x2f4>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	4909      	ldr	r1, [pc, #36]	; (8001ed0 <HAL_GPIO_Init+0x2f4>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f47f ae96 	bne.w	8001bf0 <HAL_GPIO_Init+0x14>
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	372c      	adds	r7, #44	; 0x2c
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	887b      	ldrh	r3, [r7, #2]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e001      	b.n	8001ef6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	807b      	strh	r3, [r7, #2]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f12:	787b      	ldrb	r3, [r7, #1]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f18:	887a      	ldrh	r2, [r7, #2]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f1e:	e003      	b.n	8001f28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f20:	887b      	ldrh	r3, [r7, #2]
 8001f22:	041a      	lsls	r2, r3, #16
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	611a      	str	r2, [r3, #16]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b085      	sub	sp, #20
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f44:	887a      	ldrh	r2, [r7, #2]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	041a      	lsls	r2, r3, #16
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43d9      	mvns	r1, r3
 8001f50:	887b      	ldrh	r3, [r7, #2]
 8001f52:	400b      	ands	r3, r1
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	611a      	str	r2, [r3, #16]
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e272      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8087 	beq.w	8002092 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f84:	4b92      	ldr	r3, [pc, #584]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d00c      	beq.n	8001faa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f90:	4b8f      	ldr	r3, [pc, #572]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d112      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x5e>
 8001f9c:	4b8c      	ldr	r3, [pc, #560]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001faa:	4b89      	ldr	r3, [pc, #548]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d06c      	beq.n	8002090 <HAL_RCC_OscConfig+0x12c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d168      	bne.n	8002090 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e24c      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x76>
 8001fcc:	4b80      	ldr	r3, [pc, #512]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a7f      	ldr	r2, [pc, #508]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	e02e      	b.n	8002038 <HAL_RCC_OscConfig+0xd4>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x98>
 8001fe2:	4b7b      	ldr	r3, [pc, #492]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7a      	ldr	r2, [pc, #488]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b78      	ldr	r3, [pc, #480]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a77      	ldr	r2, [pc, #476]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e01d      	b.n	8002038 <HAL_RCC_OscConfig+0xd4>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0xbc>
 8002006:	4b72      	ldr	r3, [pc, #456]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a71      	ldr	r2, [pc, #452]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800200c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b6f      	ldr	r3, [pc, #444]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6e      	ldr	r2, [pc, #440]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0xd4>
 8002020:	4b6b      	ldr	r3, [pc, #428]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a6a      	ldr	r2, [pc, #424]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b68      	ldr	r3, [pc, #416]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a67      	ldr	r2, [pc, #412]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002036:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d013      	beq.n	8002068 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff fcb4 	bl	80019ac <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002048:	f7ff fcb0 	bl	80019ac <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e200      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0xe4>
 8002066:	e014      	b.n	8002092 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7ff fca0 	bl	80019ac <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002070:	f7ff fc9c 	bl	80019ac <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	; 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e1ec      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002082:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x10c>
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d063      	beq.n	8002166 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800209e:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020aa:	4b49      	ldr	r3, [pc, #292]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d11c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x18c>
 80020b6:	4b46      	ldr	r3, [pc, #280]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d116      	bne.n	80020f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	4b43      	ldr	r3, [pc, #268]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_RCC_OscConfig+0x176>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e1c0      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4939      	ldr	r1, [pc, #228]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ee:	e03a      	b.n	8002166 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <HAL_RCC_OscConfig+0x270>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7ff fc55 	bl	80019ac <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002106:	f7ff fc51 	bl	80019ac <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e1a1      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002118:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4927      	ldr	r1, [pc, #156]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
 8002138:	e015      	b.n	8002166 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_RCC_OscConfig+0x270>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fc34 	bl	80019ac <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002148:	f7ff fc30 	bl	80019ac <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e180      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d03a      	beq.n	80021e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d019      	beq.n	80021ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217a:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_RCC_OscConfig+0x274>)
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002180:	f7ff fc14 	bl	80019ac <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002188:	f7ff fc10 	bl	80019ac <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e160      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f000 fa9c 	bl	80026e4 <RCC_Delay>
 80021ac:	e01c      	b.n	80021e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_RCC_OscConfig+0x274>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b4:	f7ff fbfa 	bl	80019ac <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ba:	e00f      	b.n	80021dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021bc:	f7ff fbf6 	bl	80019ac <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d908      	bls.n	80021dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e146      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	42420000 	.word	0x42420000
 80021d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	4b92      	ldr	r3, [pc, #584]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1e9      	bne.n	80021bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80a6 	beq.w	8002342 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fa:	4b8b      	ldr	r3, [pc, #556]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10d      	bne.n	8002222 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b88      	ldr	r3, [pc, #544]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	4a87      	ldr	r2, [pc, #540]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	61d3      	str	r3, [r2, #28]
 8002212:	4b85      	ldr	r3, [pc, #532]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221e:	2301      	movs	r3, #1
 8002220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b82      	ldr	r3, [pc, #520]	; (800242c <HAL_RCC_OscConfig+0x4c8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d118      	bne.n	8002260 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222e:	4b7f      	ldr	r3, [pc, #508]	; (800242c <HAL_RCC_OscConfig+0x4c8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a7e      	ldr	r2, [pc, #504]	; (800242c <HAL_RCC_OscConfig+0x4c8>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7ff fbb7 	bl	80019ac <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7ff fbb3 	bl	80019ac <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b64      	cmp	r3, #100	; 0x64
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e103      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b75      	ldr	r3, [pc, #468]	; (800242c <HAL_RCC_OscConfig+0x4c8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x312>
 8002268:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a6e      	ldr	r2, [pc, #440]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	e02d      	b.n	80022d2 <HAL_RCC_OscConfig+0x36e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x334>
 800227e:	4b6a      	ldr	r3, [pc, #424]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a69      	ldr	r2, [pc, #420]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6213      	str	r3, [r2, #32]
 800228a:	4b67      	ldr	r3, [pc, #412]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4a66      	ldr	r2, [pc, #408]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	f023 0304 	bic.w	r3, r3, #4
 8002294:	6213      	str	r3, [r2, #32]
 8002296:	e01c      	b.n	80022d2 <HAL_RCC_OscConfig+0x36e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b05      	cmp	r3, #5
 800229e:	d10c      	bne.n	80022ba <HAL_RCC_OscConfig+0x356>
 80022a0:	4b61      	ldr	r3, [pc, #388]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4a60      	ldr	r2, [pc, #384]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	f043 0304 	orr.w	r3, r3, #4
 80022aa:	6213      	str	r3, [r2, #32]
 80022ac:	4b5e      	ldr	r3, [pc, #376]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4a5d      	ldr	r2, [pc, #372]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6213      	str	r3, [r2, #32]
 80022b8:	e00b      	b.n	80022d2 <HAL_RCC_OscConfig+0x36e>
 80022ba:	4b5b      	ldr	r3, [pc, #364]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4a5a      	ldr	r2, [pc, #360]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	6213      	str	r3, [r2, #32]
 80022c6:	4b58      	ldr	r3, [pc, #352]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4a57      	ldr	r2, [pc, #348]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	f023 0304 	bic.w	r3, r3, #4
 80022d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d015      	beq.n	8002306 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022da:	f7ff fb67 	bl	80019ac <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7ff fb63 	bl	80019ac <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0b1      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f8:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ee      	beq.n	80022e2 <HAL_RCC_OscConfig+0x37e>
 8002304:	e014      	b.n	8002330 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002306:	f7ff fb51 	bl	80019ac <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7ff fb4d 	bl	80019ac <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	; 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e09b      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002324:	4b40      	ldr	r3, [pc, #256]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1ee      	bne.n	800230e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d105      	bne.n	8002342 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002336:	4b3c      	ldr	r3, [pc, #240]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4a3b      	ldr	r2, [pc, #236]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002340:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8087 	beq.w	800245a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800234c:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b08      	cmp	r3, #8
 8002356:	d061      	beq.n	800241c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d146      	bne.n	80023ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002360:	4b33      	ldr	r3, [pc, #204]	; (8002430 <HAL_RCC_OscConfig+0x4cc>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7ff fb21 	bl	80019ac <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236e:	f7ff fb1d 	bl	80019ac <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e06d      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002380:	4b29      	ldr	r3, [pc, #164]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f0      	bne.n	800236e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d108      	bne.n	80023a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002396:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	4921      	ldr	r1, [pc, #132]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a8:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a19      	ldr	r1, [r3, #32]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	430b      	orrs	r3, r1
 80023ba:	491b      	ldr	r1, [pc, #108]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCC_OscConfig+0x4cc>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7ff faf1 	bl	80019ac <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7ff faed 	bl	80019ac <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e03d      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x46a>
 80023ec:	e035      	b.n	800245a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_RCC_OscConfig+0x4cc>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7ff fada 	bl	80019ac <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fc:	f7ff fad6 	bl	80019ac <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e026      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x498>
 800241a:	e01e      	b.n	800245a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d107      	bne.n	8002434 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e019      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
 8002428:	40021000 	.word	0x40021000
 800242c:	40007000 	.word	0x40007000
 8002430:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_RCC_OscConfig+0x500>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	429a      	cmp	r2, r3
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000

08002468 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0d0      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800247c:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d910      	bls.n	80024ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 0207 	bic.w	r2, r3, #7
 8002492:	4965      	ldr	r1, [pc, #404]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b63      	ldr	r3, [pc, #396]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0b8      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d020      	beq.n	80024fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c4:	4b59      	ldr	r3, [pc, #356]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a58      	ldr	r2, [pc, #352]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024dc:	4b53      	ldr	r3, [pc, #332]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4a52      	ldr	r2, [pc, #328]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e8:	4b50      	ldr	r3, [pc, #320]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	494d      	ldr	r1, [pc, #308]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d040      	beq.n	8002588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	4b47      	ldr	r3, [pc, #284]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d115      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e07f      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d107      	bne.n	8002536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002526:	4b41      	ldr	r3, [pc, #260]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e073      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e06b      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002546:	4b39      	ldr	r3, [pc, #228]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f023 0203 	bic.w	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4936      	ldr	r1, [pc, #216]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002558:	f7ff fa28 	bl	80019ac <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	e00a      	b.n	8002576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002560:	f7ff fa24 	bl	80019ac <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	; 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e053      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 020c 	and.w	r2, r3, #12
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	429a      	cmp	r2, r3
 8002586:	d1eb      	bne.n	8002560 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002588:	4b27      	ldr	r3, [pc, #156]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d210      	bcs.n	80025b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 0207 	bic.w	r2, r3, #7
 800259e:	4922      	ldr	r1, [pc, #136]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e032      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4916      	ldr	r1, [pc, #88]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	490e      	ldr	r1, [pc, #56]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025f6:	f000 f821 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80025fa:	4602      	mov	r2, r0
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	490a      	ldr	r1, [pc, #40]	; (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	5ccb      	ldrb	r3, [r1, r3]
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	4a09      	ldr	r2, [pc, #36]	; (8002634 <HAL_RCC_ClockConfig+0x1cc>)
 8002610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_RCC_ClockConfig+0x1d0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff f986 	bl	8001928 <HAL_InitTick>

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40022000 	.word	0x40022000
 800262c:	40021000 	.word	0x40021000
 8002630:	08002f60 	.word	0x08002f60
 8002634:	20000040 	.word	0x20000040
 8002638:	20000044 	.word	0x20000044

0800263c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b04      	cmp	r3, #4
 8002664:	d002      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x30>
 8002666:	2b08      	cmp	r3, #8
 8002668:	d003      	beq.n	8002672 <HAL_RCC_GetSysClockFreq+0x36>
 800266a:	e027      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800266e:	613b      	str	r3, [r7, #16]
      break;
 8002670:	e027      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	0c9b      	lsrs	r3, r3, #18
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800267c:	5cd3      	ldrb	r3, [r2, r3]
 800267e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d010      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0c5b      	lsrs	r3, r3, #17
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	4a11      	ldr	r2, [pc, #68]	; (80026dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a0d      	ldr	r2, [pc, #52]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800269e:	fb03 f202 	mul.w	r2, r3, r2
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e004      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026b0:	fb02 f303 	mul.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	613b      	str	r3, [r7, #16]
      break;
 80026ba:	e002      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026be:	613b      	str	r3, [r7, #16]
      break;
 80026c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c2:	693b      	ldr	r3, [r7, #16]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	371c      	adds	r7, #28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	007a1200 	.word	0x007a1200
 80026d8:	08002f70 	.word	0x08002f70
 80026dc:	08002f80 	.word	0x08002f80
 80026e0:	003d0900 	.word	0x003d0900

080026e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <RCC_Delay+0x34>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0a      	ldr	r2, [pc, #40]	; (800271c <RCC_Delay+0x38>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0a5b      	lsrs	r3, r3, #9
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002700:	bf00      	nop
  }
  while (Delay --);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1e5a      	subs	r2, r3, #1
 8002706:	60fa      	str	r2, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f9      	bne.n	8002700 <RCC_Delay+0x1c>
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	20000040 	.word	0x20000040
 800271c:	10624dd3 	.word	0x10624dd3

08002720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e041      	b.n	80027b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe fec8 	bl	80014dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3304      	adds	r3, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f000 fa6e 	bl	8002c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d001      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e035      	b.n	8002844 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a16      	ldr	r2, [pc, #88]	; (8002850 <HAL_TIM_Base_Start_IT+0x90>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_TIM_Base_Start_IT+0x4e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002802:	d004      	beq.n	800280e <HAL_TIM_Base_Start_IT+0x4e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a12      	ldr	r2, [pc, #72]	; (8002854 <HAL_TIM_Base_Start_IT+0x94>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d111      	bne.n	8002832 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b06      	cmp	r3, #6
 800281e:	d010      	beq.n	8002842 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002830:	e007      	b.n	8002842 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0201 	orr.w	r2, r2, #1
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40012c00 	.word	0x40012c00
 8002854:	40000400 	.word	0x40000400

08002858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b02      	cmp	r3, #2
 800286c:	d122      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b02      	cmp	r3, #2
 800287a:	d11b      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0202 	mvn.w	r2, #2
 8002884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f9b4 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 80028a0:	e005      	b.n	80028ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f9a7 	bl	8002bf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f9b6 	bl	8002c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d122      	bne.n	8002908 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d11b      	bne.n	8002908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0204 	mvn.w	r2, #4
 80028d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2202      	movs	r2, #2
 80028de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f98a 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 80028f4:	e005      	b.n	8002902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f97d 	bl	8002bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f98c 	bl	8002c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b08      	cmp	r3, #8
 8002914:	d122      	bne.n	800295c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b08      	cmp	r3, #8
 8002922:	d11b      	bne.n	800295c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0208 	mvn.w	r2, #8
 800292c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2204      	movs	r2, #4
 8002932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f960 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 8002948:	e005      	b.n	8002956 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f953 	bl	8002bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f962 	bl	8002c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b10      	cmp	r3, #16
 8002968:	d122      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b10      	cmp	r3, #16
 8002976:	d11b      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0210 	mvn.w	r2, #16
 8002980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2208      	movs	r2, #8
 8002986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f936 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 800299c:	e005      	b.n	80029aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f929 	bl	8002bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f938 	bl	8002c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d10e      	bne.n	80029dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0201 	mvn.w	r2, #1
 80029d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe ff50 	bl	800187c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e6:	2b80      	cmp	r3, #128	; 0x80
 80029e8:	d10e      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f4:	2b80      	cmp	r3, #128	; 0x80
 80029f6:	d107      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fa6b 	bl	8002ede <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b40      	cmp	r3, #64	; 0x40
 8002a14:	d10e      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a20:	2b40      	cmp	r3, #64	; 0x40
 8002a22:	d107      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f8fc 	bl	8002c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b20      	cmp	r3, #32
 8002a40:	d10e      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d107      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0220 	mvn.w	r2, #32
 8002a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fa36 	bl	8002ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_TIM_ConfigClockSource+0x1c>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0b4      	b.n	8002bee <HAL_TIM_ConfigClockSource+0x186>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002abc:	d03e      	beq.n	8002b3c <HAL_TIM_ConfigClockSource+0xd4>
 8002abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac2:	f200 8087 	bhi.w	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aca:	f000 8086 	beq.w	8002bda <HAL_TIM_ConfigClockSource+0x172>
 8002ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad2:	d87f      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad4:	2b70      	cmp	r3, #112	; 0x70
 8002ad6:	d01a      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0xa6>
 8002ad8:	2b70      	cmp	r3, #112	; 0x70
 8002ada:	d87b      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002adc:	2b60      	cmp	r3, #96	; 0x60
 8002ade:	d050      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x11a>
 8002ae0:	2b60      	cmp	r3, #96	; 0x60
 8002ae2:	d877      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae4:	2b50      	cmp	r3, #80	; 0x50
 8002ae6:	d03c      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0xfa>
 8002ae8:	2b50      	cmp	r3, #80	; 0x50
 8002aea:	d873      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d058      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0x13a>
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d86f      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002af4:	2b30      	cmp	r3, #48	; 0x30
 8002af6:	d064      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002af8:	2b30      	cmp	r3, #48	; 0x30
 8002afa:	d86b      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d060      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d867      	bhi.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d05c      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	d05a      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002b0c:	e062      	b.n	8002bd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6899      	ldr	r1, [r3, #8]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f000 f95e 	bl	8002dde <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	609a      	str	r2, [r3, #8]
      break;
 8002b3a:	e04f      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f000 f947 	bl	8002dde <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b5e:	609a      	str	r2, [r3, #8]
      break;
 8002b60:	e03c      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f000 f8be 	bl	8002cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2150      	movs	r1, #80	; 0x50
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f915 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002b80:	e02c      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f000 f8dc 	bl	8002d4c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2160      	movs	r1, #96	; 0x60
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 f905 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002ba0:	e01c      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f000 f89e 	bl	8002cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2140      	movs	r1, #64	; 0x40
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f8f5 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002bc0:	e00c      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4610      	mov	r0, r2
 8002bce:	f000 f8ec 	bl	8002daa <TIM_ITRx_SetConfig>
      break;
 8002bd2:	e003      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd8:	e000      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
	...

08002c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a25      	ldr	r2, [pc, #148]	; (8002ce8 <TIM_Base_SetConfig+0xa8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d007      	beq.n	8002c68 <TIM_Base_SetConfig+0x28>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5e:	d003      	beq.n	8002c68 <TIM_Base_SetConfig+0x28>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a22      	ldr	r2, [pc, #136]	; (8002cec <TIM_Base_SetConfig+0xac>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d108      	bne.n	8002c7a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <TIM_Base_SetConfig+0xa8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d007      	beq.n	8002c92 <TIM_Base_SetConfig+0x52>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c88:	d003      	beq.n	8002c92 <TIM_Base_SetConfig+0x52>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a17      	ldr	r2, [pc, #92]	; (8002cec <TIM_Base_SetConfig+0xac>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d108      	bne.n	8002ca4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a07      	ldr	r2, [pc, #28]	; (8002ce8 <TIM_Base_SetConfig+0xa8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d103      	bne.n	8002cd8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	615a      	str	r2, [r3, #20]
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40000400 	.word	0x40000400

08002cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f023 0201 	bic.w	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f023 030a 	bic.w	r3, r3, #10
 8002d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	621a      	str	r2, [r3, #32]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f023 0210 	bic.w	r2, r3, #16
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	031b      	lsls	r3, r3, #12
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	621a      	str	r2, [r3, #32]
}
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f043 0307 	orr.w	r3, r3, #7
 8002dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b087      	sub	sp, #28
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002df8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	021a      	lsls	r2, r3, #8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	609a      	str	r2, [r3, #8]
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e041      	b.n	8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d009      	beq.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e80:	d004      	beq.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a10      	ldr	r2, [pc, #64]	; (8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d10c      	bne.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40012c00 	.word	0x40012c00
 8002ec8:	40000400 	.word	0x40000400

08002ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <__libc_init_array>:
 8002ef0:	b570      	push	{r4, r5, r6, lr}
 8002ef2:	2600      	movs	r6, #0
 8002ef4:	4d0c      	ldr	r5, [pc, #48]	; (8002f28 <__libc_init_array+0x38>)
 8002ef6:	4c0d      	ldr	r4, [pc, #52]	; (8002f2c <__libc_init_array+0x3c>)
 8002ef8:	1b64      	subs	r4, r4, r5
 8002efa:	10a4      	asrs	r4, r4, #2
 8002efc:	42a6      	cmp	r6, r4
 8002efe:	d109      	bne.n	8002f14 <__libc_init_array+0x24>
 8002f00:	f000 f822 	bl	8002f48 <_init>
 8002f04:	2600      	movs	r6, #0
 8002f06:	4d0a      	ldr	r5, [pc, #40]	; (8002f30 <__libc_init_array+0x40>)
 8002f08:	4c0a      	ldr	r4, [pc, #40]	; (8002f34 <__libc_init_array+0x44>)
 8002f0a:	1b64      	subs	r4, r4, r5
 8002f0c:	10a4      	asrs	r4, r4, #2
 8002f0e:	42a6      	cmp	r6, r4
 8002f10:	d105      	bne.n	8002f1e <__libc_init_array+0x2e>
 8002f12:	bd70      	pop	{r4, r5, r6, pc}
 8002f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f18:	4798      	blx	r3
 8002f1a:	3601      	adds	r6, #1
 8002f1c:	e7ee      	b.n	8002efc <__libc_init_array+0xc>
 8002f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f22:	4798      	blx	r3
 8002f24:	3601      	adds	r6, #1
 8002f26:	e7f2      	b.n	8002f0e <__libc_init_array+0x1e>
 8002f28:	08002f84 	.word	0x08002f84
 8002f2c:	08002f84 	.word	0x08002f84
 8002f30:	08002f84 	.word	0x08002f84
 8002f34:	08002f88 	.word	0x08002f88

08002f38 <memset>:
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4402      	add	r2, r0
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d100      	bne.n	8002f42 <memset+0xa>
 8002f40:	4770      	bx	lr
 8002f42:	f803 1b01 	strb.w	r1, [r3], #1
 8002f46:	e7f9      	b.n	8002f3c <memset+0x4>

08002f48 <_init>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	bf00      	nop
 8002f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4e:	bc08      	pop	{r3}
 8002f50:	469e      	mov	lr, r3
 8002f52:	4770      	bx	lr

08002f54 <_fini>:
 8002f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f56:	bf00      	nop
 8002f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5a:	bc08      	pop	{r3}
 8002f5c:	469e      	mov	lr, r3
 8002f5e:	4770      	bx	lr
