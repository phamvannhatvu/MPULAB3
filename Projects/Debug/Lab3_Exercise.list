
Lab3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf4  08002bf4  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf4  08002bf4  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf4  08002bf4  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bf8  08002bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000040  08002c3c  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002c3c  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092b4  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b68  00000000  00000000  0002931d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002ae88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002b910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b0a  00000000  00000000  0002c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b62a  00000000  00000000  00042dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826da  00000000  00000000  0004e3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0abe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a44  00000000  00000000  000d0b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bb8 	.word	0x08002bb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002bb8 	.word	0x08002bb8

0800014c <get_button_state>:
#include "input_processing.h"

enum ButtonState buttonState[NO_OF_BUTTONS];

enum ButtonState get_button_state(uint8_t index)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	return buttonState[index];
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	4a03      	ldr	r2, [pc, #12]	; (8000168 <get_button_state+0x1c>)
 800015a:	5cd3      	ldrb	r3, [r2, r3]
}
 800015c:	4618      	mov	r0, r3
 800015e:	370c      	adds	r7, #12
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr
 8000166:	bf00      	nop
 8000168:	2000005c 	.word	0x2000005c

0800016c <init_button_state>:

void init_button_state()
{
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NO_OF_BUTTONS; ++i)
 8000172:	2300      	movs	r3, #0
 8000174:	71fb      	strb	r3, [r7, #7]
 8000176:	e006      	b.n	8000186 <init_button_state+0x1a>
	{
		buttonState[i] = BUTTON_RELEASED;
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4a07      	ldr	r2, [pc, #28]	; (8000198 <init_button_state+0x2c>)
 800017c:	2100      	movs	r1, #0
 800017e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NO_OF_BUTTONS; ++i)
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	3301      	adds	r3, #1
 8000184:	71fb      	strb	r3, [r7, #7]
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d0f5      	beq.n	8000178 <init_button_state+0xc>
	}
}
 800018c:	bf00      	nop
 800018e:	bf00      	nop
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	2000005c 	.word	0x2000005c

0800019c <not_auto_increase_btn_fsm>:

//FSM for buttons that do not support auto-increment while holding.
void not_auto_increase_btn_fsm(uint8_t index)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	71fb      	strb	r3, [r7, #7]
	switch (buttonState[index])
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	4a11      	ldr	r2, [pc, #68]	; (80001f0 <not_auto_increase_btn_fsm+0x54>)
 80001aa:	5cd3      	ldrb	r3, [r2, r3]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d002      	beq.n	80001b6 <not_auto_increase_btn_fsm+0x1a>
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d00b      	beq.n	80001cc <not_auto_increase_btn_fsm+0x30>
		{
			buttonState[index] = BUTTON_RELEASED;
		}
		break;
	default:
		break;
 80001b4:	e018      	b.n	80001e8 <not_auto_increase_btn_fsm+0x4c>
		if (is_button_pressed(0))
 80001b6:	2000      	movs	r0, #0
 80001b8:	f000 f884 	bl	80002c4 <is_button_pressed>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d00f      	beq.n	80001e2 <not_auto_increase_btn_fsm+0x46>
			buttonState[index] = BUTTON_PRESSED;
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	4a0a      	ldr	r2, [pc, #40]	; (80001f0 <not_auto_increase_btn_fsm+0x54>)
 80001c6:	2101      	movs	r1, #1
 80001c8:	54d1      	strb	r1, [r2, r3]
		break;
 80001ca:	e00a      	b.n	80001e2 <not_auto_increase_btn_fsm+0x46>
		if (!is_button_pressed(0))
 80001cc:	2000      	movs	r0, #0
 80001ce:	f000 f879 	bl	80002c4 <is_button_pressed>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d106      	bne.n	80001e6 <not_auto_increase_btn_fsm+0x4a>
			buttonState[index] = BUTTON_RELEASED;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a05      	ldr	r2, [pc, #20]	; (80001f0 <not_auto_increase_btn_fsm+0x54>)
 80001dc:	2100      	movs	r1, #0
 80001de:	54d1      	strb	r1, [r2, r3]
		break;
 80001e0:	e001      	b.n	80001e6 <not_auto_increase_btn_fsm+0x4a>
		break;
 80001e2:	bf00      	nop
 80001e4:	e000      	b.n	80001e8 <not_auto_increase_btn_fsm+0x4c>
		break;
 80001e6:	bf00      	nop
	}
}
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	2000005c 	.word	0x2000005c

080001f4 <button_reading>:

static GPIO_TypeDef * buttonPort[NO_OF_BUTTONS] = {SELECT_MODE_BTN_GPIO_Port};
static uint16_t buttonPin[NO_OF_BUTTONS] = {SELECT_MODE_BTN_Pin};

void button_reading(void)
{
 80001f4:	b590      	push	{r4, r7, lr}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NO_OF_BUTTONS; ++i)
 80001fa:	2300      	movs	r3, #0
 80001fc:	71fb      	strb	r3, [r7, #7]
 80001fe:	e04a      	b.n	8000296 <button_reading+0xa2>
	{
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000200:	79fa      	ldrb	r2, [r7, #7]
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	4928      	ldr	r1, [pc, #160]	; (80002a8 <button_reading+0xb4>)
 8000206:	5c89      	ldrb	r1, [r1, r2]
 8000208:	4a28      	ldr	r2, [pc, #160]	; (80002ac <button_reading+0xb8>)
 800020a:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4a28      	ldr	r2, [pc, #160]	; (80002b0 <button_reading+0xbc>)
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	4927      	ldr	r1, [pc, #156]	; (80002b4 <button_reading+0xc0>)
 8000218:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800021c:	79fc      	ldrb	r4, [r7, #7]
 800021e:	4619      	mov	r1, r3
 8000220:	4610      	mov	r0, r2
 8000222:	f001 fc8f 	bl	8001b44 <HAL_GPIO_ReadPin>
 8000226:	4603      	mov	r3, r0
 8000228:	461a      	mov	r2, r3
 800022a:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <button_reading+0xb4>)
 800022c:	551a      	strb	r2, [r3, r4]
		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	4a1d      	ldr	r2, [pc, #116]	; (80002a8 <button_reading+0xb4>)
 8000232:	5cd2      	ldrb	r2, [r2, r3]
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	491d      	ldr	r1, [pc, #116]	; (80002ac <button_reading+0xb8>)
 8000238:	5ccb      	ldrb	r3, [r1, r3]
 800023a:	429a      	cmp	r2, r3
 800023c:	d128      	bne.n	8000290 <button_reading+0x9c>
		{
			buttonBuffer[i] = debounceButtonBuffer1[i];
 800023e:	79fa      	ldrb	r2, [r7, #7]
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4919      	ldr	r1, [pc, #100]	; (80002a8 <button_reading+0xb4>)
 8000244:	5c89      	ldrb	r1, [r1, r2]
 8000246:	4a1c      	ldr	r2, [pc, #112]	; (80002b8 <button_reading+0xc4>)
 8000248:	54d1      	strb	r1, [r2, r3]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED)
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <button_reading+0xc4>)
 800024e:	5cd3      	ldrb	r3, [r2, r3]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d114      	bne.n	800027e <button_reading+0x8a>
			{
				if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING)
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	4a19      	ldr	r2, [pc, #100]	; (80002bc <button_reading+0xc8>)
 8000258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800025c:	2b63      	cmp	r3, #99	; 0x63
 800025e:	d809      	bhi.n	8000274 <button_reading+0x80>
				{
					++counterForButtonPress1s[i];
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	4a16      	ldr	r2, [pc, #88]	; (80002bc <button_reading+0xc8>)
 8000264:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000268:	3201      	adds	r2, #1
 800026a:	b291      	uxth	r1, r2
 800026c:	4a13      	ldr	r2, [pc, #76]	; (80002bc <button_reading+0xc8>)
 800026e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000272:	e00d      	b.n	8000290 <button_reading+0x9c>
				}else
				{
					flagForButtonPress1s[i] = 1;
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4a12      	ldr	r2, [pc, #72]	; (80002c0 <button_reading+0xcc>)
 8000278:	2101      	movs	r1, #1
 800027a:	54d1      	strb	r1, [r2, r3]
 800027c:	e008      	b.n	8000290 <button_reading+0x9c>
				}
			}else
			{
				counterForButtonPress1s[i] = 0;
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <button_reading+0xc8>)
 8000282:	2100      	movs	r1, #0
 8000284:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <button_reading+0xcc>)
 800028c:	2100      	movs	r1, #0
 800028e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < NO_OF_BUTTONS; ++i)
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	3301      	adds	r3, #1
 8000294:	71fb      	strb	r3, [r7, #7]
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0b1      	beq.n	8000200 <button_reading+0xc>
			}
		}
	}
}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd90      	pop	{r4, r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000064 	.word	0x20000064
 80002ac:	20000068 	.word	0x20000068
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000004 	.word	0x20000004
 80002b8:	20000060 	.word	0x20000060
 80002bc:	20000070 	.word	0x20000070
 80002c0:	2000006c 	.word	0x2000006c

080002c4 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <is_button_pressed+0x14>
 80002d4:	2300      	movs	r3, #0
 80002d6:	e007      	b.n	80002e8 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	4a06      	ldr	r2, [pc, #24]	; (80002f4 <is_button_pressed+0x30>)
 80002dc:	5cd3      	ldrb	r3, [r2, r3]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	bf0c      	ite	eq
 80002e2:	2301      	moveq	r3, #1
 80002e4:	2300      	movne	r3, #0
 80002e6:	b2db      	uxtb	r3, r3
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000060 	.word	0x20000060

080002f8 <init_button>:
	}
	return 0;
}

void init_button()
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NO_OF_BUTTONS; ++i)
 80002fe:	2300      	movs	r3, #0
 8000300:	71fb      	strb	r3, [r7, #7]
 8000302:	e017      	b.n	8000334 <init_button+0x3c>
	{
		buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	4a10      	ldr	r2, [pc, #64]	; (8000348 <init_button+0x50>)
 8000308:	2101      	movs	r1, #1
 800030a:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = BUTTON_IS_RELEASED;
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	4a0f      	ldr	r2, [pc, #60]	; (800034c <init_button+0x54>)
 8000310:	2101      	movs	r1, #1
 8000312:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <init_button+0x58>)
 8000318:	2101      	movs	r1, #1
 800031a:	54d1      	strb	r1, [r2, r3]

		flagForButtonPress1s[i] = 0;
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <init_button+0x5c>)
 8000320:	2100      	movs	r1, #0
 8000322:	54d1      	strb	r1, [r2, r3]
		counterForButtonPress1s[i] = 0;
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	4a0c      	ldr	r2, [pc, #48]	; (8000358 <init_button+0x60>)
 8000328:	2100      	movs	r1, #0
 800032a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < NO_OF_BUTTONS; ++i)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	3301      	adds	r3, #1
 8000332:	71fb      	strb	r3, [r7, #7]
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0e4      	beq.n	8000304 <init_button+0xc>
	}
}
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20000060 	.word	0x20000060
 800034c:	20000064 	.word	0x20000064
 8000350:	20000068 	.word	0x20000068
 8000354:	2000006c 	.word	0x2000006c
 8000358:	20000070 	.word	0x20000070

0800035c <traffic_light_reset>:
 */
uint8_t led_7seg_values[NUM_OF_7SEG_LEDS];
uint8_t led7_status = 0;

void traffic_light_reset()
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	roadCounter[0] = red_duration;
 8000360:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <traffic_light_reset+0x94>)
 8000362:	781a      	ldrb	r2, [r3, #0]
 8000364:	4b23      	ldr	r3, [pc, #140]	; (80003f4 <traffic_light_reset+0x98>)
 8000366:	701a      	strb	r2, [r3, #0]
	roadState[0] = RED;
 8000368:	4b23      	ldr	r3, [pc, #140]	; (80003f8 <traffic_light_reset+0x9c>)
 800036a:	2200      	movs	r2, #0
 800036c:	701a      	strb	r2, [r3, #0]
	roadCounter[1] = green_duration;
 800036e:	4b23      	ldr	r3, [pc, #140]	; (80003fc <traffic_light_reset+0xa0>)
 8000370:	781a      	ldrb	r2, [r3, #0]
 8000372:	4b20      	ldr	r3, [pc, #128]	; (80003f4 <traffic_light_reset+0x98>)
 8000374:	705a      	strb	r2, [r3, #1]
	roadState[1] = GREEN;
 8000376:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <traffic_light_reset+0x9c>)
 8000378:	2201      	movs	r2, #1
 800037a:	705a      	strb	r2, [r3, #1]
	set_timer_traffic1(TRAFFIC_DURATION);
 800037c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000380:	f001 f83a 	bl	80013f8 <set_timer_traffic1>
	set_timer_traffic2(TRAFFIC_DURATION);
 8000384:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000388:	f001 f874 	bl	8001474 <set_timer_traffic2>

	HAL_GPIO_WritePin(redPort[0], redPin[0], GPIO_PIN_RESET);
 800038c:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <traffic_light_reset+0xa4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a1c      	ldr	r2, [pc, #112]	; (8000404 <traffic_light_reset+0xa8>)
 8000392:	8811      	ldrh	r1, [r2, #0]
 8000394:	2200      	movs	r2, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f001 fbeb 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(greenPort[0], greenPin[0], GPIO_PIN_SET);
 800039c:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <traffic_light_reset+0xac>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a1a      	ldr	r2, [pc, #104]	; (800040c <traffic_light_reset+0xb0>)
 80003a2:	8811      	ldrh	r1, [r2, #0]
 80003a4:	2201      	movs	r2, #1
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fbe3 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellowPort[0], yellowPin[0], GPIO_PIN_SET);
 80003ac:	4b18      	ldr	r3, [pc, #96]	; (8000410 <traffic_light_reset+0xb4>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a18      	ldr	r2, [pc, #96]	; (8000414 <traffic_light_reset+0xb8>)
 80003b2:	8811      	ldrh	r1, [r2, #0]
 80003b4:	2201      	movs	r2, #1
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 fbdb 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(redPort[1], redPin[1], GPIO_PIN_SET);
 80003bc:	4b10      	ldr	r3, [pc, #64]	; (8000400 <traffic_light_reset+0xa4>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a10      	ldr	r2, [pc, #64]	; (8000404 <traffic_light_reset+0xa8>)
 80003c2:	8851      	ldrh	r1, [r2, #2]
 80003c4:	2201      	movs	r2, #1
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 fbd3 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(greenPort[1], greenPin[1], GPIO_PIN_RESET);
 80003cc:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <traffic_light_reset+0xac>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	4a0e      	ldr	r2, [pc, #56]	; (800040c <traffic_light_reset+0xb0>)
 80003d2:	8851      	ldrh	r1, [r2, #2]
 80003d4:	2200      	movs	r2, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f001 fbcb 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellowPort[1], yellowPin[1], GPIO_PIN_SET);
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <traffic_light_reset+0xb4>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	4a0c      	ldr	r2, [pc, #48]	; (8000414 <traffic_light_reset+0xb8>)
 80003e2:	8851      	ldrh	r1, [r2, #2]
 80003e4:	2201      	movs	r2, #1
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 fbc3 	bl	8001b72 <HAL_GPIO_WritePin>
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000006 	.word	0x20000006
 80003f4:	20000074 	.word	0x20000074
 80003f8:	2000000c 	.word	0x2000000c
 80003fc:	20000007 	.word	0x20000007
 8000400:	20000010 	.word	0x20000010
 8000404:	20000028 	.word	0x20000028
 8000408:	20000018 	.word	0x20000018
 800040c:	2000002c 	.word	0x2000002c
 8000410:	20000020 	.word	0x20000020
 8000414:	20000030 	.word	0x20000030

08000418 <traffic_light_fsm>:

void traffic_light_fsm()
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	led_7seg_values[0] = roadCounter[0] / 10;
 800041c:	4ba6      	ldr	r3, [pc, #664]	; (80006b8 <traffic_light_fsm+0x2a0>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	4aa6      	ldr	r2, [pc, #664]	; (80006bc <traffic_light_fsm+0x2a4>)
 8000422:	fba2 2303 	umull	r2, r3, r2, r3
 8000426:	08db      	lsrs	r3, r3, #3
 8000428:	b2da      	uxtb	r2, r3
 800042a:	4ba5      	ldr	r3, [pc, #660]	; (80006c0 <traffic_light_fsm+0x2a8>)
 800042c:	701a      	strb	r2, [r3, #0]
	led_7seg_values[1] = roadCounter[0] % 10;
 800042e:	4ba2      	ldr	r3, [pc, #648]	; (80006b8 <traffic_light_fsm+0x2a0>)
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	4ba2      	ldr	r3, [pc, #648]	; (80006bc <traffic_light_fsm+0x2a4>)
 8000434:	fba3 1302 	umull	r1, r3, r3, r2
 8000438:	08d9      	lsrs	r1, r3, #3
 800043a:	460b      	mov	r3, r1
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	440b      	add	r3, r1
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	1ad3      	subs	r3, r2, r3
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4b9e      	ldr	r3, [pc, #632]	; (80006c0 <traffic_light_fsm+0x2a8>)
 8000448:	705a      	strb	r2, [r3, #1]
	led_7seg_values[2] = roadCounter[1] / 10;
 800044a:	4b9b      	ldr	r3, [pc, #620]	; (80006b8 <traffic_light_fsm+0x2a0>)
 800044c:	785b      	ldrb	r3, [r3, #1]
 800044e:	4a9b      	ldr	r2, [pc, #620]	; (80006bc <traffic_light_fsm+0x2a4>)
 8000450:	fba2 2303 	umull	r2, r3, r2, r3
 8000454:	08db      	lsrs	r3, r3, #3
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4b99      	ldr	r3, [pc, #612]	; (80006c0 <traffic_light_fsm+0x2a8>)
 800045a:	709a      	strb	r2, [r3, #2]
	led_7seg_values[3] = roadCounter[1] % 10;
 800045c:	4b96      	ldr	r3, [pc, #600]	; (80006b8 <traffic_light_fsm+0x2a0>)
 800045e:	785a      	ldrb	r2, [r3, #1]
 8000460:	4b96      	ldr	r3, [pc, #600]	; (80006bc <traffic_light_fsm+0x2a4>)
 8000462:	fba3 1302 	umull	r1, r3, r3, r2
 8000466:	08d9      	lsrs	r1, r3, #3
 8000468:	460b      	mov	r3, r1
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	440b      	add	r3, r1
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	1ad3      	subs	r3, r2, r3
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b92      	ldr	r3, [pc, #584]	; (80006c0 <traffic_light_fsm+0x2a8>)
 8000476:	70da      	strb	r2, [r3, #3]

	switch (roadState[0])
 8000478:	4b92      	ldr	r3, [pc, #584]	; (80006c4 <traffic_light_fsm+0x2ac>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b02      	cmp	r3, #2
 800047e:	d06e      	beq.n	800055e <traffic_light_fsm+0x146>
 8000480:	2b02      	cmp	r3, #2
 8000482:	f300 80a4 	bgt.w	80005ce <traffic_light_fsm+0x1b6>
 8000486:	2b00      	cmp	r3, #0
 8000488:	d002      	beq.n	8000490 <traffic_light_fsm+0x78>
 800048a:	2b01      	cmp	r3, #1
 800048c:	d034      	beq.n	80004f8 <traffic_light_fsm+0xe0>
 800048e:	e09e      	b.n	80005ce <traffic_light_fsm+0x1b6>
	{
	case RED:
		HAL_GPIO_WritePin(redPort[0], redPin[0], GPIO_PIN_RESET);
 8000490:	4b8d      	ldr	r3, [pc, #564]	; (80006c8 <traffic_light_fsm+0x2b0>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a8d      	ldr	r2, [pc, #564]	; (80006cc <traffic_light_fsm+0x2b4>)
 8000496:	8811      	ldrh	r1, [r2, #0]
 8000498:	2200      	movs	r2, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f001 fb69 	bl	8001b72 <HAL_GPIO_WritePin>
		if (is_timer_traffic1_flagged())
 80004a0:	f000 ffc6 	bl	8001430 <is_timer_traffic1_flagged>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	f000 808c 	beq.w	80005c4 <traffic_light_fsm+0x1ac>
		{
			--roadCounter[0];
 80004ac:	4b82      	ldr	r3, [pc, #520]	; (80006b8 <traffic_light_fsm+0x2a0>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	3b01      	subs	r3, #1
 80004b2:	b2da      	uxtb	r2, r3
 80004b4:	4b80      	ldr	r3, [pc, #512]	; (80006b8 <traffic_light_fsm+0x2a0>)
 80004b6:	701a      	strb	r2, [r3, #0]
			if (roadCounter[0] <= 0)
 80004b8:	4b7f      	ldr	r3, [pc, #508]	; (80006b8 <traffic_light_fsm+0x2a0>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d116      	bne.n	80004ee <traffic_light_fsm+0xd6>
			{
				roadState[0] = GREEN;
 80004c0:	4b80      	ldr	r3, [pc, #512]	; (80006c4 <traffic_light_fsm+0x2ac>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(redPort[0], redPin[0], GPIO_PIN_SET);
 80004c6:	4b80      	ldr	r3, [pc, #512]	; (80006c8 <traffic_light_fsm+0x2b0>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a80      	ldr	r2, [pc, #512]	; (80006cc <traffic_light_fsm+0x2b4>)
 80004cc:	8811      	ldrh	r1, [r2, #0]
 80004ce:	2201      	movs	r2, #1
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 fb4e 	bl	8001b72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(greenPort[0], greenPin[0], GPIO_PIN_RESET);
 80004d6:	4b7e      	ldr	r3, [pc, #504]	; (80006d0 <traffic_light_fsm+0x2b8>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a7e      	ldr	r2, [pc, #504]	; (80006d4 <traffic_light_fsm+0x2bc>)
 80004dc:	8811      	ldrh	r1, [r2, #0]
 80004de:	2200      	movs	r2, #0
 80004e0:	4618      	mov	r0, r3
 80004e2:	f001 fb46 	bl	8001b72 <HAL_GPIO_WritePin>
				roadCounter[0] = green_duration;
 80004e6:	4b7c      	ldr	r3, [pc, #496]	; (80006d8 <traffic_light_fsm+0x2c0>)
 80004e8:	781a      	ldrb	r2, [r3, #0]
 80004ea:	4b73      	ldr	r3, [pc, #460]	; (80006b8 <traffic_light_fsm+0x2a0>)
 80004ec:	701a      	strb	r2, [r3, #0]
			}
			set_timer_traffic1(TRAFFIC_DURATION);
 80004ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f2:	f000 ff81 	bl	80013f8 <set_timer_traffic1>
		}
		break;
 80004f6:	e065      	b.n	80005c4 <traffic_light_fsm+0x1ac>
	case GREEN:
		HAL_GPIO_WritePin(greenPort[0], greenPin[0], GPIO_PIN_RESET);
 80004f8:	4b75      	ldr	r3, [pc, #468]	; (80006d0 <traffic_light_fsm+0x2b8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a75      	ldr	r2, [pc, #468]	; (80006d4 <traffic_light_fsm+0x2bc>)
 80004fe:	8811      	ldrh	r1, [r2, #0]
 8000500:	2200      	movs	r2, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f001 fb35 	bl	8001b72 <HAL_GPIO_WritePin>
		if (is_timer_traffic1_flagged())
 8000508:	f000 ff92 	bl	8001430 <is_timer_traffic1_flagged>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d05a      	beq.n	80005c8 <traffic_light_fsm+0x1b0>
		{
			--roadCounter[0];
 8000512:	4b69      	ldr	r3, [pc, #420]	; (80006b8 <traffic_light_fsm+0x2a0>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	3b01      	subs	r3, #1
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b67      	ldr	r3, [pc, #412]	; (80006b8 <traffic_light_fsm+0x2a0>)
 800051c:	701a      	strb	r2, [r3, #0]
			if (roadCounter[0] <= 0)
 800051e:	4b66      	ldr	r3, [pc, #408]	; (80006b8 <traffic_light_fsm+0x2a0>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d116      	bne.n	8000554 <traffic_light_fsm+0x13c>
			{
				roadState[0] = YELLOW;
 8000526:	4b67      	ldr	r3, [pc, #412]	; (80006c4 <traffic_light_fsm+0x2ac>)
 8000528:	2202      	movs	r2, #2
 800052a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(greenPort[0], greenPin[0], GPIO_PIN_SET);
 800052c:	4b68      	ldr	r3, [pc, #416]	; (80006d0 <traffic_light_fsm+0x2b8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a68      	ldr	r2, [pc, #416]	; (80006d4 <traffic_light_fsm+0x2bc>)
 8000532:	8811      	ldrh	r1, [r2, #0]
 8000534:	2201      	movs	r2, #1
 8000536:	4618      	mov	r0, r3
 8000538:	f001 fb1b 	bl	8001b72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellowPort[0], yellowPin[0], GPIO_PIN_RESET);
 800053c:	4b67      	ldr	r3, [pc, #412]	; (80006dc <traffic_light_fsm+0x2c4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a67      	ldr	r2, [pc, #412]	; (80006e0 <traffic_light_fsm+0x2c8>)
 8000542:	8811      	ldrh	r1, [r2, #0]
 8000544:	2200      	movs	r2, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f001 fb13 	bl	8001b72 <HAL_GPIO_WritePin>
				roadCounter[0] = yellow_duration;
 800054c:	4b65      	ldr	r3, [pc, #404]	; (80006e4 <traffic_light_fsm+0x2cc>)
 800054e:	781a      	ldrb	r2, [r3, #0]
 8000550:	4b59      	ldr	r3, [pc, #356]	; (80006b8 <traffic_light_fsm+0x2a0>)
 8000552:	701a      	strb	r2, [r3, #0]
			}
			set_timer_traffic1(TRAFFIC_DURATION);
 8000554:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000558:	f000 ff4e 	bl	80013f8 <set_timer_traffic1>
		}
		break;
 800055c:	e034      	b.n	80005c8 <traffic_light_fsm+0x1b0>
	case YELLOW:
		HAL_GPIO_WritePin(yellowPort[0], yellowPin[0], GPIO_PIN_RESET);
 800055e:	4b5f      	ldr	r3, [pc, #380]	; (80006dc <traffic_light_fsm+0x2c4>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a5f      	ldr	r2, [pc, #380]	; (80006e0 <traffic_light_fsm+0x2c8>)
 8000564:	8811      	ldrh	r1, [r2, #0]
 8000566:	2200      	movs	r2, #0
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fb02 	bl	8001b72 <HAL_GPIO_WritePin>
		if (is_timer_traffic1_flagged())
 800056e:	f000 ff5f 	bl	8001430 <is_timer_traffic1_flagged>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d029      	beq.n	80005cc <traffic_light_fsm+0x1b4>
		{
			--roadCounter[0];
 8000578:	4b4f      	ldr	r3, [pc, #316]	; (80006b8 <traffic_light_fsm+0x2a0>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	3b01      	subs	r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b4d      	ldr	r3, [pc, #308]	; (80006b8 <traffic_light_fsm+0x2a0>)
 8000582:	701a      	strb	r2, [r3, #0]
			if (roadCounter[0] <= 0)
 8000584:	4b4c      	ldr	r3, [pc, #304]	; (80006b8 <traffic_light_fsm+0x2a0>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d116      	bne.n	80005ba <traffic_light_fsm+0x1a2>
			{
				roadState[0] = RED;
 800058c:	4b4d      	ldr	r3, [pc, #308]	; (80006c4 <traffic_light_fsm+0x2ac>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(yellowPort[0], yellowPin[0], GPIO_PIN_SET);
 8000592:	4b52      	ldr	r3, [pc, #328]	; (80006dc <traffic_light_fsm+0x2c4>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a52      	ldr	r2, [pc, #328]	; (80006e0 <traffic_light_fsm+0x2c8>)
 8000598:	8811      	ldrh	r1, [r2, #0]
 800059a:	2201      	movs	r2, #1
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fae8 	bl	8001b72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(redPort[0], redPin[0], GPIO_PIN_RESET);
 80005a2:	4b49      	ldr	r3, [pc, #292]	; (80006c8 <traffic_light_fsm+0x2b0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a49      	ldr	r2, [pc, #292]	; (80006cc <traffic_light_fsm+0x2b4>)
 80005a8:	8811      	ldrh	r1, [r2, #0]
 80005aa:	2200      	movs	r2, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fae0 	bl	8001b72 <HAL_GPIO_WritePin>
				roadCounter[0] = red_duration;
 80005b2:	4b4d      	ldr	r3, [pc, #308]	; (80006e8 <traffic_light_fsm+0x2d0>)
 80005b4:	781a      	ldrb	r2, [r3, #0]
 80005b6:	4b40      	ldr	r3, [pc, #256]	; (80006b8 <traffic_light_fsm+0x2a0>)
 80005b8:	701a      	strb	r2, [r3, #0]
			}
			set_timer_traffic1(TRAFFIC_DURATION);
 80005ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005be:	f000 ff1b 	bl	80013f8 <set_timer_traffic1>
		}
		break;
 80005c2:	e003      	b.n	80005cc <traffic_light_fsm+0x1b4>
		break;
 80005c4:	bf00      	nop
 80005c6:	e002      	b.n	80005ce <traffic_light_fsm+0x1b6>
		break;
 80005c8:	bf00      	nop
 80005ca:	e000      	b.n	80005ce <traffic_light_fsm+0x1b6>
		break;
 80005cc:	bf00      	nop
	}

	switch (roadState[1])
 80005ce:	4b3d      	ldr	r3, [pc, #244]	; (80006c4 <traffic_light_fsm+0x2ac>)
 80005d0:	785b      	ldrb	r3, [r3, #1]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	f000 808a 	beq.w	80006ec <traffic_light_fsm+0x2d4>
 80005d8:	2b02      	cmp	r3, #2
 80005da:	f300 80bf 	bgt.w	800075c <traffic_light_fsm+0x344>
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d002      	beq.n	80005e8 <traffic_light_fsm+0x1d0>
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d034      	beq.n	8000650 <traffic_light_fsm+0x238>
			}
			set_timer_traffic2(TRAFFIC_DURATION);
		}
		break;
	}
}
 80005e6:	e0b9      	b.n	800075c <traffic_light_fsm+0x344>
		HAL_GPIO_WritePin(redPort[1], redPin[1], GPIO_PIN_RESET);
 80005e8:	4b37      	ldr	r3, [pc, #220]	; (80006c8 <traffic_light_fsm+0x2b0>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	4a37      	ldr	r2, [pc, #220]	; (80006cc <traffic_light_fsm+0x2b4>)
 80005ee:	8851      	ldrh	r1, [r2, #2]
 80005f0:	2200      	movs	r2, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fabd 	bl	8001b72 <HAL_GPIO_WritePin>
		if (is_timer_traffic2_flagged())
 80005f8:	f000 ff58 	bl	80014ac <is_timer_traffic2_flagged>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	f000 80a7 	beq.w	8000752 <traffic_light_fsm+0x33a>
			--roadCounter[1];
 8000604:	4b2c      	ldr	r3, [pc, #176]	; (80006b8 <traffic_light_fsm+0x2a0>)
 8000606:	785b      	ldrb	r3, [r3, #1]
 8000608:	3b01      	subs	r3, #1
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <traffic_light_fsm+0x2a0>)
 800060e:	705a      	strb	r2, [r3, #1]
			if (roadCounter[1] <= 0)
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <traffic_light_fsm+0x2a0>)
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d116      	bne.n	8000646 <traffic_light_fsm+0x22e>
				roadState[1] = GREEN;
 8000618:	4b2a      	ldr	r3, [pc, #168]	; (80006c4 <traffic_light_fsm+0x2ac>)
 800061a:	2201      	movs	r2, #1
 800061c:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(redPort[1], redPin[1], GPIO_PIN_SET);
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <traffic_light_fsm+0x2b0>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	4a2a      	ldr	r2, [pc, #168]	; (80006cc <traffic_light_fsm+0x2b4>)
 8000624:	8851      	ldrh	r1, [r2, #2]
 8000626:	2201      	movs	r2, #1
 8000628:	4618      	mov	r0, r3
 800062a:	f001 faa2 	bl	8001b72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(greenPort[1], greenPin[1], GPIO_PIN_RESET);
 800062e:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <traffic_light_fsm+0x2b8>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	4a28      	ldr	r2, [pc, #160]	; (80006d4 <traffic_light_fsm+0x2bc>)
 8000634:	8851      	ldrh	r1, [r2, #2]
 8000636:	2200      	movs	r2, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fa9a 	bl	8001b72 <HAL_GPIO_WritePin>
				roadCounter[1] = green_duration;
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <traffic_light_fsm+0x2c0>)
 8000640:	781a      	ldrb	r2, [r3, #0]
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <traffic_light_fsm+0x2a0>)
 8000644:	705a      	strb	r2, [r3, #1]
			set_timer_traffic2(TRAFFIC_DURATION);
 8000646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064a:	f000 ff13 	bl	8001474 <set_timer_traffic2>
		break;
 800064e:	e080      	b.n	8000752 <traffic_light_fsm+0x33a>
		HAL_GPIO_WritePin(greenPort[1], greenPin[1], GPIO_PIN_RESET);
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <traffic_light_fsm+0x2b8>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	4a1f      	ldr	r2, [pc, #124]	; (80006d4 <traffic_light_fsm+0x2bc>)
 8000656:	8851      	ldrh	r1, [r2, #2]
 8000658:	2200      	movs	r2, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fa89 	bl	8001b72 <HAL_GPIO_WritePin>
		if (is_timer_traffic2_flagged())
 8000660:	f000 ff24 	bl	80014ac <is_timer_traffic2_flagged>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d075      	beq.n	8000756 <traffic_light_fsm+0x33e>
			--roadCounter[1];
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <traffic_light_fsm+0x2a0>)
 800066c:	785b      	ldrb	r3, [r3, #1]
 800066e:	3b01      	subs	r3, #1
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <traffic_light_fsm+0x2a0>)
 8000674:	705a      	strb	r2, [r3, #1]
			if (roadCounter[1] <= 0)
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <traffic_light_fsm+0x2a0>)
 8000678:	785b      	ldrb	r3, [r3, #1]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d116      	bne.n	80006ac <traffic_light_fsm+0x294>
				roadState[1] = YELLOW;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <traffic_light_fsm+0x2ac>)
 8000680:	2202      	movs	r2, #2
 8000682:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(greenPort[1], greenPin[1], GPIO_PIN_SET);
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <traffic_light_fsm+0x2b8>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <traffic_light_fsm+0x2bc>)
 800068a:	8851      	ldrh	r1, [r2, #2]
 800068c:	2201      	movs	r2, #1
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fa6f 	bl	8001b72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellowPort[1], yellowPin[1], GPIO_PIN_RESET);
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <traffic_light_fsm+0x2c4>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <traffic_light_fsm+0x2c8>)
 800069a:	8851      	ldrh	r1, [r2, #2]
 800069c:	2200      	movs	r2, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fa67 	bl	8001b72 <HAL_GPIO_WritePin>
				roadCounter[1] = yellow_duration;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <traffic_light_fsm+0x2cc>)
 80006a6:	781a      	ldrb	r2, [r3, #0]
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <traffic_light_fsm+0x2a0>)
 80006aa:	705a      	strb	r2, [r3, #1]
			set_timer_traffic2(TRAFFIC_DURATION);
 80006ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b0:	f000 fee0 	bl	8001474 <set_timer_traffic2>
		break;
 80006b4:	e04f      	b.n	8000756 <traffic_light_fsm+0x33e>
 80006b6:	bf00      	nop
 80006b8:	20000074 	.word	0x20000074
 80006bc:	cccccccd 	.word	0xcccccccd
 80006c0:	20000078 	.word	0x20000078
 80006c4:	2000000c 	.word	0x2000000c
 80006c8:	20000010 	.word	0x20000010
 80006cc:	20000028 	.word	0x20000028
 80006d0:	20000018 	.word	0x20000018
 80006d4:	2000002c 	.word	0x2000002c
 80006d8:	20000007 	.word	0x20000007
 80006dc:	20000020 	.word	0x20000020
 80006e0:	20000030 	.word	0x20000030
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000006 	.word	0x20000006
		HAL_GPIO_WritePin(yellowPort[1], yellowPin[1], GPIO_PIN_RESET);
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <traffic_light_fsm+0x348>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <traffic_light_fsm+0x34c>)
 80006f2:	8851      	ldrh	r1, [r2, #2]
 80006f4:	2200      	movs	r2, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fa3b 	bl	8001b72 <HAL_GPIO_WritePin>
		if (is_timer_traffic2_flagged())
 80006fc:	f000 fed6 	bl	80014ac <is_timer_traffic2_flagged>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d029      	beq.n	800075a <traffic_light_fsm+0x342>
			--roadCounter[1];
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <traffic_light_fsm+0x350>)
 8000708:	785b      	ldrb	r3, [r3, #1]
 800070a:	3b01      	subs	r3, #1
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <traffic_light_fsm+0x350>)
 8000710:	705a      	strb	r2, [r3, #1]
			if (roadCounter[1] <= 0)
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <traffic_light_fsm+0x350>)
 8000714:	785b      	ldrb	r3, [r3, #1]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d116      	bne.n	8000748 <traffic_light_fsm+0x330>
				roadState[1] = RED;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <traffic_light_fsm+0x354>)
 800071c:	2200      	movs	r2, #0
 800071e:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(yellowPort[1], yellowPin[1], GPIO_PIN_SET);
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <traffic_light_fsm+0x348>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <traffic_light_fsm+0x34c>)
 8000726:	8851      	ldrh	r1, [r2, #2]
 8000728:	2201      	movs	r2, #1
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fa21 	bl	8001b72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(redPort[0], redPin[1], GPIO_PIN_RESET);
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <traffic_light_fsm+0x358>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <traffic_light_fsm+0x35c>)
 8000736:	8851      	ldrh	r1, [r2, #2]
 8000738:	2200      	movs	r2, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fa19 	bl	8001b72 <HAL_GPIO_WritePin>
				roadCounter[1] = red_duration;
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <traffic_light_fsm+0x360>)
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <traffic_light_fsm+0x350>)
 8000746:	705a      	strb	r2, [r3, #1]
			set_timer_traffic2(TRAFFIC_DURATION);
 8000748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800074c:	f000 fe92 	bl	8001474 <set_timer_traffic2>
		break;
 8000750:	e003      	b.n	800075a <traffic_light_fsm+0x342>
		break;
 8000752:	bf00      	nop
 8000754:	e002      	b.n	800075c <traffic_light_fsm+0x344>
		break;
 8000756:	bf00      	nop
 8000758:	e000      	b.n	800075c <traffic_light_fsm+0x344>
		break;
 800075a:	bf00      	nop
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000020 	.word	0x20000020
 8000764:	20000030 	.word	0x20000030
 8000768:	20000074 	.word	0x20000074
 800076c:	2000000c 	.word	0x2000000c
 8000770:	20000010 	.word	0x20000010
 8000774:	20000028 	.word	0x20000028
 8000778:	20000006 	.word	0x20000006

0800077c <blink_led>:

void blink_led(enum TrafficLightState mode_color)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	led_7seg_values[0] = 0;
 8000786:	4b58      	ldr	r3, [pc, #352]	; (80008e8 <blink_led+0x16c>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]

	switch (mode_color)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d06d      	beq.n	800086e <blink_led+0xf2>
 8000792:	2b02      	cmp	r3, #2
 8000794:	f300 80a3 	bgt.w	80008de <blink_led+0x162>
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <blink_led+0x26>
 800079c:	2b01      	cmp	r3, #1
 800079e:	d033      	beq.n	8000808 <blink_led+0x8c>
			HAL_GPIO_TogglePin(yellowPort[1], yellowPin[1]);
			set_timer_blink(BLINK_DURATION);
		}
		break;
	}
}
 80007a0:	e09d      	b.n	80008de <blink_led+0x162>
		led_7seg_values[1] = 2;
 80007a2:	4b51      	ldr	r3, [pc, #324]	; (80008e8 <blink_led+0x16c>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	705a      	strb	r2, [r3, #1]
		led_7seg_values[2] = red_duration / 10;
 80007a8:	4b50      	ldr	r3, [pc, #320]	; (80008ec <blink_led+0x170>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4a50      	ldr	r2, [pc, #320]	; (80008f0 <blink_led+0x174>)
 80007ae:	fba2 2303 	umull	r2, r3, r2, r3
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b4c      	ldr	r3, [pc, #304]	; (80008e8 <blink_led+0x16c>)
 80007b8:	709a      	strb	r2, [r3, #2]
		led_7seg_values[3] = red_duration % 10;
 80007ba:	4b4c      	ldr	r3, [pc, #304]	; (80008ec <blink_led+0x170>)
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	4b4c      	ldr	r3, [pc, #304]	; (80008f0 <blink_led+0x174>)
 80007c0:	fba3 1302 	umull	r1, r3, r3, r2
 80007c4:	08d9      	lsrs	r1, r3, #3
 80007c6:	460b      	mov	r3, r1
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b45      	ldr	r3, [pc, #276]	; (80008e8 <blink_led+0x16c>)
 80007d4:	70da      	strb	r2, [r3, #3]
		if (is_timer_blink_flagged())
 80007d6:	f000 fd71 	bl	80012bc <is_timer_blink_flagged>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d079      	beq.n	80008d4 <blink_led+0x158>
			HAL_GPIO_TogglePin(redPort[0], redPin[0]);
 80007e0:	4b44      	ldr	r3, [pc, #272]	; (80008f4 <blink_led+0x178>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a44      	ldr	r2, [pc, #272]	; (80008f8 <blink_led+0x17c>)
 80007e6:	8812      	ldrh	r2, [r2, #0]
 80007e8:	4611      	mov	r1, r2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 f9d9 	bl	8001ba2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(redPort[1], redPin[1]);
 80007f0:	4b40      	ldr	r3, [pc, #256]	; (80008f4 <blink_led+0x178>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	4a40      	ldr	r2, [pc, #256]	; (80008f8 <blink_led+0x17c>)
 80007f6:	8852      	ldrh	r2, [r2, #2]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 f9d1 	bl	8001ba2 <HAL_GPIO_TogglePin>
			set_timer_blink(BLINK_DURATION);
 8000800:	20fa      	movs	r0, #250	; 0xfa
 8000802:	f000 fd3f 	bl	8001284 <set_timer_blink>
		break;
 8000806:	e065      	b.n	80008d4 <blink_led+0x158>
		led_7seg_values[1] = 3;
 8000808:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <blink_led+0x16c>)
 800080a:	2203      	movs	r2, #3
 800080c:	705a      	strb	r2, [r3, #1]
		led_7seg_values[2] = green_duration / 10;
 800080e:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <blink_led+0x180>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	4a37      	ldr	r2, [pc, #220]	; (80008f0 <blink_led+0x174>)
 8000814:	fba2 2303 	umull	r2, r3, r2, r3
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b32      	ldr	r3, [pc, #200]	; (80008e8 <blink_led+0x16c>)
 800081e:	709a      	strb	r2, [r3, #2]
		led_7seg_values[3] = green_duration % 10;
 8000820:	4b36      	ldr	r3, [pc, #216]	; (80008fc <blink_led+0x180>)
 8000822:	781a      	ldrb	r2, [r3, #0]
 8000824:	4b32      	ldr	r3, [pc, #200]	; (80008f0 <blink_led+0x174>)
 8000826:	fba3 1302 	umull	r1, r3, r3, r2
 800082a:	08d9      	lsrs	r1, r3, #3
 800082c:	460b      	mov	r3, r1
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	440b      	add	r3, r1
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <blink_led+0x16c>)
 800083a:	70da      	strb	r2, [r3, #3]
		if (is_timer_blink_flagged())
 800083c:	f000 fd3e 	bl	80012bc <is_timer_blink_flagged>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d048      	beq.n	80008d8 <blink_led+0x15c>
			HAL_GPIO_TogglePin(greenPort[0], greenPin[0]);
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <blink_led+0x184>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a2e      	ldr	r2, [pc, #184]	; (8000904 <blink_led+0x188>)
 800084c:	8812      	ldrh	r2, [r2, #0]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f001 f9a6 	bl	8001ba2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(greenPort[1], greenPin[1]);
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <blink_led+0x184>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	4a2a      	ldr	r2, [pc, #168]	; (8000904 <blink_led+0x188>)
 800085c:	8852      	ldrh	r2, [r2, #2]
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f001 f99e 	bl	8001ba2 <HAL_GPIO_TogglePin>
			set_timer_blink(BLINK_DURATION);
 8000866:	20fa      	movs	r0, #250	; 0xfa
 8000868:	f000 fd0c 	bl	8001284 <set_timer_blink>
		break;
 800086c:	e034      	b.n	80008d8 <blink_led+0x15c>
		led_7seg_values[1] = 4;
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <blink_led+0x16c>)
 8000870:	2204      	movs	r2, #4
 8000872:	705a      	strb	r2, [r3, #1]
		led_7seg_values[2] = yellow_duration / 10;
 8000874:	4b24      	ldr	r3, [pc, #144]	; (8000908 <blink_led+0x18c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <blink_led+0x174>)
 800087a:	fba2 2303 	umull	r2, r3, r2, r3
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <blink_led+0x16c>)
 8000884:	709a      	strb	r2, [r3, #2]
		led_7seg_values[3] = yellow_duration % 10;
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <blink_led+0x18c>)
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <blink_led+0x174>)
 800088c:	fba3 1302 	umull	r1, r3, r3, r2
 8000890:	08d9      	lsrs	r1, r3, #3
 8000892:	460b      	mov	r3, r1
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	440b      	add	r3, r1
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <blink_led+0x16c>)
 80008a0:	70da      	strb	r2, [r3, #3]
		if (is_timer_blink_flagged())
 80008a2:	f000 fd0b 	bl	80012bc <is_timer_blink_flagged>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d017      	beq.n	80008dc <blink_led+0x160>
			HAL_GPIO_TogglePin(yellowPort[0], yellowPin[0]);
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <blink_led+0x190>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a17      	ldr	r2, [pc, #92]	; (8000910 <blink_led+0x194>)
 80008b2:	8812      	ldrh	r2, [r2, #0]
 80008b4:	4611      	mov	r1, r2
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 f973 	bl	8001ba2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(yellowPort[1], yellowPin[1]);
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <blink_led+0x190>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	4a13      	ldr	r2, [pc, #76]	; (8000910 <blink_led+0x194>)
 80008c2:	8852      	ldrh	r2, [r2, #2]
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 f96b 	bl	8001ba2 <HAL_GPIO_TogglePin>
			set_timer_blink(BLINK_DURATION);
 80008cc:	20fa      	movs	r0, #250	; 0xfa
 80008ce:	f000 fcd9 	bl	8001284 <set_timer_blink>
		break;
 80008d2:	e003      	b.n	80008dc <blink_led+0x160>
		break;
 80008d4:	bf00      	nop
 80008d6:	e002      	b.n	80008de <blink_led+0x162>
		break;
 80008d8:	bf00      	nop
 80008da:	e000      	b.n	80008de <blink_led+0x162>
		break;
 80008dc:	bf00      	nop
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000078 	.word	0x20000078
 80008ec:	20000006 	.word	0x20000006
 80008f0:	cccccccd 	.word	0xcccccccd
 80008f4:	20000010 	.word	0x20000010
 80008f8:	20000028 	.word	0x20000028
 80008fc:	20000007 	.word	0x20000007
 8000900:	20000018 	.word	0x20000018
 8000904:	2000002c 	.word	0x2000002c
 8000908:	20000008 	.word	0x20000008
 800090c:	20000020 	.word	0x20000020
 8000910:	20000030 	.word	0x20000030

08000914 <led7_scanning>:

void led7_scanning()
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	display7SEG(led_7seg_values[led7_status]);
 8000918:	4b41      	ldr	r3, [pc, #260]	; (8000a20 <led7_scanning+0x10c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b41      	ldr	r3, [pc, #260]	; (8000a24 <led7_scanning+0x110>)
 8000920:	5c9b      	ldrb	r3, [r3, r2]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f8c6 	bl	8000ab4 <display7SEG>
	switch (led7_status)
 8000928:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <led7_scanning+0x10c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d86b      	bhi.n	8000a08 <led7_scanning+0xf4>
 8000930:	a201      	add	r2, pc, #4	; (adr r2, 8000938 <led7_scanning+0x24>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000949 	.word	0x08000949
 800093c:	08000979 	.word	0x08000979
 8000940:	080009a9 	.word	0x080009a9
 8000944:	080009d9 	.word	0x080009d9
	{
	case 0:
		if (is_timer_7seg_scan_flagged())
 8000948:	f000 fd34 	bl	80013b4 <is_timer_7seg_scan_flagged>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d05c      	beq.n	8000a0c <led7_scanning+0xf8>
		{
			HAL_GPIO_WritePin(EN_7SEG1_TEN_GPIO_Port, EN_7SEG1_TEN_Pin, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000958:	4833      	ldr	r0, [pc, #204]	; (8000a28 <led7_scanning+0x114>)
 800095a:	f001 f90a 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_7SEG1_UNIT_GPIO_Port, EN_7SEG1_UNIT_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000964:	4830      	ldr	r0, [pc, #192]	; (8000a28 <led7_scanning+0x114>)
 8000966:	f001 f904 	bl	8001b72 <HAL_GPIO_WritePin>
			led7_status = 1;
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <led7_scanning+0x10c>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
			set_timer_7seg_scan(SCANNING_DURATION);
 8000970:	20fa      	movs	r0, #250	; 0xfa
 8000972:	f000 fd03 	bl	800137c <set_timer_7seg_scan>
		}
		break;
 8000976:	e049      	b.n	8000a0c <led7_scanning+0xf8>
	case 1:
		if (is_timer_7seg_scan_flagged())
 8000978:	f000 fd1c 	bl	80013b4 <is_timer_7seg_scan_flagged>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d046      	beq.n	8000a10 <led7_scanning+0xfc>
		{
			HAL_GPIO_WritePin(EN_7SEG1_UNIT_GPIO_Port, EN_7SEG1_UNIT_Pin, GPIO_PIN_SET);
 8000982:	2201      	movs	r2, #1
 8000984:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000988:	4827      	ldr	r0, [pc, #156]	; (8000a28 <led7_scanning+0x114>)
 800098a:	f001 f8f2 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_7SEG2_TEN_GPIO_Port, EN_7SEG2_TEN_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000994:	4824      	ldr	r0, [pc, #144]	; (8000a28 <led7_scanning+0x114>)
 8000996:	f001 f8ec 	bl	8001b72 <HAL_GPIO_WritePin>
			led7_status = 2;
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <led7_scanning+0x10c>)
 800099c:	2202      	movs	r2, #2
 800099e:	701a      	strb	r2, [r3, #0]
			set_timer_7seg_scan(SCANNING_DURATION);
 80009a0:	20fa      	movs	r0, #250	; 0xfa
 80009a2:	f000 fceb 	bl	800137c <set_timer_7seg_scan>
		}
		break;
 80009a6:	e033      	b.n	8000a10 <led7_scanning+0xfc>
	case 2:
		if (is_timer_7seg_scan_flagged())
 80009a8:	f000 fd04 	bl	80013b4 <is_timer_7seg_scan_flagged>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d030      	beq.n	8000a14 <led7_scanning+0x100>
		{
			HAL_GPIO_WritePin(EN_7SEG2_TEN_GPIO_Port, EN_7SEG2_TEN_Pin, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b8:	481b      	ldr	r0, [pc, #108]	; (8000a28 <led7_scanning+0x114>)
 80009ba:	f001 f8da 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_7SEG2_UNIT_GPIO_Port, EN_7SEG2_UNIT_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c4:	4818      	ldr	r0, [pc, #96]	; (8000a28 <led7_scanning+0x114>)
 80009c6:	f001 f8d4 	bl	8001b72 <HAL_GPIO_WritePin>
			led7_status = 3;
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <led7_scanning+0x10c>)
 80009cc:	2203      	movs	r2, #3
 80009ce:	701a      	strb	r2, [r3, #0]
			set_timer_7seg_scan(SCANNING_DURATION);
 80009d0:	20fa      	movs	r0, #250	; 0xfa
 80009d2:	f000 fcd3 	bl	800137c <set_timer_7seg_scan>
		}
		break;
 80009d6:	e01d      	b.n	8000a14 <led7_scanning+0x100>
	case 3:
		if (is_timer_7seg_scan_flagged())
 80009d8:	f000 fcec 	bl	80013b4 <is_timer_7seg_scan_flagged>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d01a      	beq.n	8000a18 <led7_scanning+0x104>
		{
			HAL_GPIO_WritePin(EN_7SEG2_UNIT_GPIO_Port, EN_7SEG2_UNIT_Pin, GPIO_PIN_SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e8:	480f      	ldr	r0, [pc, #60]	; (8000a28 <led7_scanning+0x114>)
 80009ea:	f001 f8c2 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_7SEG1_TEN_GPIO_Port, EN_7SEG1_TEN_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <led7_scanning+0x114>)
 80009f6:	f001 f8bc 	bl	8001b72 <HAL_GPIO_WritePin>
			led7_status = 0;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <led7_scanning+0x10c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
			set_timer_7seg_scan(SCANNING_DURATION);
 8000a00:	20fa      	movs	r0, #250	; 0xfa
 8000a02:	f000 fcbb 	bl	800137c <set_timer_7seg_scan>
		}
		break;
 8000a06:	e007      	b.n	8000a18 <led7_scanning+0x104>
	default:
		break;
 8000a08:	bf00      	nop
 8000a0a:	e006      	b.n	8000a1a <led7_scanning+0x106>
		break;
 8000a0c:	bf00      	nop
 8000a0e:	e004      	b.n	8000a1a <led7_scanning+0x106>
		break;
 8000a10:	bf00      	nop
 8000a12:	e002      	b.n	8000a1a <led7_scanning+0x106>
		break;
 8000a14:	bf00      	nop
 8000a16:	e000      	b.n	8000a1a <led7_scanning+0x106>
		break;
 8000a18:	bf00      	nop
	}
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000007c 	.word	0x2000007c
 8000a24:	20000078 	.word	0x20000078
 8000a28:	40010800 	.word	0x40010800

08000a2c <blink_led_clear>:

void blink_led_clear()
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(yellowPort[0], yellowPin[0], GPIO_PIN_SET);
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <blink_led_clear+0x70>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <blink_led_clear+0x74>)
 8000a36:	8811      	ldrh	r1, [r2, #0]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 f899 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(greenPort[0], greenPin[0], GPIO_PIN_SET);
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <blink_led_clear+0x78>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a18      	ldr	r2, [pc, #96]	; (8000aa8 <blink_led_clear+0x7c>)
 8000a46:	8811      	ldrh	r1, [r2, #0]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 f891 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(redPort[0], redPin[0], GPIO_PIN_SET);
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <blink_led_clear+0x80>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <blink_led_clear+0x84>)
 8000a56:	8811      	ldrh	r1, [r2, #0]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 f889 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(yellowPort[1], yellowPin[1], GPIO_PIN_SET);
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <blink_led_clear+0x70>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <blink_led_clear+0x74>)
 8000a66:	8851      	ldrh	r1, [r2, #2]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 f881 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(greenPort[1], greenPin[1], GPIO_PIN_SET);
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <blink_led_clear+0x78>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <blink_led_clear+0x7c>)
 8000a76:	8851      	ldrh	r1, [r2, #2]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f879 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(redPort[1], redPin[1], GPIO_PIN_SET);
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <blink_led_clear+0x80>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <blink_led_clear+0x84>)
 8000a86:	8851      	ldrh	r1, [r2, #2]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 f871 	bl	8001b72 <HAL_GPIO_WritePin>
	set_timer_blink(BLINK_DURATION);
 8000a90:	20fa      	movs	r0, #250	; 0xfa
 8000a92:	f000 fbf7 	bl	8001284 <set_timer_blink>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000020 	.word	0x20000020
 8000aa0:	20000030 	.word	0x20000030
 8000aa4:	20000018 	.word	0x20000018
 8000aa8:	2000002c 	.word	0x2000002c
 8000aac:	20000010 	.word	0x20000010
 8000ab0:	20000028 	.word	0x20000028

08000ab4 <display7SEG>:

void display7SEG(uint8_t led_number)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	switch (led_number)
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b09      	cmp	r3, #9
 8000ac2:	f200 817f 	bhi.w	8000dc4 <display7SEG+0x310>
 8000ac6:	a201      	add	r2, pc, #4	; (adr r2, 8000acc <display7SEG+0x18>)
 8000ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000acc:	08000af5 	.word	0x08000af5
 8000ad0:	08000b3d 	.word	0x08000b3d
 8000ad4:	08000b85 	.word	0x08000b85
 8000ad8:	08000bcd 	.word	0x08000bcd
 8000adc:	08000c15 	.word	0x08000c15
 8000ae0:	08000c5d 	.word	0x08000c5d
 8000ae4:	08000ca5 	.word	0x08000ca5
 8000ae8:	08000ced 	.word	0x08000ced
 8000aec:	08000d35 	.word	0x08000d35
 8000af0:	08000d7d 	.word	0x08000d7d
	{
	case 0:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2102      	movs	r1, #2
 8000af8:	48b4      	ldr	r0, [pc, #720]	; (8000dcc <display7SEG+0x318>)
 8000afa:	f001 f83a 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2104      	movs	r1, #4
 8000b02:	48b2      	ldr	r0, [pc, #712]	; (8000dcc <display7SEG+0x318>)
 8000b04:	f001 f835 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	48af      	ldr	r0, [pc, #700]	; (8000dcc <display7SEG+0x318>)
 8000b0e:	f001 f830 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2110      	movs	r1, #16
 8000b16:	48ad      	ldr	r0, [pc, #692]	; (8000dcc <display7SEG+0x318>)
 8000b18:	f001 f82b 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2120      	movs	r1, #32
 8000b20:	48aa      	ldr	r0, [pc, #680]	; (8000dcc <display7SEG+0x318>)
 8000b22:	f001 f826 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	48a8      	ldr	r0, [pc, #672]	; (8000dcc <display7SEG+0x318>)
 8000b2c:	f001 f821 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	2180      	movs	r1, #128	; 0x80
 8000b34:	48a5      	ldr	r0, [pc, #660]	; (8000dcc <display7SEG+0x318>)
 8000b36:	f001 f81c 	bl	8001b72 <HAL_GPIO_WritePin>
		break;
 8000b3a:	e143      	b.n	8000dc4 <display7SEG+0x310>
	case 1:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2102      	movs	r1, #2
 8000b40:	48a2      	ldr	r0, [pc, #648]	; (8000dcc <display7SEG+0x318>)
 8000b42:	f001 f816 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2104      	movs	r1, #4
 8000b4a:	48a0      	ldr	r0, [pc, #640]	; (8000dcc <display7SEG+0x318>)
 8000b4c:	f001 f811 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2108      	movs	r1, #8
 8000b54:	489d      	ldr	r0, [pc, #628]	; (8000dcc <display7SEG+0x318>)
 8000b56:	f001 f80c 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	489b      	ldr	r0, [pc, #620]	; (8000dcc <display7SEG+0x318>)
 8000b60:	f001 f807 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2120      	movs	r1, #32
 8000b68:	4898      	ldr	r0, [pc, #608]	; (8000dcc <display7SEG+0x318>)
 8000b6a:	f001 f802 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2140      	movs	r1, #64	; 0x40
 8000b72:	4896      	ldr	r0, [pc, #600]	; (8000dcc <display7SEG+0x318>)
 8000b74:	f000 fffd 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	4893      	ldr	r0, [pc, #588]	; (8000dcc <display7SEG+0x318>)
 8000b7e:	f000 fff8 	bl	8001b72 <HAL_GPIO_WritePin>
		break;
 8000b82:	e11f      	b.n	8000dc4 <display7SEG+0x310>
	case 2:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2102      	movs	r1, #2
 8000b88:	4890      	ldr	r0, [pc, #576]	; (8000dcc <display7SEG+0x318>)
 8000b8a:	f000 fff2 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2104      	movs	r1, #4
 8000b92:	488e      	ldr	r0, [pc, #568]	; (8000dcc <display7SEG+0x318>)
 8000b94:	f000 ffed 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	488b      	ldr	r0, [pc, #556]	; (8000dcc <display7SEG+0x318>)
 8000b9e:	f000 ffe8 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2110      	movs	r1, #16
 8000ba6:	4889      	ldr	r0, [pc, #548]	; (8000dcc <display7SEG+0x318>)
 8000ba8:	f000 ffe3 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2120      	movs	r1, #32
 8000bb0:	4886      	ldr	r0, [pc, #536]	; (8000dcc <display7SEG+0x318>)
 8000bb2:	f000 ffde 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	4884      	ldr	r0, [pc, #528]	; (8000dcc <display7SEG+0x318>)
 8000bbc:	f000 ffd9 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2180      	movs	r1, #128	; 0x80
 8000bc4:	4881      	ldr	r0, [pc, #516]	; (8000dcc <display7SEG+0x318>)
 8000bc6:	f000 ffd4 	bl	8001b72 <HAL_GPIO_WritePin>
		break;
 8000bca:	e0fb      	b.n	8000dc4 <display7SEG+0x310>
	case 3:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2102      	movs	r1, #2
 8000bd0:	487e      	ldr	r0, [pc, #504]	; (8000dcc <display7SEG+0x318>)
 8000bd2:	f000 ffce 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2104      	movs	r1, #4
 8000bda:	487c      	ldr	r0, [pc, #496]	; (8000dcc <display7SEG+0x318>)
 8000bdc:	f000 ffc9 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2108      	movs	r1, #8
 8000be4:	4879      	ldr	r0, [pc, #484]	; (8000dcc <display7SEG+0x318>)
 8000be6:	f000 ffc4 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2110      	movs	r1, #16
 8000bee:	4877      	ldr	r0, [pc, #476]	; (8000dcc <display7SEG+0x318>)
 8000bf0:	f000 ffbf 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2120      	movs	r1, #32
 8000bf8:	4874      	ldr	r0, [pc, #464]	; (8000dcc <display7SEG+0x318>)
 8000bfa:	f000 ffba 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2140      	movs	r1, #64	; 0x40
 8000c02:	4872      	ldr	r0, [pc, #456]	; (8000dcc <display7SEG+0x318>)
 8000c04:	f000 ffb5 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	486f      	ldr	r0, [pc, #444]	; (8000dcc <display7SEG+0x318>)
 8000c0e:	f000 ffb0 	bl	8001b72 <HAL_GPIO_WritePin>
		break;
 8000c12:	e0d7      	b.n	8000dc4 <display7SEG+0x310>
	case 4:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2102      	movs	r1, #2
 8000c18:	486c      	ldr	r0, [pc, #432]	; (8000dcc <display7SEG+0x318>)
 8000c1a:	f000 ffaa 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2104      	movs	r1, #4
 8000c22:	486a      	ldr	r0, [pc, #424]	; (8000dcc <display7SEG+0x318>)
 8000c24:	f000 ffa5 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2108      	movs	r1, #8
 8000c2c:	4867      	ldr	r0, [pc, #412]	; (8000dcc <display7SEG+0x318>)
 8000c2e:	f000 ffa0 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2110      	movs	r1, #16
 8000c36:	4865      	ldr	r0, [pc, #404]	; (8000dcc <display7SEG+0x318>)
 8000c38:	f000 ff9b 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2120      	movs	r1, #32
 8000c40:	4862      	ldr	r0, [pc, #392]	; (8000dcc <display7SEG+0x318>)
 8000c42:	f000 ff96 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	4860      	ldr	r0, [pc, #384]	; (8000dcc <display7SEG+0x318>)
 8000c4c:	f000 ff91 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	485d      	ldr	r0, [pc, #372]	; (8000dcc <display7SEG+0x318>)
 8000c56:	f000 ff8c 	bl	8001b72 <HAL_GPIO_WritePin>
		break;
 8000c5a:	e0b3      	b.n	8000dc4 <display7SEG+0x310>
	case 5:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2102      	movs	r1, #2
 8000c60:	485a      	ldr	r0, [pc, #360]	; (8000dcc <display7SEG+0x318>)
 8000c62:	f000 ff86 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2104      	movs	r1, #4
 8000c6a:	4858      	ldr	r0, [pc, #352]	; (8000dcc <display7SEG+0x318>)
 8000c6c:	f000 ff81 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2108      	movs	r1, #8
 8000c74:	4855      	ldr	r0, [pc, #340]	; (8000dcc <display7SEG+0x318>)
 8000c76:	f000 ff7c 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	4853      	ldr	r0, [pc, #332]	; (8000dcc <display7SEG+0x318>)
 8000c80:	f000 ff77 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2120      	movs	r1, #32
 8000c88:	4850      	ldr	r0, [pc, #320]	; (8000dcc <display7SEG+0x318>)
 8000c8a:	f000 ff72 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2140      	movs	r1, #64	; 0x40
 8000c92:	484e      	ldr	r0, [pc, #312]	; (8000dcc <display7SEG+0x318>)
 8000c94:	f000 ff6d 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	484b      	ldr	r0, [pc, #300]	; (8000dcc <display7SEG+0x318>)
 8000c9e:	f000 ff68 	bl	8001b72 <HAL_GPIO_WritePin>
		break;
 8000ca2:	e08f      	b.n	8000dc4 <display7SEG+0x310>
	case 6:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	4848      	ldr	r0, [pc, #288]	; (8000dcc <display7SEG+0x318>)
 8000caa:	f000 ff62 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	4846      	ldr	r0, [pc, #280]	; (8000dcc <display7SEG+0x318>)
 8000cb4:	f000 ff5d 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2108      	movs	r1, #8
 8000cbc:	4843      	ldr	r0, [pc, #268]	; (8000dcc <display7SEG+0x318>)
 8000cbe:	f000 ff58 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	4841      	ldr	r0, [pc, #260]	; (8000dcc <display7SEG+0x318>)
 8000cc8:	f000 ff53 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2120      	movs	r1, #32
 8000cd0:	483e      	ldr	r0, [pc, #248]	; (8000dcc <display7SEG+0x318>)
 8000cd2:	f000 ff4e 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2140      	movs	r1, #64	; 0x40
 8000cda:	483c      	ldr	r0, [pc, #240]	; (8000dcc <display7SEG+0x318>)
 8000cdc:	f000 ff49 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2180      	movs	r1, #128	; 0x80
 8000ce4:	4839      	ldr	r0, [pc, #228]	; (8000dcc <display7SEG+0x318>)
 8000ce6:	f000 ff44 	bl	8001b72 <HAL_GPIO_WritePin>
		break;
 8000cea:	e06b      	b.n	8000dc4 <display7SEG+0x310>
	case 7:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2102      	movs	r1, #2
 8000cf0:	4836      	ldr	r0, [pc, #216]	; (8000dcc <display7SEG+0x318>)
 8000cf2:	f000 ff3e 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	4834      	ldr	r0, [pc, #208]	; (8000dcc <display7SEG+0x318>)
 8000cfc:	f000 ff39 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2108      	movs	r1, #8
 8000d04:	4831      	ldr	r0, [pc, #196]	; (8000dcc <display7SEG+0x318>)
 8000d06:	f000 ff34 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	482f      	ldr	r0, [pc, #188]	; (8000dcc <display7SEG+0x318>)
 8000d10:	f000 ff2f 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2120      	movs	r1, #32
 8000d18:	482c      	ldr	r0, [pc, #176]	; (8000dcc <display7SEG+0x318>)
 8000d1a:	f000 ff2a 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2140      	movs	r1, #64	; 0x40
 8000d22:	482a      	ldr	r0, [pc, #168]	; (8000dcc <display7SEG+0x318>)
 8000d24:	f000 ff25 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2180      	movs	r1, #128	; 0x80
 8000d2c:	4827      	ldr	r0, [pc, #156]	; (8000dcc <display7SEG+0x318>)
 8000d2e:	f000 ff20 	bl	8001b72 <HAL_GPIO_WritePin>
		break;
 8000d32:	e047      	b.n	8000dc4 <display7SEG+0x310>
	case 8:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2102      	movs	r1, #2
 8000d38:	4824      	ldr	r0, [pc, #144]	; (8000dcc <display7SEG+0x318>)
 8000d3a:	f000 ff1a 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2104      	movs	r1, #4
 8000d42:	4822      	ldr	r0, [pc, #136]	; (8000dcc <display7SEG+0x318>)
 8000d44:	f000 ff15 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2108      	movs	r1, #8
 8000d4c:	481f      	ldr	r0, [pc, #124]	; (8000dcc <display7SEG+0x318>)
 8000d4e:	f000 ff10 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2110      	movs	r1, #16
 8000d56:	481d      	ldr	r0, [pc, #116]	; (8000dcc <display7SEG+0x318>)
 8000d58:	f000 ff0b 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2120      	movs	r1, #32
 8000d60:	481a      	ldr	r0, [pc, #104]	; (8000dcc <display7SEG+0x318>)
 8000d62:	f000 ff06 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2140      	movs	r1, #64	; 0x40
 8000d6a:	4818      	ldr	r0, [pc, #96]	; (8000dcc <display7SEG+0x318>)
 8000d6c:	f000 ff01 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2180      	movs	r1, #128	; 0x80
 8000d74:	4815      	ldr	r0, [pc, #84]	; (8000dcc <display7SEG+0x318>)
 8000d76:	f000 fefc 	bl	8001b72 <HAL_GPIO_WritePin>
		break;
 8000d7a:	e023      	b.n	8000dc4 <display7SEG+0x310>
	case 9:
		HAL_GPIO_WritePin(LED7SEG_1_GPIO_Port, LED7SEG_1_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2102      	movs	r1, #2
 8000d80:	4812      	ldr	r0, [pc, #72]	; (8000dcc <display7SEG+0x318>)
 8000d82:	f000 fef6 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_2_GPIO_Port, LED7SEG_2_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2104      	movs	r1, #4
 8000d8a:	4810      	ldr	r0, [pc, #64]	; (8000dcc <display7SEG+0x318>)
 8000d8c:	f000 fef1 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_3_GPIO_Port, LED7SEG_3_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2108      	movs	r1, #8
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <display7SEG+0x318>)
 8000d96:	f000 feec 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_4_GPIO_Port, LED7SEG_4_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2110      	movs	r1, #16
 8000d9e:	480b      	ldr	r0, [pc, #44]	; (8000dcc <display7SEG+0x318>)
 8000da0:	f000 fee7 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_5_GPIO_Port, LED7SEG_5_Pin, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2120      	movs	r1, #32
 8000da8:	4808      	ldr	r0, [pc, #32]	; (8000dcc <display7SEG+0x318>)
 8000daa:	f000 fee2 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_6_GPIO_Port, LED7SEG_6_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2140      	movs	r1, #64	; 0x40
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <display7SEG+0x318>)
 8000db4:	f000 fedd 	bl	8001b72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7SEG_7_GPIO_Port, LED7SEG_7_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	4803      	ldr	r0, [pc, #12]	; (8000dcc <display7SEG+0x318>)
 8000dbe:	f000 fed8 	bl	8001b72 <HAL_GPIO_WritePin>
		break;
 8000dc2:	bf00      	nop
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40010800 	.word	0x40010800

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd6:	f000 fbc9 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dda:	f000 f89d 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dde:	f000 f923 	bl	8001028 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000de2:	f000 f8d5 	bl	8000f90 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000de6:	484b      	ldr	r0, [pc, #300]	; (8000f14 <main+0x144>)
 8000de8:	f001 fb22 	bl	8002430 <HAL_TIM_Base_Start_IT>
  init_leds();
 8000dec:	f000 f97e 	bl	80010ec <init_leds>
  init_button_state();
 8000df0:	f7ff f9bc 	bl	800016c <init_button_state>
  init_button();
 8000df4:	f7ff fa80 	bl	80002f8 <init_button>
  init_timers();
 8000df8:	f000 f9b6 	bl	8001168 <init_timers>
  traffic_light_reset();
 8000dfc:	f7ff faae 	bl	800035c <traffic_light_reset>

  enum SystemState systemState = NORMAL_MODE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Read button every 10ms
	  if (is_timer_btn_reading_flagged())
 8000e04:	f000 fa98 	bl	8001338 <is_timer_btn_reading_flagged>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d004      	beq.n	8000e18 <main+0x48>
	  {
		  button_reading();
 8000e0e:	f7ff f9f1 	bl	80001f4 <button_reading>
		  set_timer_btn_reading(10);
 8000e12:	200a      	movs	r0, #10
 8000e14:	f000 fa74 	bl	8001300 <set_timer_btn_reading>
	  }

	  //Update the state of select mode button (index 0)
	  //This button does not support auto-increment while holding
	  not_auto_increase_btn_fsm(0);
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff f9bf 	bl	800019c <not_auto_increase_btn_fsm>
	  enum ButtonState selectModeButton = get_button_state(0);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff f994 	bl	800014c <get_button_state>
 8000e24:	4603      	mov	r3, r0
 8000e26:	71bb      	strb	r3, [r7, #6]

	  //FSM for the entire system
	  switch (systemState)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	2b07      	cmp	r3, #7
 8000e2c:	d86f      	bhi.n	8000f0e <main+0x13e>
 8000e2e:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <main+0x64>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000e55 	.word	0x08000e55
 8000e38:	08000e65 	.word	0x08000e65
 8000e3c:	08000e79 	.word	0x08000e79
 8000e40:	08000e8b 	.word	0x08000e8b
 8000e44:	08000ea1 	.word	0x08000ea1
 8000e48:	08000eb3 	.word	0x08000eb3
 8000e4c:	08000ec9 	.word	0x08000ec9
 8000e50:	08000edb 	.word	0x08000edb
	  {
	  case NORMAL_MODE:
		  traffic_light_fsm();
 8000e54:	f7ff fae0 	bl	8000418 <traffic_light_fsm>
		  if (selectModeButton == BUTTON_PRESSED)
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d148      	bne.n	8000ef0 <main+0x120>
		  {
			  systemState = NORMAL_MODE_PRESSED;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	71fb      	strb	r3, [r7, #7]
		  }
		  break;
 8000e62:	e045      	b.n	8000ef0 <main+0x120>
	  case NORMAL_MODE_PRESSED:
		  traffic_light_fsm();
 8000e64:	f7ff fad8 	bl	8000418 <traffic_light_fsm>
		  if (selectModeButton == BUTTON_RELEASED)
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d142      	bne.n	8000ef4 <main+0x124>
		  {
			  systemState = MODIFY_RED;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	71fb      	strb	r3, [r7, #7]
			  blink_led_clear();
 8000e72:	f7ff fddb 	bl	8000a2c <blink_led_clear>
		  }
		  break;
 8000e76:	e03d      	b.n	8000ef4 <main+0x124>
	  case MODIFY_RED:
		  blink_led(RED);
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff fc7f 	bl	800077c <blink_led>
		  if (selectModeButton == BUTTON_PRESSED)
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d139      	bne.n	8000ef8 <main+0x128>
		  {
			  systemState = MODIFY_RED_PRESSED;
 8000e84:	2303      	movs	r3, #3
 8000e86:	71fb      	strb	r3, [r7, #7]
		  }
		  break;
 8000e88:	e036      	b.n	8000ef8 <main+0x128>
	  case MODIFY_RED_PRESSED:
		  blink_led(RED);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fc76 	bl	800077c <blink_led>
		  if (selectModeButton == BUTTON_RELEASED)
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d132      	bne.n	8000efc <main+0x12c>
		  {
			  systemState = MODIFY_GREEN;
 8000e96:	2304      	movs	r3, #4
 8000e98:	71fb      	strb	r3, [r7, #7]
			  blink_led_clear();
 8000e9a:	f7ff fdc7 	bl	8000a2c <blink_led_clear>
		  }
		  break;
 8000e9e:	e02d      	b.n	8000efc <main+0x12c>
	  case MODIFY_GREEN:
		  blink_led(GREEN);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f7ff fc6b 	bl	800077c <blink_led>
		  if (selectModeButton == BUTTON_PRESSED)
 8000ea6:	79bb      	ldrb	r3, [r7, #6]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d129      	bne.n	8000f00 <main+0x130>
		  {
			  systemState = MODIFY_GREEN_PRESSED;
 8000eac:	2305      	movs	r3, #5
 8000eae:	71fb      	strb	r3, [r7, #7]
		  }
		  break;
 8000eb0:	e026      	b.n	8000f00 <main+0x130>
	  case MODIFY_GREEN_PRESSED:
		  blink_led(GREEN);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f7ff fc62 	bl	800077c <blink_led>
		  if (selectModeButton == BUTTON_RELEASED)
 8000eb8:	79bb      	ldrb	r3, [r7, #6]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d122      	bne.n	8000f04 <main+0x134>
		  {
			  systemState = MODIFY_YELLOW;
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	71fb      	strb	r3, [r7, #7]
			  blink_led_clear();
 8000ec2:	f7ff fdb3 	bl	8000a2c <blink_led_clear>
		  }
		  break;
 8000ec6:	e01d      	b.n	8000f04 <main+0x134>
	  case MODIFY_YELLOW:
		  blink_led(YELLOW);
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f7ff fc57 	bl	800077c <blink_led>
		  if (selectModeButton == BUTTON_PRESSED)
 8000ece:	79bb      	ldrb	r3, [r7, #6]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d119      	bne.n	8000f08 <main+0x138>
		  {
			  systemState = MODIFY_YELLOW_PRESSED;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	71fb      	strb	r3, [r7, #7]
		  }
		  break;
 8000ed8:	e016      	b.n	8000f08 <main+0x138>
	  case MODIFY_YELLOW_PRESSED:
		  blink_led(YELLOW);
 8000eda:	2002      	movs	r0, #2
 8000edc:	f7ff fc4e 	bl	800077c <blink_led>
		  if (selectModeButton == BUTTON_RELEASED)
 8000ee0:	79bb      	ldrb	r3, [r7, #6]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d112      	bne.n	8000f0c <main+0x13c>
		  {
			  systemState = NORMAL_MODE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	71fb      	strb	r3, [r7, #7]
			  traffic_light_reset();
 8000eea:	f7ff fa37 	bl	800035c <traffic_light_reset>
		  }
		  break;
 8000eee:	e00d      	b.n	8000f0c <main+0x13c>
		  break;
 8000ef0:	bf00      	nop
 8000ef2:	e00c      	b.n	8000f0e <main+0x13e>
		  break;
 8000ef4:	bf00      	nop
 8000ef6:	e00a      	b.n	8000f0e <main+0x13e>
		  break;
 8000ef8:	bf00      	nop
 8000efa:	e008      	b.n	8000f0e <main+0x13e>
		  break;
 8000efc:	bf00      	nop
 8000efe:	e006      	b.n	8000f0e <main+0x13e>
		  break;
 8000f00:	bf00      	nop
 8000f02:	e004      	b.n	8000f0e <main+0x13e>
		  break;
 8000f04:	bf00      	nop
 8000f06:	e002      	b.n	8000f0e <main+0x13e>
		  break;
 8000f08:	bf00      	nop
 8000f0a:	e000      	b.n	8000f0e <main+0x13e>
		  break;
 8000f0c:	bf00      	nop
	  }

	  led7_scanning();
 8000f0e:	f7ff fd01 	bl	8000914 <led7_scanning>
  {
 8000f12:	e777      	b.n	8000e04 <main+0x34>
 8000f14:	20000080 	.word	0x20000080

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b090      	sub	sp, #64	; 0x40
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0318 	add.w	r3, r7, #24
 8000f22:	2228      	movs	r2, #40	; 0x28
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 fe3e 	bl	8002ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f42:	2310      	movs	r3, #16
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4a:	f107 0318 	add.w	r3, r7, #24
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fe40 	bl	8001bd4 <HAL_RCC_OscConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f5a:	f000 f90f 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	230f      	movs	r3, #15
 8000f60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 f8ae 	bl	80020d8 <HAL_RCC_ClockConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f82:	f000 f8fb 	bl	800117c <Error_Handler>
  }
}
 8000f86:	bf00      	nop
 8000f88:	3740      	adds	r7, #64	; 0x40
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fb6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fc4:	2209      	movs	r2, #9
 8000fc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fd4:	4813      	ldr	r0, [pc, #76]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fd6:	f001 f9db 	bl	8002390 <HAL_TIM_Base_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fe0:	f000 f8cc 	bl	800117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <MX_TIM2_Init+0x94>)
 8000ff2:	f001 fb71 	bl	80026d8 <HAL_TIM_ConfigClockSource>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ffc:	f000 f8be 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_TIM2_Init+0x94>)
 800100e:	f001 fd3d 	bl	8002a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001018:	f000 f8b0 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000080 	.word	0x20000080

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <MX_GPIO_Init+0xb8>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a27      	ldr	r2, [pc, #156]	; (80010e0 <MX_GPIO_Init+0xb8>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <MX_GPIO_Init+0xb8>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_GPIO_Init+0xb8>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <MX_GPIO_Init+0xb8>)
 800105a:	f043 0308 	orr.w	r3, r3, #8
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_GPIO_Init+0xb8>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	603b      	str	r3, [r7, #0]
 800106a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7SEG_1_Pin|LED7SEG_2_Pin|LED7SEG_3_Pin|LED7SEG_4_Pin
 800106c:	2200      	movs	r2, #0
 800106e:	f640 71fe 	movw	r1, #4094	; 0xffe
 8001072:	481c      	ldr	r0, [pc, #112]	; (80010e4 <MX_GPIO_Init+0xbc>)
 8001074:	f000 fd7d 	bl	8001b72 <HAL_GPIO_WritePin>
                          |LED7SEG_5_Pin|LED7SEG_6_Pin|LED7SEG_7_Pin|EN_7SEG1_TEN_Pin
                          |EN_7SEG1_UNIT_Pin|EN_7SEG2_TEN_Pin|EN_7SEG2_UNIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_RED_Pin|LED1_GREEN_Pin|LED1_YELLOW_Pin|LED2_RED_Pin
 8001078:	2200      	movs	r2, #0
 800107a:	213f      	movs	r1, #63	; 0x3f
 800107c:	481a      	ldr	r0, [pc, #104]	; (80010e8 <MX_GPIO_Init+0xc0>)
 800107e:	f000 fd78 	bl	8001b72 <HAL_GPIO_WritePin>
                          |LED2_GREEN_Pin|LED2_YELLOW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED7SEG_1_Pin LED7SEG_2_Pin LED7SEG_3_Pin LED7SEG_4_Pin
                           LED7SEG_5_Pin LED7SEG_6_Pin LED7SEG_7_Pin EN_7SEG1_TEN_Pin
                           EN_7SEG1_UNIT_Pin EN_7SEG2_TEN_Pin EN_7SEG2_UNIT_Pin */
  GPIO_InitStruct.Pin = LED7SEG_1_Pin|LED7SEG_2_Pin|LED7SEG_3_Pin|LED7SEG_4_Pin
 8001082:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001086:	60bb      	str	r3, [r7, #8]
                          |LED7SEG_5_Pin|LED7SEG_6_Pin|LED7SEG_7_Pin|EN_7SEG1_TEN_Pin
                          |EN_7SEG1_UNIT_Pin|EN_7SEG2_TEN_Pin|EN_7SEG2_UNIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2302      	movs	r3, #2
 8001092:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	4619      	mov	r1, r3
 800109a:	4812      	ldr	r0, [pc, #72]	; (80010e4 <MX_GPIO_Init+0xbc>)
 800109c:	f000 fbd6 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_RED_Pin LED1_GREEN_Pin LED1_YELLOW_Pin LED2_RED_Pin
                           LED2_GREEN_Pin LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|LED1_GREEN_Pin|LED1_YELLOW_Pin|LED2_RED_Pin
 80010a0:	233f      	movs	r3, #63	; 0x3f
 80010a2:	60bb      	str	r3, [r7, #8]
                          |LED2_GREEN_Pin|LED2_YELLOW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2302      	movs	r3, #2
 80010ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	4619      	mov	r1, r3
 80010b6:	480c      	ldr	r0, [pc, #48]	; (80010e8 <MX_GPIO_Init+0xc0>)
 80010b8:	f000 fbc8 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : SELECT_MODE_BTN_Pin MODIFY_CYCLE_BTN_Pin SET_VALUE_BTN_Pin */
  GPIO_InitStruct.Pin = SELECT_MODE_BTN_Pin|MODIFY_CYCLE_BTN_Pin|SET_VALUE_BTN_Pin;
 80010bc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80010c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	4619      	mov	r1, r3
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <MX_GPIO_Init+0xbc>)
 80010d2:	f000 fbbb 	bl	800184c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010800 	.word	0x40010800
 80010e8:	40010c00 	.word	0x40010c00

080010ec <init_leds>:

	return 5;//invalid mode
}

void init_leds()
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_7SEG1_TEN_GPIO_Port, EN_7SEG1_TEN_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f6:	481a      	ldr	r0, [pc, #104]	; (8001160 <init_leds+0x74>)
 80010f8:	f000 fd3b 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_7SEG1_UNIT_GPIO_Port, EN_7SEG1_UNIT_Pin, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001102:	4817      	ldr	r0, [pc, #92]	; (8001160 <init_leds+0x74>)
 8001104:	f000 fd35 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_7SEG2_TEN_GPIO_Port, EN_7SEG2_TEN_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800110e:	4814      	ldr	r0, [pc, #80]	; (8001160 <init_leds+0x74>)
 8001110:	f000 fd2f 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_7SEG2_UNIT_GPIO_Port, EN_7SEG2_UNIT_Pin, GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <init_leds+0x74>)
 800111c:	f000 fd29 	bl	8001b72 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	2101      	movs	r1, #1
 8001124:	480f      	ldr	r0, [pc, #60]	; (8001164 <init_leds+0x78>)
 8001126:	f000 fd24 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_SET);
 800112a:	2201      	movs	r2, #1
 800112c:	2102      	movs	r1, #2
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <init_leds+0x78>)
 8001130:	f000 fd1f 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_YELLOW_GPIO_Port, LED1_YELLOW_Pin, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2104      	movs	r1, #4
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <init_leds+0x78>)
 800113a:	f000 fd1a 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_RED_GPIO_Port, LED2_RED_Pin, GPIO_PIN_SET);
 800113e:	2201      	movs	r2, #1
 8001140:	2108      	movs	r1, #8
 8001142:	4808      	ldr	r0, [pc, #32]	; (8001164 <init_leds+0x78>)
 8001144:	f000 fd15 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	2110      	movs	r1, #16
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <init_leds+0x78>)
 800114e:	f000 fd10 	bl	8001b72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	2120      	movs	r1, #32
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <init_leds+0x78>)
 8001158:	f000 fd0b 	bl	8001b72 <HAL_GPIO_WritePin>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40010800 	.word	0x40010800
 8001164:	40010c00 	.word	0x40010c00

08001168 <init_timers>:

void init_timers()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	set_timer_btn_reading(10);
 800116c:	200a      	movs	r0, #10
 800116e:	f000 f8c7 	bl	8001300 <set_timer_btn_reading>
	set_timer_7seg_scan(SCANNING_DURATION);
 8001172:	20fa      	movs	r0, #250	; 0xfa
 8001174:	f000 f902 	bl	800137c <set_timer_7seg_scan>
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_MspInit+0x40>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <HAL_MspInit+0x40>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6193      	str	r3, [r2, #24]
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_MspInit+0x40>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_MspInit+0x40>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_MspInit+0x40>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_MspInit+0x40>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	40021000 	.word	0x40021000

080011cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011dc:	d113      	bne.n	8001206 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_TIM_Base_MspInit+0x44>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <HAL_TIM_Base_MspInit+0x44>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_TIM_Base_MspInit+0x44>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	201c      	movs	r0, #28
 80011fc:	f000 faef 	bl	80017de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001200:	201c      	movs	r0, #28
 8001202:	f000 fb08 	bl	8001816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <NMI_Handler+0x4>

0800121a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <MemManage_Handler+0x4>

08001226 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <UsageFault_Handler+0x4>

08001232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr

08001256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125a:	f000 f9cd 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <TIM2_IRQHandler+0x10>)
 800126a:	f001 f92d 	bl	80024c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000080 	.word	0x20000080

08001278 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <set_timer_blink>:
uint8_t timerTraffic1Flag = 0;
uint16_t timerTraffic2Counter = 0;
uint8_t timerTraffic2Flag = 0;

void set_timer_blink(uint16_t duration)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
	timerBlinkCounter = duration / TIME_UNIT;
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <set_timer_blink+0x2c>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	08db      	lsrs	r3, r3, #3
 8001298:	b29a      	uxth	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <set_timer_blink+0x30>)
 800129c:	801a      	strh	r2, [r3, #0]
	timerBlinkFlag = 0;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <set_timer_blink+0x34>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	cccccccd 	.word	0xcccccccd
 80012b4:	200000cc 	.word	0x200000cc
 80012b8:	200000ce 	.word	0x200000ce

080012bc <is_timer_blink_flagged>:

uint8_t is_timer_blink_flagged()
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	return timerBlinkFlag;
 80012c0:	4b02      	ldr	r3, [pc, #8]	; (80012cc <is_timer_blink_flagged+0x10>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	200000ce 	.word	0x200000ce

080012d0 <timer_blink_run>:

void timer_blink_run()
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
	--timerBlinkCounter;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <timer_blink_run+0x28>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <timer_blink_run+0x28>)
 80012de:	801a      	strh	r2, [r3, #0]
	if (timerBlinkCounter <= 0)
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <timer_blink_run+0x28>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <timer_blink_run+0x1e>
	{
		timerBlinkFlag = 1;
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <timer_blink_run+0x2c>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
	}
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200000cc 	.word	0x200000cc
 80012fc:	200000ce 	.word	0x200000ce

08001300 <set_timer_btn_reading>:

void set_timer_btn_reading(uint16_t duration)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	80fb      	strh	r3, [r7, #6]
	timerBtnReadingCounter = duration / TIME_UNIT;
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <set_timer_btn_reading+0x2c>)
 800130e:	fba2 2303 	umull	r2, r3, r2, r3
 8001312:	08db      	lsrs	r3, r3, #3
 8001314:	b29a      	uxth	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <set_timer_btn_reading+0x30>)
 8001318:	801a      	strh	r2, [r3, #0]
	timerBtnReadingFlag = 0;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <set_timer_btn_reading+0x34>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	cccccccd 	.word	0xcccccccd
 8001330:	200000c8 	.word	0x200000c8
 8001334:	200000ca 	.word	0x200000ca

08001338 <is_timer_btn_reading_flagged>:

uint8_t is_timer_btn_reading_flagged()
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
	return timerBtnReadingFlag;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <is_timer_btn_reading_flagged+0x10>)
 800133e:	781b      	ldrb	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	200000ca 	.word	0x200000ca

0800134c <timer_btn_reading_run>:

void timer_btn_reading_run()
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	--timerBtnReadingCounter;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <timer_btn_reading_run+0x28>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	3b01      	subs	r3, #1
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <timer_btn_reading_run+0x28>)
 800135a:	801a      	strh	r2, [r3, #0]
	if (timerBtnReadingCounter <= 0)
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <timer_btn_reading_run+0x28>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <timer_btn_reading_run+0x1e>
	{
		timerBtnReadingFlag = 1;
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <timer_btn_reading_run+0x2c>)
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
	}
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	200000c8 	.word	0x200000c8
 8001378:	200000ca 	.word	0x200000ca

0800137c <set_timer_7seg_scan>:

void set_timer_7seg_scan(uint16_t duration)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
	timer7SegScanCounter = duration / TIME_UNIT;
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <set_timer_7seg_scan+0x2c>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	08db      	lsrs	r3, r3, #3
 8001390:	b29a      	uxth	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <set_timer_7seg_scan+0x30>)
 8001394:	801a      	strh	r2, [r3, #0]
	timer7SegScanFlag = 0;
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <set_timer_7seg_scan+0x34>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	cccccccd 	.word	0xcccccccd
 80013ac:	200000d0 	.word	0x200000d0
 80013b0:	200000d2 	.word	0x200000d2

080013b4 <is_timer_7seg_scan_flagged>:

uint8_t is_timer_7seg_scan_flagged()
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	return timer7SegScanFlag;
 80013b8:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <is_timer_7seg_scan_flagged+0x10>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	200000d2 	.word	0x200000d2

080013c8 <timer_7seg_scan_run>:

void timer_7seg_scan_run()
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
	--timer7SegScanCounter;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <timer_7seg_scan_run+0x28>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <timer_7seg_scan_run+0x28>)
 80013d6:	801a      	strh	r2, [r3, #0]
	if (timer7SegScanCounter <= 0)
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <timer_7seg_scan_run+0x28>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <timer_7seg_scan_run+0x1e>
	{
		timer7SegScanFlag = 1;
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <timer_7seg_scan_run+0x2c>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
	}
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	200000d0 	.word	0x200000d0
 80013f4:	200000d2 	.word	0x200000d2

080013f8 <set_timer_traffic1>:

void set_timer_traffic1(uint16_t duration)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
	timerTraffic1Counter = duration / TIME_UNIT;
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	4a07      	ldr	r2, [pc, #28]	; (8001424 <set_timer_traffic1+0x2c>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	08db      	lsrs	r3, r3, #3
 800140c:	b29a      	uxth	r2, r3
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <set_timer_traffic1+0x30>)
 8001410:	801a      	strh	r2, [r3, #0]
	timerTraffic1Flag = 0;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <set_timer_traffic1+0x34>)
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	cccccccd 	.word	0xcccccccd
 8001428:	200000d4 	.word	0x200000d4
 800142c:	200000d6 	.word	0x200000d6

08001430 <is_timer_traffic1_flagged>:

uint8_t is_timer_traffic1_flagged()
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
	return timerTraffic1Flag;
 8001434:	4b02      	ldr	r3, [pc, #8]	; (8001440 <is_timer_traffic1_flagged+0x10>)
 8001436:	781b      	ldrb	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	200000d6 	.word	0x200000d6

08001444 <timer_traffic1_run>:

void timer_traffic1_run()
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
	--timerTraffic1Counter;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <timer_traffic1_run+0x28>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	3b01      	subs	r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <timer_traffic1_run+0x28>)
 8001452:	801a      	strh	r2, [r3, #0]
	if (timerTraffic1Counter <= 0)
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <timer_traffic1_run+0x28>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <timer_traffic1_run+0x1e>
	{
		timerTraffic1Flag = 1;
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <timer_traffic1_run+0x2c>)
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
	}
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200000d4 	.word	0x200000d4
 8001470:	200000d6 	.word	0x200000d6

08001474 <set_timer_traffic2>:

void set_timer_traffic2(uint16_t duration)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
	timerTraffic2Counter = duration / TIME_UNIT;
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <set_timer_traffic2+0x2c>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	b29a      	uxth	r2, r3
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <set_timer_traffic2+0x30>)
 800148c:	801a      	strh	r2, [r3, #0]
	timerTraffic2Flag = 0;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <set_timer_traffic2+0x34>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	cccccccd 	.word	0xcccccccd
 80014a4:	200000d8 	.word	0x200000d8
 80014a8:	200000da 	.word	0x200000da

080014ac <is_timer_traffic2_flagged>:

uint8_t is_timer_traffic2_flagged()
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	return timerTraffic2Flag;
 80014b0:	4b02      	ldr	r3, [pc, #8]	; (80014bc <is_timer_traffic2_flagged+0x10>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	200000da 	.word	0x200000da

080014c0 <timer_traffic2_run>:

void timer_traffic2_run()
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
	--timerTraffic2Counter;
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <timer_traffic2_run+0x28>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <timer_traffic2_run+0x28>)
 80014ce:	801a      	strh	r2, [r3, #0]
	if (timerTraffic2Counter <= 0)
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <timer_traffic2_run+0x28>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <timer_traffic2_run+0x1e>
	{
		timerTraffic2Flag = 1;
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <timer_traffic2_run+0x2c>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
	}
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	200000d8 	.word	0x200000d8
 80014ec:	200000da 	.word	0x200000da

080014f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001500:	d109      	bne.n	8001516 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		timer_7seg_scan_run();
 8001502:	f7ff ff61 	bl	80013c8 <timer_7seg_scan_run>
		timer_btn_reading_run();
 8001506:	f7ff ff21 	bl	800134c <timer_btn_reading_run>
		timer_traffic1_run();;
 800150a:	f7ff ff9b 	bl	8001444 <timer_traffic1_run>
		timer_traffic2_run();
 800150e:	f7ff ffd7 	bl	80014c0 <timer_traffic2_run>
		timer_blink_run();
 8001512:	f7ff fedd 	bl	80012d0 <timer_blink_run>
	}
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001520:	f7ff feaa 	bl	8001278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001524:	480b      	ldr	r0, [pc, #44]	; (8001554 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001526:	490c      	ldr	r1, [pc, #48]	; (8001558 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <LoopFillZerobss+0x16>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800152c:	e002      	b.n	8001534 <LoopCopyDataInit>

0800152e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001532:	3304      	adds	r3, #4

08001534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001538:	d3f9      	bcc.n	800152e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153a:	4a09      	ldr	r2, [pc, #36]	; (8001560 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800153c:	4c09      	ldr	r4, [pc, #36]	; (8001564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001540:	e001      	b.n	8001546 <LoopFillZerobss>

08001542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001544:	3204      	adds	r2, #4

08001546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001548:	d3fb      	bcc.n	8001542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800154a:	f001 fb09 	bl	8002b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800154e:	f7ff fc3f 	bl	8000dd0 <main>
  bx lr
 8001552:	4770      	bx	lr
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 800155c:	08002bfc 	.word	0x08002bfc
  ldr r2, =_sbss
 8001560:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001564:	200000e0 	.word	0x200000e0

08001568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC1_2_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_Init+0x28>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_Init+0x28>)
 8001576:	f043 0310 	orr.w	r3, r3, #16
 800157a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 f923 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	200f      	movs	r0, #15
 8001584:	f000 f808 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff fdfe 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40022000 	.word	0x40022000

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f93b 	bl	8001832 <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f000 f903 	bl	80017de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000034 	.word	0x20000034
 80015f0:	2000003c 	.word	0x2000003c
 80015f4:	20000038 	.word	0x20000038

080015f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_IncTick+0x1c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_IncTick+0x20>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a03      	ldr	r2, [pc, #12]	; (8001618 <HAL_IncTick+0x20>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	2000003c 	.word	0x2000003c
 8001618:	200000dc 	.word	0x200000dc

0800161c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <HAL_GetTick+0x10>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	200000dc 	.word	0x200000dc

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4906      	ldr	r1, [pc, #24]	; (80016c8 <__NVIC_EnableIRQ+0x34>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db0a      	blt.n	80016f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	490c      	ldr	r1, [pc, #48]	; (8001718 <__NVIC_SetPriority+0x4c>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f4:	e00a      	b.n	800170c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4908      	ldr	r1, [pc, #32]	; (800171c <__NVIC_SetPriority+0x50>)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3b04      	subs	r3, #4
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	440b      	add	r3, r1
 800170a:	761a      	strb	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	2b04      	cmp	r3, #4
 800173c:	bf28      	it	cs
 800173e:	2304      	movcs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3304      	adds	r3, #4
 8001746:	2b06      	cmp	r3, #6
 8001748:	d902      	bls.n	8001750 <NVIC_EncodePriority+0x30>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3b03      	subs	r3, #3
 800174e:	e000      	b.n	8001752 <NVIC_EncodePriority+0x32>
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 32ff 	mov.w	r2, #4294967295
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	401a      	ands	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001768:	f04f 31ff 	mov.w	r1, #4294967295
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43d9      	mvns	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	4313      	orrs	r3, r2
         );
}
 800177a:	4618      	mov	r0, r3
 800177c:	3724      	adds	r7, #36	; 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f7ff ff90 	bl	80016cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff2d 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f0:	f7ff ff42 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	6978      	ldr	r0, [r7, #20]
 80017fc:	f7ff ff90 	bl	8001720 <NVIC_EncodePriority>
 8001800:	4602      	mov	r2, r0
 8001802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff5f 	bl	80016cc <__NVIC_SetPriority>
}
 800180e:	bf00      	nop
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff35 	bl	8001694 <__NVIC_EnableIRQ>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ffa2 	bl	8001784 <SysTick_Config>
 8001840:	4603      	mov	r3, r0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b08b      	sub	sp, #44	; 0x2c
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185e:	e161      	b.n	8001b24 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001860:	2201      	movs	r2, #1
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8150 	bne.w	8001b1e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a97      	ldr	r2, [pc, #604]	; (8001ae0 <HAL_GPIO_Init+0x294>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d05e      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 8001888:	4a95      	ldr	r2, [pc, #596]	; (8001ae0 <HAL_GPIO_Init+0x294>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d875      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 800188e:	4a95      	ldr	r2, [pc, #596]	; (8001ae4 <HAL_GPIO_Init+0x298>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d058      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 8001894:	4a93      	ldr	r2, [pc, #588]	; (8001ae4 <HAL_GPIO_Init+0x298>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d86f      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 800189a:	4a93      	ldr	r2, [pc, #588]	; (8001ae8 <HAL_GPIO_Init+0x29c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d052      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018a0:	4a91      	ldr	r2, [pc, #580]	; (8001ae8 <HAL_GPIO_Init+0x29c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d869      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018a6:	4a91      	ldr	r2, [pc, #580]	; (8001aec <HAL_GPIO_Init+0x2a0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d04c      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018ac:	4a8f      	ldr	r2, [pc, #572]	; (8001aec <HAL_GPIO_Init+0x2a0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d863      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018b2:	4a8f      	ldr	r2, [pc, #572]	; (8001af0 <HAL_GPIO_Init+0x2a4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d046      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018b8:	4a8d      	ldr	r2, [pc, #564]	; (8001af0 <HAL_GPIO_Init+0x2a4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d85d      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018be:	2b12      	cmp	r3, #18
 80018c0:	d82a      	bhi.n	8001918 <HAL_GPIO_Init+0xcc>
 80018c2:	2b12      	cmp	r3, #18
 80018c4:	d859      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018c6:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <HAL_GPIO_Init+0x80>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	08001947 	.word	0x08001947
 80018d0:	08001921 	.word	0x08001921
 80018d4:	08001933 	.word	0x08001933
 80018d8:	08001975 	.word	0x08001975
 80018dc:	0800197b 	.word	0x0800197b
 80018e0:	0800197b 	.word	0x0800197b
 80018e4:	0800197b 	.word	0x0800197b
 80018e8:	0800197b 	.word	0x0800197b
 80018ec:	0800197b 	.word	0x0800197b
 80018f0:	0800197b 	.word	0x0800197b
 80018f4:	0800197b 	.word	0x0800197b
 80018f8:	0800197b 	.word	0x0800197b
 80018fc:	0800197b 	.word	0x0800197b
 8001900:	0800197b 	.word	0x0800197b
 8001904:	0800197b 	.word	0x0800197b
 8001908:	0800197b 	.word	0x0800197b
 800190c:	0800197b 	.word	0x0800197b
 8001910:	08001929 	.word	0x08001929
 8001914:	0800193d 	.word	0x0800193d
 8001918:	4a76      	ldr	r2, [pc, #472]	; (8001af4 <HAL_GPIO_Init+0x2a8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800191e:	e02c      	b.n	800197a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e029      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	3304      	adds	r3, #4
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e024      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	3308      	adds	r3, #8
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e01f      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	330c      	adds	r3, #12
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	e01a      	b.n	800197c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800194e:	2304      	movs	r3, #4
 8001950:	623b      	str	r3, [r7, #32]
          break;
 8001952:	e013      	b.n	800197c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800195c:	2308      	movs	r3, #8
 800195e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	611a      	str	r2, [r3, #16]
          break;
 8001966:	e009      	b.n	800197c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001968:	2308      	movs	r3, #8
 800196a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	615a      	str	r2, [r3, #20]
          break;
 8001972:	e003      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x130>
          break;
 800197a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2bff      	cmp	r3, #255	; 0xff
 8001980:	d801      	bhi.n	8001986 <HAL_GPIO_Init+0x13a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	e001      	b.n	800198a <HAL_GPIO_Init+0x13e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3304      	adds	r3, #4
 800198a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2bff      	cmp	r3, #255	; 0xff
 8001990:	d802      	bhi.n	8001998 <HAL_GPIO_Init+0x14c>
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	e002      	b.n	800199e <HAL_GPIO_Init+0x152>
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	3b08      	subs	r3, #8
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	210f      	movs	r1, #15
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	6a39      	ldr	r1, [r7, #32]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	431a      	orrs	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 80a9 	beq.w	8001b1e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019cc:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_GPIO_Init+0x2ac>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a49      	ldr	r2, [pc, #292]	; (8001af8 <HAL_GPIO_Init+0x2ac>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_GPIO_Init+0x2ac>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019e4:	4a45      	ldr	r2, [pc, #276]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	3302      	adds	r3, #2
 80019ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3d      	ldr	r2, [pc, #244]	; (8001b00 <HAL_GPIO_Init+0x2b4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d00d      	beq.n	8001a2c <HAL_GPIO_Init+0x1e0>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a3c      	ldr	r2, [pc, #240]	; (8001b04 <HAL_GPIO_Init+0x2b8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d007      	beq.n	8001a28 <HAL_GPIO_Init+0x1dc>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a3b      	ldr	r2, [pc, #236]	; (8001b08 <HAL_GPIO_Init+0x2bc>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d101      	bne.n	8001a24 <HAL_GPIO_Init+0x1d8>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e004      	b.n	8001a2e <HAL_GPIO_Init+0x1e2>
 8001a24:	2303      	movs	r3, #3
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_Init+0x1e2>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_GPIO_Init+0x1e2>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a30:	f002 0203 	and.w	r2, r2, #3
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	4093      	lsls	r3, r2
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3e:	492f      	ldr	r1, [pc, #188]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	492b      	ldr	r1, [pc, #172]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a66:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	4927      	ldr	r1, [pc, #156]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	4921      	ldr	r1, [pc, #132]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	491d      	ldr	r1, [pc, #116]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4917      	ldr	r1, [pc, #92]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	4913      	ldr	r1, [pc, #76]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d01f      	beq.n	8001b10 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	490d      	ldr	r1, [pc, #52]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
 8001adc:	e01f      	b.n	8001b1e <HAL_GPIO_Init+0x2d2>
 8001ade:	bf00      	nop
 8001ae0:	10320000 	.word	0x10320000
 8001ae4:	10310000 	.word	0x10310000
 8001ae8:	10220000 	.word	0x10220000
 8001aec:	10210000 	.word	0x10210000
 8001af0:	10120000 	.word	0x10120000
 8001af4:	10110000 	.word	0x10110000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010000 	.word	0x40010000
 8001b00:	40010800 	.word	0x40010800
 8001b04:	40010c00 	.word	0x40010c00
 8001b08:	40011000 	.word	0x40011000
 8001b0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_GPIO_Init+0x2f4>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4909      	ldr	r1, [pc, #36]	; (8001b40 <HAL_GPIO_Init+0x2f4>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	3301      	adds	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f47f ae96 	bne.w	8001860 <HAL_GPIO_Init+0x14>
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	372c      	adds	r7, #44	; 0x2c
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e001      	b.n	8001b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	807b      	strh	r3, [r7, #2]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b82:	787b      	ldrb	r3, [r7, #1]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b88:	887a      	ldrh	r2, [r7, #2]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b8e:	e003      	b.n	8001b98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	041a      	lsls	r2, r3, #16
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	611a      	str	r2, [r3, #16]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b085      	sub	sp, #20
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bb4:	887a      	ldrh	r2, [r7, #2]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	041a      	lsls	r2, r3, #16
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	43d9      	mvns	r1, r3
 8001bc0:	887b      	ldrh	r3, [r7, #2]
 8001bc2:	400b      	ands	r3, r1
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	611a      	str	r2, [r3, #16]
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e272      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8087 	beq.w	8001d02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf4:	4b92      	ldr	r3, [pc, #584]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d00c      	beq.n	8001c1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c00:	4b8f      	ldr	r3, [pc, #572]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d112      	bne.n	8001c32 <HAL_RCC_OscConfig+0x5e>
 8001c0c:	4b8c      	ldr	r3, [pc, #560]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c18:	d10b      	bne.n	8001c32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1a:	4b89      	ldr	r3, [pc, #548]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d06c      	beq.n	8001d00 <HAL_RCC_OscConfig+0x12c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d168      	bne.n	8001d00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e24c      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x76>
 8001c3c:	4b80      	ldr	r3, [pc, #512]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a7f      	ldr	r2, [pc, #508]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e02e      	b.n	8001ca8 <HAL_RCC_OscConfig+0xd4>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x98>
 8001c52:	4b7b      	ldr	r3, [pc, #492]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a7a      	ldr	r2, [pc, #488]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4b78      	ldr	r3, [pc, #480]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a77      	ldr	r2, [pc, #476]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e01d      	b.n	8001ca8 <HAL_RCC_OscConfig+0xd4>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0xbc>
 8001c76:	4b72      	ldr	r3, [pc, #456]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a71      	ldr	r2, [pc, #452]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b6f      	ldr	r3, [pc, #444]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a6e      	ldr	r2, [pc, #440]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e00b      	b.n	8001ca8 <HAL_RCC_OscConfig+0xd4>
 8001c90:	4b6b      	ldr	r3, [pc, #428]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a6a      	ldr	r2, [pc, #424]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b68      	ldr	r3, [pc, #416]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a67      	ldr	r2, [pc, #412]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fcb4 	bl	800161c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff fcb0 	bl	800161c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e200      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0xe4>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fca0 	bl	800161c <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fc9c 	bl	800161c <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e1ec      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x10c>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d063      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d0e:	4b4c      	ldr	r3, [pc, #304]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d1a:	4b49      	ldr	r3, [pc, #292]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d11c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x18c>
 8001d26:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d116      	bne.n	8001d60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	4b43      	ldr	r3, [pc, #268]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x176>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e1c0      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4939      	ldr	r1, [pc, #228]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5e:	e03a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d68:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <HAL_RCC_OscConfig+0x270>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7ff fc55 	bl	800161c <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d76:	f7ff fc51 	bl	800161c <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e1a1      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4927      	ldr	r1, [pc, #156]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
 8001da8:	e015      	b.n	8001dd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001daa:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <HAL_RCC_OscConfig+0x270>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff fc34 	bl	800161c <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db8:	f7ff fc30 	bl	800161c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e180      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d03a      	beq.n	8001e58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d019      	beq.n	8001e1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df0:	f7ff fc14 	bl	800161c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df8:	f7ff fc10 	bl	800161c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e160      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f000 fa9c 	bl	8002354 <RCC_Delay>
 8001e1c:	e01c      	b.n	8001e58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff fbfa 	bl	800161c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2a:	e00f      	b.n	8001e4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fbf6 	bl	800161c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d908      	bls.n	8001e4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e146      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	42420000 	.word	0x42420000
 8001e48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4c:	4b92      	ldr	r3, [pc, #584]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e9      	bne.n	8001e2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80a6 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6a:	4b8b      	ldr	r3, [pc, #556]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10d      	bne.n	8001e92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	4b88      	ldr	r3, [pc, #544]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4a87      	ldr	r2, [pc, #540]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	61d3      	str	r3, [r2, #28]
 8001e82:	4b85      	ldr	r3, [pc, #532]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	4b82      	ldr	r3, [pc, #520]	; (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d118      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9e:	4b7f      	ldr	r3, [pc, #508]	; (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a7e      	ldr	r2, [pc, #504]	; (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fbb7 	bl	800161c <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb2:	f7ff fbb3 	bl	800161c <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b64      	cmp	r3, #100	; 0x64
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e103      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	4b75      	ldr	r3, [pc, #468]	; (800209c <HAL_RCC_OscConfig+0x4c8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x312>
 8001ed8:	4b6f      	ldr	r3, [pc, #444]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a6e      	ldr	r2, [pc, #440]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	e02d      	b.n	8001f42 <HAL_RCC_OscConfig+0x36e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x334>
 8001eee:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4a69      	ldr	r2, [pc, #420]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6213      	str	r3, [r2, #32]
 8001efa:	4b67      	ldr	r3, [pc, #412]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a66      	ldr	r2, [pc, #408]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6213      	str	r3, [r2, #32]
 8001f06:	e01c      	b.n	8001f42 <HAL_RCC_OscConfig+0x36e>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d10c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x356>
 8001f10:	4b61      	ldr	r3, [pc, #388]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4a60      	ldr	r2, [pc, #384]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6213      	str	r3, [r2, #32]
 8001f1c:	4b5e      	ldr	r3, [pc, #376]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4a5d      	ldr	r2, [pc, #372]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6213      	str	r3, [r2, #32]
 8001f28:	e00b      	b.n	8001f42 <HAL_RCC_OscConfig+0x36e>
 8001f2a:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a5a      	ldr	r2, [pc, #360]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	4b58      	ldr	r3, [pc, #352]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a57      	ldr	r2, [pc, #348]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 0304 	bic.w	r3, r3, #4
 8001f40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d015      	beq.n	8001f76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fb67 	bl	800161c <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7ff fb63 	bl	800161c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0b1      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f68:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ee      	beq.n	8001f52 <HAL_RCC_OscConfig+0x37e>
 8001f74:	e014      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f76:	f7ff fb51 	bl	800161c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7ff fb4d 	bl	800161c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e09b      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f94:	4b40      	ldr	r3, [pc, #256]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d105      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4b3c      	ldr	r3, [pc, #240]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a3b      	ldr	r2, [pc, #236]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8087 	beq.w	80020ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fbc:	4b36      	ldr	r3, [pc, #216]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d061      	beq.n	800208c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d146      	bne.n	800205e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd0:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <HAL_RCC_OscConfig+0x4cc>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fb21 	bl	800161c <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff fb1d 	bl	800161c <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e06d      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	4b29      	ldr	r3, [pc, #164]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002004:	d108      	bne.n	8002018 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	4921      	ldr	r1, [pc, #132]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002018:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a19      	ldr	r1, [r3, #32]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	430b      	orrs	r3, r1
 800202a:	491b      	ldr	r1, [pc, #108]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_RCC_OscConfig+0x4cc>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff faf1 	bl	800161c <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203e:	f7ff faed 	bl	800161c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e03d      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x46a>
 800205c:	e035      	b.n	80020ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_RCC_OscConfig+0x4cc>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff fada 	bl	800161c <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206c:	f7ff fad6 	bl	800161c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e026      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x498>
 800208a:	e01e      	b.n	80020ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e019      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
 8002098:	40021000 	.word	0x40021000
 800209c:	40007000 	.word	0x40007000
 80020a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_RCC_OscConfig+0x500>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000

080020d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0d0      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020ec:	4b6a      	ldr	r3, [pc, #424]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d910      	bls.n	800211c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 0207 	bic.w	r2, r3, #7
 8002102:	4965      	ldr	r1, [pc, #404]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b63      	ldr	r3, [pc, #396]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0b8      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002134:	4b59      	ldr	r3, [pc, #356]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4a58      	ldr	r2, [pc, #352]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800213e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800214c:	4b53      	ldr	r3, [pc, #332]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a52      	ldr	r2, [pc, #328]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002156:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4b50      	ldr	r3, [pc, #320]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	494d      	ldr	r1, [pc, #308]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d040      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b47      	ldr	r3, [pc, #284]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d115      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e07f      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002196:	4b41      	ldr	r3, [pc, #260]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e073      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a6:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e06b      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b6:	4b39      	ldr	r3, [pc, #228]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f023 0203 	bic.w	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4936      	ldr	r1, [pc, #216]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c8:	f7ff fa28 	bl	800161c <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d0:	f7ff fa24 	bl	800161c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e053      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 020c 	and.w	r2, r3, #12
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d1eb      	bne.n	80021d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d210      	bcs.n	8002228 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 0207 	bic.w	r2, r3, #7
 800220e:	4922      	ldr	r1, [pc, #136]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b20      	ldr	r3, [pc, #128]	; (8002298 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e032      	b.n	800228e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4916      	ldr	r1, [pc, #88]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	490e      	ldr	r1, [pc, #56]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002266:	f000 f821 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 800226a:	4602      	mov	r2, r0
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	490a      	ldr	r1, [pc, #40]	; (80022a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002278:	5ccb      	ldrb	r3, [r1, r3]
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f986 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40022000 	.word	0x40022000
 800229c:	40021000 	.word	0x40021000
 80022a0:	08002bd0 	.word	0x08002bd0
 80022a4:	20000034 	.word	0x20000034
 80022a8:	20000038 	.word	0x20000038

080022ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022c6:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d002      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x30>
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d003      	beq.n	80022e2 <HAL_RCC_GetSysClockFreq+0x36>
 80022da:	e027      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_RCC_GetSysClockFreq+0x98>)
 80022de:	613b      	str	r3, [r7, #16]
      break;
 80022e0:	e027      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	0c9b      	lsrs	r3, r3, #18
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	4a17      	ldr	r2, [pc, #92]	; (8002348 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022ec:	5cd3      	ldrb	r3, [r2, r3]
 80022ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d010      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_RCC_GetSysClockFreq+0x94>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	0c5b      	lsrs	r3, r3, #17
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	4a11      	ldr	r2, [pc, #68]	; (800234c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <HAL_RCC_GetSysClockFreq+0x98>)
 800230e:	fb03 f202 	mul.w	r2, r3, r2
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	e004      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	613b      	str	r3, [r7, #16]
      break;
 800232a:	e002      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_GetSysClockFreq+0x98>)
 800232e:	613b      	str	r3, [r7, #16]
      break;
 8002330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002332:	693b      	ldr	r3, [r7, #16]
}
 8002334:	4618      	mov	r0, r3
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	007a1200 	.word	0x007a1200
 8002348:	08002be0 	.word	0x08002be0
 800234c:	08002bf0 	.word	0x08002bf0
 8002350:	003d0900 	.word	0x003d0900

08002354 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <RCC_Delay+0x34>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <RCC_Delay+0x38>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	0a5b      	lsrs	r3, r3, #9
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002370:	bf00      	nop
  }
  while (Delay --);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1e5a      	subs	r2, r3, #1
 8002376:	60fa      	str	r2, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f9      	bne.n	8002370 <RCC_Delay+0x1c>
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	20000034 	.word	0x20000034
 800238c:	10624dd3 	.word	0x10624dd3

08002390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e041      	b.n	8002426 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe ff08 	bl	80011cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3304      	adds	r3, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4610      	mov	r0, r2
 80023d0:	f000 fa6e 	bl	80028b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d001      	beq.n	8002448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e035      	b.n	80024b4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <HAL_TIM_Base_Start_IT+0x90>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d009      	beq.n	800247e <HAL_TIM_Base_Start_IT+0x4e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002472:	d004      	beq.n	800247e <HAL_TIM_Base_Start_IT+0x4e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <HAL_TIM_Base_Start_IT+0x94>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d111      	bne.n	80024a2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b06      	cmp	r3, #6
 800248e:	d010      	beq.n	80024b2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a0:	e007      	b.n	80024b2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0201 	orr.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40012c00 	.word	0x40012c00
 80024c4:	40000400 	.word	0x40000400

080024c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d122      	bne.n	8002524 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d11b      	bne.n	8002524 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0202 	mvn.w	r2, #2
 80024f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f9b4 	bl	8002878 <HAL_TIM_IC_CaptureCallback>
 8002510:	e005      	b.n	800251e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f9a7 	bl	8002866 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f9b6 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b04      	cmp	r3, #4
 8002530:	d122      	bne.n	8002578 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b04      	cmp	r3, #4
 800253e:	d11b      	bne.n	8002578 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0204 	mvn.w	r2, #4
 8002548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2202      	movs	r2, #2
 800254e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f98a 	bl	8002878 <HAL_TIM_IC_CaptureCallback>
 8002564:	e005      	b.n	8002572 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f97d 	bl	8002866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f98c 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b08      	cmp	r3, #8
 8002584:	d122      	bne.n	80025cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b08      	cmp	r3, #8
 8002592:	d11b      	bne.n	80025cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0208 	mvn.w	r2, #8
 800259c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2204      	movs	r2, #4
 80025a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f960 	bl	8002878 <HAL_TIM_IC_CaptureCallback>
 80025b8:	e005      	b.n	80025c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f953 	bl	8002866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f962 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d122      	bne.n	8002620 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b10      	cmp	r3, #16
 80025e6:	d11b      	bne.n	8002620 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0210 	mvn.w	r2, #16
 80025f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2208      	movs	r2, #8
 80025f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f936 	bl	8002878 <HAL_TIM_IC_CaptureCallback>
 800260c:	e005      	b.n	800261a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f929 	bl	8002866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f938 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b01      	cmp	r3, #1
 800262c:	d10e      	bne.n	800264c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d107      	bne.n	800264c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0201 	mvn.w	r2, #1
 8002644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe ff52 	bl	80014f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002656:	2b80      	cmp	r3, #128	; 0x80
 8002658:	d10e      	bne.n	8002678 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002664:	2b80      	cmp	r3, #128	; 0x80
 8002666:	d107      	bne.n	8002678 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 fa6b 	bl	8002b4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002682:	2b40      	cmp	r3, #64	; 0x40
 8002684:	d10e      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	d107      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800269c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f8fc 	bl	800289c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d10e      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b20      	cmp	r3, #32
 80026be:	d107      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0220 	mvn.w	r2, #32
 80026c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fa36 	bl	8002b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_TIM_ConfigClockSource+0x1c>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e0b4      	b.n	800285e <HAL_TIM_ConfigClockSource+0x186>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800271a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800272c:	d03e      	beq.n	80027ac <HAL_TIM_ConfigClockSource+0xd4>
 800272e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002732:	f200 8087 	bhi.w	8002844 <HAL_TIM_ConfigClockSource+0x16c>
 8002736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273a:	f000 8086 	beq.w	800284a <HAL_TIM_ConfigClockSource+0x172>
 800273e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002742:	d87f      	bhi.n	8002844 <HAL_TIM_ConfigClockSource+0x16c>
 8002744:	2b70      	cmp	r3, #112	; 0x70
 8002746:	d01a      	beq.n	800277e <HAL_TIM_ConfigClockSource+0xa6>
 8002748:	2b70      	cmp	r3, #112	; 0x70
 800274a:	d87b      	bhi.n	8002844 <HAL_TIM_ConfigClockSource+0x16c>
 800274c:	2b60      	cmp	r3, #96	; 0x60
 800274e:	d050      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x11a>
 8002750:	2b60      	cmp	r3, #96	; 0x60
 8002752:	d877      	bhi.n	8002844 <HAL_TIM_ConfigClockSource+0x16c>
 8002754:	2b50      	cmp	r3, #80	; 0x50
 8002756:	d03c      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0xfa>
 8002758:	2b50      	cmp	r3, #80	; 0x50
 800275a:	d873      	bhi.n	8002844 <HAL_TIM_ConfigClockSource+0x16c>
 800275c:	2b40      	cmp	r3, #64	; 0x40
 800275e:	d058      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x13a>
 8002760:	2b40      	cmp	r3, #64	; 0x40
 8002762:	d86f      	bhi.n	8002844 <HAL_TIM_ConfigClockSource+0x16c>
 8002764:	2b30      	cmp	r3, #48	; 0x30
 8002766:	d064      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0x15a>
 8002768:	2b30      	cmp	r3, #48	; 0x30
 800276a:	d86b      	bhi.n	8002844 <HAL_TIM_ConfigClockSource+0x16c>
 800276c:	2b20      	cmp	r3, #32
 800276e:	d060      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0x15a>
 8002770:	2b20      	cmp	r3, #32
 8002772:	d867      	bhi.n	8002844 <HAL_TIM_ConfigClockSource+0x16c>
 8002774:	2b00      	cmp	r3, #0
 8002776:	d05c      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0x15a>
 8002778:	2b10      	cmp	r3, #16
 800277a:	d05a      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0x15a>
 800277c:	e062      	b.n	8002844 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	6899      	ldr	r1, [r3, #8]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f000 f95e 	bl	8002a4e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	609a      	str	r2, [r3, #8]
      break;
 80027aa:	e04f      	b.n	800284c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6899      	ldr	r1, [r3, #8]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f000 f947 	bl	8002a4e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ce:	609a      	str	r2, [r3, #8]
      break;
 80027d0:	e03c      	b.n	800284c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6859      	ldr	r1, [r3, #4]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	461a      	mov	r2, r3
 80027e0:	f000 f8be 	bl	8002960 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2150      	movs	r1, #80	; 0x50
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f915 	bl	8002a1a <TIM_ITRx_SetConfig>
      break;
 80027f0:	e02c      	b.n	800284c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6859      	ldr	r1, [r3, #4]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	461a      	mov	r2, r3
 8002800:	f000 f8dc 	bl	80029bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2160      	movs	r1, #96	; 0x60
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f905 	bl	8002a1a <TIM_ITRx_SetConfig>
      break;
 8002810:	e01c      	b.n	800284c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6859      	ldr	r1, [r3, #4]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	461a      	mov	r2, r3
 8002820:	f000 f89e 	bl	8002960 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2140      	movs	r1, #64	; 0x40
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f8f5 	bl	8002a1a <TIM_ITRx_SetConfig>
      break;
 8002830:	e00c      	b.n	800284c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4619      	mov	r1, r3
 800283c:	4610      	mov	r0, r2
 800283e:	f000 f8ec 	bl	8002a1a <TIM_ITRx_SetConfig>
      break;
 8002842:	e003      	b.n	800284c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
      break;
 8002848:	e000      	b.n	800284c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800284a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
	...

080028b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a25      	ldr	r2, [pc, #148]	; (8002958 <TIM_Base_SetConfig+0xa8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <TIM_Base_SetConfig+0x28>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ce:	d003      	beq.n	80028d8 <TIM_Base_SetConfig+0x28>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a22      	ldr	r2, [pc, #136]	; (800295c <TIM_Base_SetConfig+0xac>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d108      	bne.n	80028ea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a1a      	ldr	r2, [pc, #104]	; (8002958 <TIM_Base_SetConfig+0xa8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d007      	beq.n	8002902 <TIM_Base_SetConfig+0x52>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f8:	d003      	beq.n	8002902 <TIM_Base_SetConfig+0x52>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a17      	ldr	r2, [pc, #92]	; (800295c <TIM_Base_SetConfig+0xac>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d108      	bne.n	8002914 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a07      	ldr	r2, [pc, #28]	; (8002958 <TIM_Base_SetConfig+0xa8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d103      	bne.n	8002948 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	615a      	str	r2, [r3, #20]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	40012c00 	.word	0x40012c00
 800295c:	40000400 	.word	0x40000400

08002960 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f023 0201 	bic.w	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800298a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f023 030a 	bic.w	r3, r3, #10
 800299c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	621a      	str	r2, [r3, #32]
}
 80029b2:	bf00      	nop
 80029b4:	371c      	adds	r7, #28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f023 0210 	bic.w	r2, r3, #16
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	031b      	lsls	r3, r3, #12
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	621a      	str	r2, [r3, #32]
}
 8002a10:	bf00      	nop
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b085      	sub	sp, #20
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f043 0307 	orr.w	r3, r3, #7
 8002a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	609a      	str	r2, [r3, #8]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b087      	sub	sp, #28
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	021a      	lsls	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	609a      	str	r2, [r3, #8]
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e041      	b.n	8002b28 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d009      	beq.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af0:	d004      	beq.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a10      	ldr	r2, [pc, #64]	; (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d10c      	bne.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40000400 	.word	0x40000400

08002b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <__libc_init_array>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	2600      	movs	r6, #0
 8002b64:	4d0c      	ldr	r5, [pc, #48]	; (8002b98 <__libc_init_array+0x38>)
 8002b66:	4c0d      	ldr	r4, [pc, #52]	; (8002b9c <__libc_init_array+0x3c>)
 8002b68:	1b64      	subs	r4, r4, r5
 8002b6a:	10a4      	asrs	r4, r4, #2
 8002b6c:	42a6      	cmp	r6, r4
 8002b6e:	d109      	bne.n	8002b84 <__libc_init_array+0x24>
 8002b70:	f000 f822 	bl	8002bb8 <_init>
 8002b74:	2600      	movs	r6, #0
 8002b76:	4d0a      	ldr	r5, [pc, #40]	; (8002ba0 <__libc_init_array+0x40>)
 8002b78:	4c0a      	ldr	r4, [pc, #40]	; (8002ba4 <__libc_init_array+0x44>)
 8002b7a:	1b64      	subs	r4, r4, r5
 8002b7c:	10a4      	asrs	r4, r4, #2
 8002b7e:	42a6      	cmp	r6, r4
 8002b80:	d105      	bne.n	8002b8e <__libc_init_array+0x2e>
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
 8002b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b88:	4798      	blx	r3
 8002b8a:	3601      	adds	r6, #1
 8002b8c:	e7ee      	b.n	8002b6c <__libc_init_array+0xc>
 8002b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b92:	4798      	blx	r3
 8002b94:	3601      	adds	r6, #1
 8002b96:	e7f2      	b.n	8002b7e <__libc_init_array+0x1e>
 8002b98:	08002bf4 	.word	0x08002bf4
 8002b9c:	08002bf4 	.word	0x08002bf4
 8002ba0:	08002bf4 	.word	0x08002bf4
 8002ba4:	08002bf8 	.word	0x08002bf8

08002ba8 <memset>:
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4402      	add	r2, r0
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d100      	bne.n	8002bb2 <memset+0xa>
 8002bb0:	4770      	bx	lr
 8002bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bb6:	e7f9      	b.n	8002bac <memset+0x4>

08002bb8 <_init>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	bf00      	nop
 8002bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	469e      	mov	lr, r3
 8002bc2:	4770      	bx	lr

08002bc4 <_fini>:
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	bf00      	nop
 8002bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bca:	bc08      	pop	{r3}
 8002bcc:	469e      	mov	lr, r3
 8002bce:	4770      	bx	lr
